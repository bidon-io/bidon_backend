---
version: "3.9"
x-restart-policy: &restart-policy
  restart: unless-stopped
x-logging: &default-logging
  options:
    max-size: "100m"
    max-file: "5"
  driver: json-file
x-bidon-environment: &bidon-environment
  LD_PRELOAD: /usr/lib/x86_64-linux-gnu/libjemalloc.so
  MALLOC_ARENA_MAX: 2
  PIDFILE: /tmp/server.pid
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: 1
  RAILS_PUMA_WORKER_COUNT: 2
  RAILS_THREADS_COUNT: 2
  SECRET_KEY_BASE: <CHANGE_ME>
  PG_DATABASE: bidon
  PG_USERNAME: bidon
  PG_PASSWORD: pass
  PG_HOST: postgres
  PG_PORT: 5432
  REDIS_URL: redis://redis:6379/0
  KAFKA_BROKERS_LIST: kafka:9092
  KAFKA_CLIENT_ID: bidon_dev
  KAFKA_DELIVERY_THRESHOLD: 100
  KAFKA_DELIVERY_INTERVAL: 30
  KAFKA_REGISTRY_URL: http://schema-registry:8081
  KAFKA_CLICK_TOPIC: click
  KAFKA_REWARD_TOPIC: reward
  KAFKA_SHOW_TOPIC: show
  KAFKA_STATS_TOPIC: stats
  MAXMIND_GEOIP_FILE_PATH: /app/public/system/GeoLite2-City.mmdb
  SYPEX_GEOIP_FILE_PATH: /app/public/system/SxGeoCity.dat

services:
  geodb-maxmind:
    image: maxmindinc/geoipupdate:v4.7.1
    environment:
      GEOIPUPDATE_ACCOUNT_ID: <CHANGE_ME>
      GEOIPUPDATE_LICENSE_KEY: <CHANGE_ME>
      GEOIPUPDATE_EDITION_IDS: GeoLite2-City
    volumes:
      - "geodb:/usr/share/GeoIP/"

  geodb-sx:
    image: bash:latest
    command: >
      bash -c "wget -O SxGeoCity_utf8.zip http://sypexgeo.net/files/SxGeoCity_utf8.zip &&
      unzip -o SxGeoCity_utf8.zip &&
      rm SxGeoCity_utf8.zip"
    volumes:
      - "geodb:/geodb"
    working_dir: /geodb

  postgres:
    image: postgres:14.7
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: bidon
      POSTGRES_DB: bidon
    logging: *default-logging
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    <<: *restart-policy

  redis:
    image: redis:7.0.9
    logging: *default-logging
    <<: *restart-policy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      ZOOKEEPER_SNAPSHOT_TRUST_EMPTY: "true"
    logging: *default-logging
    volumes:
      - "zookeeper-data:/var/lib/zookeeper/data"
      - "zookeeper-log:/var/lib/zookeeper/log"
    <<: *restart-policy

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    logging: *default-logging
    volumes:
      - "kafka-data:/var/lib/kafka/data"
      - "kafka-log:/var/lib/kafka/log"
    <<: *restart-policy

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    logging: *default-logging
    <<: *restart-policy

  db-migration:
    image: registry.appodeal.com/bidon/back:latest
    command: bin/rails db:prepare
    depends_on:
      - postgres
    environment:
      PG_DATABASE: bidon
      PG_USERNAME: bidon
      PG_PASSWORD: pass
      PG_HOST: postgres
      PG_PORT: 5432
    logging: *default-logging

  bidon-api:
    image: ghcr.io/bidon-io/bidon-back:latest
    command: bundle exec puma -C /app/config/puma.rb -p 3100
    depends_on:
      kafka:
        condition: service_started
      schema-registry:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully
      geodb-maxmind:
        condition: service_completed_successfully
      geodb-sx:
        condition: service_completed_successfully
    environment: *bidon-environment
    logging: *default-logging
    volumes:
      - "geodb:/app/public/system/"
    ports:
      - 3100:3100
    <<: *restart-policy

  bidon-backend:
    image: ghcr.io/bidon-io/bidon-back:latest
    command: bundle exec puma -C /app/config/puma.rb -p 3200
    depends_on:
      kafka:
        condition: service_started
      schema-registry:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully
    environment: *bidon-environment
    logging: *default-logging
    ports:
      - 3200:3200
    <<: *restart-policy
volumes:
  geodb:
  postgres-data:
  zookeeper-log:
  zookeeper-data:
  kafka-data:
  kafka-log:
