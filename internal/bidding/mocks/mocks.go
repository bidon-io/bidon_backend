// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/ad"
	"github.com/bidon-io/bidon-backend/internal/adapter"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/bidding"
	"github.com/bidon-io/bidon-backend/internal/bidding/adapters"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/schema"
	"sync"
)

// Ensure, that ConfigMatcherMock does implement bidding.ConfigMatcher.
// If this is not the case, regenerate this file with moq.
var _ bidding.ConfigMatcher = &ConfigMatcherMock{}

// ConfigMatcherMock is a mock implementation of bidding.ConfigMatcher.
//
//	func TestSomethingThatUsesConfigMatcher(t *testing.T) {
//
//		// make and configure a mocked bidding.ConfigMatcher
//		mockedConfigMatcher := &ConfigMatcherMock{
//			MatchFunc: func(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedConfigMatcher in code that requires bidding.ConfigMatcher
//		// and then make assertions.
//
//	}
type ConfigMatcherMock struct {
	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error)

	// calls tracks calls to the methods.
	calls struct {
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdType is the adType argument value.
			AdType ad.Type
			// SegmentID is the segmentID argument value.
			SegmentID int64
		}
	}
	lockMatch sync.RWMutex
}

// Match calls MatchFunc.
func (mock *ConfigMatcherMock) Match(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error) {
	if mock.MatchFunc == nil {
		panic("ConfigMatcherMock.MatchFunc: method is nil but ConfigMatcher.Match was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
	}{
		Ctx:       ctx,
		AppID:     appID,
		AdType:    adType,
		SegmentID: segmentID,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, appID, adType, segmentID)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedConfigMatcher.MatchCalls())
func (mock *ConfigMatcherMock) MatchCalls() []struct {
	Ctx       context.Context
	AppID     int64
	AdType    ad.Type
	SegmentID int64
} {
	var calls []struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}

// Ensure, that AdaptersBuilderMock does implement bidding.AdaptersBuilder.
// If this is not the case, regenerate this file with moq.
var _ bidding.AdaptersBuilder = &AdaptersBuilderMock{}

// AdaptersBuilderMock is a mock implementation of bidding.AdaptersBuilder.
//
//	func TestSomethingThatUsesAdaptersBuilder(t *testing.T) {
//
//		// make and configure a mocked bidding.AdaptersBuilder
//		mockedAdaptersBuilder := &AdaptersBuilderMock{
//			BuildFunc: func(adapterKey adapter.Key, cfg adapter.ProcessedConfigsMap) (adapters.Bidder, error) {
//				panic("mock out the Build method")
//			},
//		}
//
//		// use mockedAdaptersBuilder in code that requires bidding.AdaptersBuilder
//		// and then make assertions.
//
//	}
type AdaptersBuilderMock struct {
	// BuildFunc mocks the Build method.
	BuildFunc func(adapterKey adapter.Key, cfg adapter.ProcessedConfigsMap) (adapters.Bidder, error)

	// calls tracks calls to the methods.
	calls struct {
		// Build holds details about calls to the Build method.
		Build []struct {
			// AdapterKey is the adapterKey argument value.
			AdapterKey adapter.Key
			// Cfg is the cfg argument value.
			Cfg adapter.ProcessedConfigsMap
		}
	}
	lockBuild sync.RWMutex
}

// Build calls BuildFunc.
func (mock *AdaptersBuilderMock) Build(adapterKey adapter.Key, cfg adapter.ProcessedConfigsMap) (adapters.Bidder, error) {
	if mock.BuildFunc == nil {
		panic("AdaptersBuilderMock.BuildFunc: method is nil but AdaptersBuilder.Build was just called")
	}
	callInfo := struct {
		AdapterKey adapter.Key
		Cfg        adapter.ProcessedConfigsMap
	}{
		AdapterKey: adapterKey,
		Cfg:        cfg,
	}
	mock.lockBuild.Lock()
	mock.calls.Build = append(mock.calls.Build, callInfo)
	mock.lockBuild.Unlock()
	return mock.BuildFunc(adapterKey, cfg)
}

// BuildCalls gets all the calls that were made to Build.
// Check the length with:
//
//	len(mockedAdaptersBuilder.BuildCalls())
func (mock *AdaptersBuilderMock) BuildCalls() []struct {
	AdapterKey adapter.Key
	Cfg        adapter.ProcessedConfigsMap
} {
	var calls []struct {
		AdapterKey adapter.Key
		Cfg        adapter.ProcessedConfigsMap
	}
	mock.lockBuild.RLock()
	calls = mock.calls.Build
	mock.lockBuild.RUnlock()
	return calls
}

// Ensure, that NotificationHandlerMock does implement bidding.NotificationHandler.
// If this is not the case, regenerate this file with moq.
var _ bidding.NotificationHandler = &NotificationHandlerMock{}

// NotificationHandlerMock is a mock implementation of bidding.NotificationHandler.
//
//	func TestSomethingThatUsesNotificationHandler(t *testing.T) {
//
//		// make and configure a mocked bidding.NotificationHandler
//		mockedNotificationHandler := &NotificationHandlerMock{
//			HandleRoundFunc: func(contextMoqParam context.Context, imp *schema.Imp, demandResponses []adapters.DemandResponse) error {
//				panic("mock out the HandleRound method")
//			},
//		}
//
//		// use mockedNotificationHandler in code that requires bidding.NotificationHandler
//		// and then make assertions.
//
//	}
type NotificationHandlerMock struct {
	// HandleRoundFunc mocks the HandleRound method.
	HandleRoundFunc func(contextMoqParam context.Context, imp *schema.Imp, demandResponses []adapters.DemandResponse) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleRound holds details about calls to the HandleRound method.
		HandleRound []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Imp is the imp argument value.
			Imp *schema.Imp
			// DemandResponses is the demandResponses argument value.
			DemandResponses []adapters.DemandResponse
		}
	}
	lockHandleRound sync.RWMutex
}

// HandleRound calls HandleRoundFunc.
func (mock *NotificationHandlerMock) HandleRound(contextMoqParam context.Context, imp *schema.Imp, demandResponses []adapters.DemandResponse) error {
	if mock.HandleRoundFunc == nil {
		panic("NotificationHandlerMock.HandleRoundFunc: method is nil but NotificationHandler.HandleRound was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Imp             *schema.Imp
		DemandResponses []adapters.DemandResponse
	}{
		ContextMoqParam: contextMoqParam,
		Imp:             imp,
		DemandResponses: demandResponses,
	}
	mock.lockHandleRound.Lock()
	mock.calls.HandleRound = append(mock.calls.HandleRound, callInfo)
	mock.lockHandleRound.Unlock()
	return mock.HandleRoundFunc(contextMoqParam, imp, demandResponses)
}

// HandleRoundCalls gets all the calls that were made to HandleRound.
// Check the length with:
//
//	len(mockedNotificationHandler.HandleRoundCalls())
func (mock *NotificationHandlerMock) HandleRoundCalls() []struct {
	ContextMoqParam context.Context
	Imp             *schema.Imp
	DemandResponses []adapters.DemandResponse
} {
	var calls []struct {
		ContextMoqParam context.Context
		Imp             *schema.Imp
		DemandResponses []adapters.DemandResponse
	}
	mock.lockHandleRound.RLock()
	calls = mock.calls.HandleRound
	mock.lockHandleRound.RUnlock()
	return calls
}
