// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/adapter"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/bidding/adapters_builder"
	"sync"
)

// Ensure, that ConfigurationFetcherMock does implement adapters_builder.ConfigurationFetcher.
// If this is not the case, regenerate this file with moq.
var _ adapters_builder.ConfigurationFetcher = &ConfigurationFetcherMock{}

// ConfigurationFetcherMock is a mock implementation of adapters_builder.ConfigurationFetcher.
//
//	func TestSomethingThatUsesConfigurationFetcher(t *testing.T) {
//
//		// make and configure a mocked adapters_builder.ConfigurationFetcher
//		mockedConfigurationFetcher := &ConfigurationFetcherMock{
//			FetchFunc: func(ctx context.Context, appID int64, adapterKeys []adapter.Key) (adapter.RawConfigsMap, error) {
//				panic("mock out the Fetch method")
//			},
//		}
//
//		// use mockedConfigurationFetcher in code that requires adapters_builder.ConfigurationFetcher
//		// and then make assertions.
//
//	}
type ConfigurationFetcherMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(ctx context.Context, appID int64, adapterKeys []adapter.Key) (adapter.RawConfigsMap, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdapterKeys is the adapterKeys argument value.
			AdapterKeys []adapter.Key
		}
	}
	lockFetch sync.RWMutex
}

// Fetch calls FetchFunc.
func (mock *ConfigurationFetcherMock) Fetch(ctx context.Context, appID int64, adapterKeys []adapter.Key) (adapter.RawConfigsMap, error) {
	if mock.FetchFunc == nil {
		panic("ConfigurationFetcherMock.FetchFunc: method is nil but ConfigurationFetcher.Fetch was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
	}{
		Ctx:         ctx,
		AppID:       appID,
		AdapterKeys: adapterKeys,
	}
	mock.lockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	mock.lockFetch.Unlock()
	return mock.FetchFunc(ctx, appID, adapterKeys)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//
//	len(mockedConfigurationFetcher.FetchCalls())
func (mock *ConfigurationFetcherMock) FetchCalls() []struct {
	Ctx         context.Context
	AppID       int64
	AdapterKeys []adapter.Key
} {
	var calls []struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
	}
	mock.lockFetch.RLock()
	calls = mock.calls.Fetch
	mock.lockFetch.RUnlock()
	return calls
}

// Ensure, that LineItemsMatcherMock does implement adapters_builder.LineItemsMatcher.
// If this is not the case, regenerate this file with moq.
var _ adapters_builder.LineItemsMatcher = &LineItemsMatcherMock{}

// LineItemsMatcherMock is a mock implementation of adapters_builder.LineItemsMatcher.
//
//	func TestSomethingThatUsesLineItemsMatcher(t *testing.T) {
//
//		// make and configure a mocked adapters_builder.LineItemsMatcher
//		mockedLineItemsMatcher := &LineItemsMatcherMock{
//			MatchFunc: func(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedLineItemsMatcher in code that requires adapters_builder.LineItemsMatcher
//		// and then make assertions.
//
//	}
type LineItemsMatcherMock struct {
	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error)

	// calls tracks calls to the methods.
	calls struct {
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *auction.BuildParams
		}
	}
	lockMatch sync.RWMutex
}

// Match calls MatchFunc.
func (mock *LineItemsMatcherMock) Match(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error) {
	if mock.MatchFunc == nil {
		panic("LineItemsMatcherMock.MatchFunc: method is nil but LineItemsMatcher.Match was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, params)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedLineItemsMatcher.MatchCalls())
func (mock *LineItemsMatcherMock) MatchCalls() []struct {
	Ctx    context.Context
	Params *auction.BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}
