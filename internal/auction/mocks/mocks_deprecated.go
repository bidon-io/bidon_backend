// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"sync"
)

// Ensure, that LineItemsMatcherMock does implement auction.LineItemsMatcher.
// If this is not the case, regenerate this file with moq.
var _ auction.LineItemsMatcher = &LineItemsMatcherMock{}

// LineItemsMatcherMock is a mock implementation of auction.LineItemsMatcher.
//
//	func TestSomethingThatUsesLineItemsMatcher(t *testing.T) {
//
//		// make and configure a mocked auction.LineItemsMatcher
//		mockedLineItemsMatcher := &LineItemsMatcherMock{
//			MatchCachedFunc: func(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error) {
//				panic("mock out the MatchCached method")
//			},
//		}
//
//		// use mockedLineItemsMatcher in code that requires auction.LineItemsMatcher
//		// and then make assertions.
//
//	}
type LineItemsMatcherMock struct {
	// MatchCachedFunc mocks the MatchCached method.
	MatchCachedFunc func(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error)

	// calls tracks calls to the methods.
	calls struct {
		// MatchCached holds details about calls to the MatchCached method.
		MatchCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *auction.BuildParams
		}
	}
	lockMatchCached sync.RWMutex
}

// MatchCached calls MatchCachedFunc.
func (mock *LineItemsMatcherMock) MatchCached(ctx context.Context, params *auction.BuildParams) ([]auction.LineItem, error) {
	if mock.MatchCachedFunc == nil {
		panic("LineItemsMatcherMock.MatchCachedFunc: method is nil but LineItemsMatcher.MatchCached was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMatchCached.Lock()
	mock.calls.MatchCached = append(mock.calls.MatchCached, callInfo)
	mock.lockMatchCached.Unlock()
	return mock.MatchCachedFunc(ctx, params)
}

// MatchCachedCalls gets all the calls that were made to MatchCached.
// Check the length with:
//
//	len(mockedLineItemsMatcher.MatchCachedCalls())
func (mock *LineItemsMatcherMock) MatchCachedCalls() []struct {
	Ctx    context.Context
	Params *auction.BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}
	mock.lockMatchCached.RLock()
	calls = mock.calls.MatchCached
	mock.lockMatchCached.RUnlock()
	return calls
}
