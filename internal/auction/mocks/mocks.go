// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/adapter"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/bidding"
	"sync"
)

// Ensure, that AdUnitsMatcherMock does implement auction.AdUnitsMatcher.
// If this is not the case, regenerate this file with moq.
var _ auction.AdUnitsMatcher = &AdUnitsMatcherMock{}

// AdUnitsMatcherMock is a mock implementation of auction.AdUnitsMatcher.
//
//	func TestSomethingThatUsesAdUnitsMatcher(t *testing.T) {
//
//		// make and configure a mocked auction.AdUnitsMatcher
//		mockedAdUnitsMatcher := &AdUnitsMatcherMock{
//			MatchCachedFunc: func(ctx context.Context, params *auction.BuildParams) ([]auction.AdUnit, error) {
//				panic("mock out the MatchCached method")
//			},
//		}
//
//		// use mockedAdUnitsMatcher in code that requires auction.AdUnitsMatcher
//		// and then make assertions.
//
//	}
type AdUnitsMatcherMock struct {
	// MatchCachedFunc mocks the MatchCached method.
	MatchCachedFunc func(ctx context.Context, params *auction.BuildParams) ([]auction.AdUnit, error)

	// calls tracks calls to the methods.
	calls struct {
		// MatchCached holds details about calls to the MatchCached method.
		MatchCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *auction.BuildParams
		}
	}
	lockMatchCached sync.RWMutex
}

// MatchCached calls MatchCachedFunc.
func (mock *AdUnitsMatcherMock) MatchCached(ctx context.Context, params *auction.BuildParams) ([]auction.AdUnit, error) {
	if mock.MatchCachedFunc == nil {
		panic("AdUnitsMatcherMock.MatchCachedFunc: method is nil but AdUnitsMatcher.MatchCached was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMatchCached.Lock()
	mock.calls.MatchCached = append(mock.calls.MatchCached, callInfo)
	mock.lockMatchCached.Unlock()
	return mock.MatchCachedFunc(ctx, params)
}

// MatchCachedCalls gets all the calls that were made to MatchCached.
// Check the length with:
//
//	len(mockedAdUnitsMatcher.MatchCachedCalls())
func (mock *AdUnitsMatcherMock) MatchCachedCalls() []struct {
	Ctx    context.Context
	Params *auction.BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *auction.BuildParams
	}
	mock.lockMatchCached.RLock()
	calls = mock.calls.MatchCached
	mock.lockMatchCached.RUnlock()
	return calls
}

// Ensure, that BiddingBuilderMock does implement auction.BiddingBuilder.
// If this is not the case, regenerate this file with moq.
var _ auction.BiddingBuilder = &BiddingBuilderMock{}

// BiddingBuilderMock is a mock implementation of auction.BiddingBuilder.
//
//	func TestSomethingThatUsesBiddingBuilder(t *testing.T) {
//
//		// make and configure a mocked auction.BiddingBuilder
//		mockedBiddingBuilder := &BiddingBuilderMock{
//			HoldAuctionFunc: func(ctx context.Context, params *bidding.BuildParams) (bidding.AuctionResult, error) {
//				panic("mock out the HoldAuction method")
//			},
//		}
//
//		// use mockedBiddingBuilder in code that requires auction.BiddingBuilder
//		// and then make assertions.
//
//	}
type BiddingBuilderMock struct {
	// HoldAuctionFunc mocks the HoldAuction method.
	HoldAuctionFunc func(ctx context.Context, params *bidding.BuildParams) (bidding.AuctionResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// HoldAuction holds details about calls to the HoldAuction method.
		HoldAuction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *bidding.BuildParams
		}
	}
	lockHoldAuction sync.RWMutex
}

// HoldAuction calls HoldAuctionFunc.
func (mock *BiddingBuilderMock) HoldAuction(ctx context.Context, params *bidding.BuildParams) (bidding.AuctionResult, error) {
	if mock.HoldAuctionFunc == nil {
		panic("BiddingBuilderMock.HoldAuctionFunc: method is nil but BiddingBuilder.HoldAuction was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *bidding.BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockHoldAuction.Lock()
	mock.calls.HoldAuction = append(mock.calls.HoldAuction, callInfo)
	mock.lockHoldAuction.Unlock()
	return mock.HoldAuctionFunc(ctx, params)
}

// HoldAuctionCalls gets all the calls that were made to HoldAuction.
// Check the length with:
//
//	len(mockedBiddingBuilder.HoldAuctionCalls())
func (mock *BiddingBuilderMock) HoldAuctionCalls() []struct {
	Ctx    context.Context
	Params *bidding.BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *bidding.BuildParams
	}
	mock.lockHoldAuction.RLock()
	calls = mock.calls.HoldAuction
	mock.lockHoldAuction.RUnlock()
	return calls
}

// Ensure, that BiddingAdaptersConfigBuilderMock does implement auction.BiddingAdaptersConfigBuilder.
// If this is not the case, regenerate this file with moq.
var _ auction.BiddingAdaptersConfigBuilder = &BiddingAdaptersConfigBuilderMock{}

// BiddingAdaptersConfigBuilderMock is a mock implementation of auction.BiddingAdaptersConfigBuilder.
//
//	func TestSomethingThatUsesBiddingAdaptersConfigBuilder(t *testing.T) {
//
//		// make and configure a mocked auction.BiddingAdaptersConfigBuilder
//		mockedBiddingAdaptersConfigBuilder := &BiddingAdaptersConfigBuilderMock{
//			BuildFunc: func(ctx context.Context, appID int64, adapterKeys []adapter.Key, adUnitsMap *auction.AdUnitsMap) (adapter.ProcessedConfigsMap, error) {
//				panic("mock out the Build method")
//			},
//		}
//
//		// use mockedBiddingAdaptersConfigBuilder in code that requires auction.BiddingAdaptersConfigBuilder
//		// and then make assertions.
//
//	}
type BiddingAdaptersConfigBuilderMock struct {
	// BuildFunc mocks the Build method.
	BuildFunc func(ctx context.Context, appID int64, adapterKeys []adapter.Key, adUnitsMap *auction.AdUnitsMap) (adapter.ProcessedConfigsMap, error)

	// calls tracks calls to the methods.
	calls struct {
		// Build holds details about calls to the Build method.
		Build []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdapterKeys is the adapterKeys argument value.
			AdapterKeys []adapter.Key
			// AdUnitsMap is the adUnitsMap argument value.
			AdUnitsMap *auction.AdUnitsMap
		}
	}
	lockBuild sync.RWMutex
}

// Build calls BuildFunc.
func (mock *BiddingAdaptersConfigBuilderMock) Build(ctx context.Context, appID int64, adapterKeys []adapter.Key, adUnitsMap *auction.AdUnitsMap) (adapter.ProcessedConfigsMap, error) {
	if mock.BuildFunc == nil {
		panic("BiddingAdaptersConfigBuilderMock.BuildFunc: method is nil but BiddingAdaptersConfigBuilder.Build was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
		AdUnitsMap  *auction.AdUnitsMap
	}{
		Ctx:         ctx,
		AppID:       appID,
		AdapterKeys: adapterKeys,
		AdUnitsMap:  adUnitsMap,
	}
	mock.lockBuild.Lock()
	mock.calls.Build = append(mock.calls.Build, callInfo)
	mock.lockBuild.Unlock()
	return mock.BuildFunc(ctx, appID, adapterKeys, adUnitsMap)
}

// BuildCalls gets all the calls that were made to Build.
// Check the length with:
//
//	len(mockedBiddingAdaptersConfigBuilder.BuildCalls())
func (mock *BiddingAdaptersConfigBuilderMock) BuildCalls() []struct {
	Ctx         context.Context
	AppID       int64
	AdapterKeys []adapter.Key
	AdUnitsMap  *auction.AdUnitsMap
} {
	var calls []struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
		AdUnitsMap  *auction.AdUnitsMap
	}
	mock.lockBuild.RLock()
	calls = mock.calls.Build
	mock.lockBuild.RUnlock()
	return calls
}
