// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auction

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/ad"
	"sync"
)

// Ensure, that ConfigMatcherMock does implement ConfigMatcher.
// If this is not the case, regenerate this file with moq.
var _ ConfigMatcher = &ConfigMatcherMock{}

// ConfigMatcherMock is a mock implementation of ConfigMatcher.
//
//	func TestSomethingThatUsesConfigMatcher(t *testing.T) {
//
//		// make and configure a mocked ConfigMatcher
//		mockedConfigMatcher := &ConfigMatcherMock{
//			MatchFunc: func(ctx context.Context, appID int64, adType ad.Type) (*Config, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedConfigMatcher in code that requires ConfigMatcher
//		// and then make assertions.
//
//	}
type ConfigMatcherMock struct {
	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, appID int64, adType ad.Type) (*Config, error)

	// calls tracks calls to the methods.
	calls struct {
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdType is the adType argument value.
			AdType ad.Type
		}
	}
	lockMatch sync.RWMutex
}

// Match calls MatchFunc.
func (mock *ConfigMatcherMock) Match(ctx context.Context, appID int64, adType ad.Type) (*Config, error) {
	if mock.MatchFunc == nil {
		panic("ConfigMatcherMock.MatchFunc: method is nil but ConfigMatcher.Match was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		AppID  int64
		AdType ad.Type
	}{
		Ctx:    ctx,
		AppID:  appID,
		AdType: adType,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, appID, adType)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedConfigMatcher.MatchCalls())
func (mock *ConfigMatcherMock) MatchCalls() []struct {
	Ctx    context.Context
	AppID  int64
	AdType ad.Type
} {
	var calls []struct {
		Ctx    context.Context
		AppID  int64
		AdType ad.Type
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}

// Ensure, that LineItemsMatcherMock does implement LineItemsMatcher.
// If this is not the case, regenerate this file with moq.
var _ LineItemsMatcher = &LineItemsMatcherMock{}

// LineItemsMatcherMock is a mock implementation of LineItemsMatcher.
//
//	func TestSomethingThatUsesLineItemsMatcher(t *testing.T) {
//
//		// make and configure a mocked LineItemsMatcher
//		mockedLineItemsMatcher := &LineItemsMatcherMock{
//			MatchFunc: func(ctx context.Context, params *BuildParams) ([]LineItem, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedLineItemsMatcher in code that requires LineItemsMatcher
//		// and then make assertions.
//
//	}
type LineItemsMatcherMock struct {
	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, params *BuildParams) ([]LineItem, error)

	// calls tracks calls to the methods.
	calls struct {
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *BuildParams
		}
	}
	lockMatch sync.RWMutex
}

// Match calls MatchFunc.
func (mock *LineItemsMatcherMock) Match(ctx context.Context, params *BuildParams) ([]LineItem, error) {
	if mock.MatchFunc == nil {
		panic("LineItemsMatcherMock.MatchFunc: method is nil but LineItemsMatcher.Match was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, params)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedLineItemsMatcher.MatchCalls())
func (mock *LineItemsMatcherMock) MatchCalls() []struct {
	Ctx    context.Context
	Params *BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *BuildParams
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}
