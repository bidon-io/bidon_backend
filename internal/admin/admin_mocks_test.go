// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package admin

import (
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			AppDemandProfilesFunc: func() AppDemandProfileRepo {
//				panic("mock out the AppDemandProfiles method")
//			},
//			AppsFunc: func() AppRepo {
//				panic("mock out the Apps method")
//			},
//			AuctionConfigurationsFunc: func() AuctionConfigurationRepo {
//				panic("mock out the AuctionConfigurations method")
//			},
//			CountriesFunc: func() CountryRepo {
//				panic("mock out the Countries method")
//			},
//			DemandSourceAccountsFunc: func() DemandSourceAccountRepo {
//				panic("mock out the DemandSourceAccounts method")
//			},
//			DemandSourcesFunc: func() DemandSourceRepo {
//				panic("mock out the DemandSources method")
//			},
//			LineItemsFunc: func() LineItemRepo {
//				panic("mock out the LineItems method")
//			},
//			SegmentsFunc: func() SegmentRepo {
//				panic("mock out the Segments method")
//			},
//			UsersFunc: func() UserRepo {
//				panic("mock out the Users method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// AppDemandProfilesFunc mocks the AppDemandProfiles method.
	AppDemandProfilesFunc func() AppDemandProfileRepo

	// AppsFunc mocks the Apps method.
	AppsFunc func() AppRepo

	// AuctionConfigurationsFunc mocks the AuctionConfigurations method.
	AuctionConfigurationsFunc func() AuctionConfigurationRepo

	// CountriesFunc mocks the Countries method.
	CountriesFunc func() CountryRepo

	// DemandSourceAccountsFunc mocks the DemandSourceAccounts method.
	DemandSourceAccountsFunc func() DemandSourceAccountRepo

	// DemandSourcesFunc mocks the DemandSources method.
	DemandSourcesFunc func() DemandSourceRepo

	// LineItemsFunc mocks the LineItems method.
	LineItemsFunc func() LineItemRepo

	// SegmentsFunc mocks the Segments method.
	SegmentsFunc func() SegmentRepo

	// UsersFunc mocks the Users method.
	UsersFunc func() UserRepo

	// calls tracks calls to the methods.
	calls struct {
		// AppDemandProfiles holds details about calls to the AppDemandProfiles method.
		AppDemandProfiles []struct {
		}
		// Apps holds details about calls to the Apps method.
		Apps []struct {
		}
		// AuctionConfigurations holds details about calls to the AuctionConfigurations method.
		AuctionConfigurations []struct {
		}
		// Countries holds details about calls to the Countries method.
		Countries []struct {
		}
		// DemandSourceAccounts holds details about calls to the DemandSourceAccounts method.
		DemandSourceAccounts []struct {
		}
		// DemandSources holds details about calls to the DemandSources method.
		DemandSources []struct {
		}
		// LineItems holds details about calls to the LineItems method.
		LineItems []struct {
		}
		// Segments holds details about calls to the Segments method.
		Segments []struct {
		}
		// Users holds details about calls to the Users method.
		Users []struct {
		}
	}
	lockAppDemandProfiles     sync.RWMutex
	lockApps                  sync.RWMutex
	lockAuctionConfigurations sync.RWMutex
	lockCountries             sync.RWMutex
	lockDemandSourceAccounts  sync.RWMutex
	lockDemandSources         sync.RWMutex
	lockLineItems             sync.RWMutex
	lockSegments              sync.RWMutex
	lockUsers                 sync.RWMutex
}

// AppDemandProfiles calls AppDemandProfilesFunc.
func (mock *StoreMock) AppDemandProfiles() AppDemandProfileRepo {
	if mock.AppDemandProfilesFunc == nil {
		panic("StoreMock.AppDemandProfilesFunc: method is nil but Store.AppDemandProfiles was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAppDemandProfiles.Lock()
	mock.calls.AppDemandProfiles = append(mock.calls.AppDemandProfiles, callInfo)
	mock.lockAppDemandProfiles.Unlock()
	return mock.AppDemandProfilesFunc()
}

// AppDemandProfilesCalls gets all the calls that were made to AppDemandProfiles.
// Check the length with:
//
//	len(mockedStore.AppDemandProfilesCalls())
func (mock *StoreMock) AppDemandProfilesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAppDemandProfiles.RLock()
	calls = mock.calls.AppDemandProfiles
	mock.lockAppDemandProfiles.RUnlock()
	return calls
}

// Apps calls AppsFunc.
func (mock *StoreMock) Apps() AppRepo {
	if mock.AppsFunc == nil {
		panic("StoreMock.AppsFunc: method is nil but Store.Apps was just called")
	}
	callInfo := struct {
	}{}
	mock.lockApps.Lock()
	mock.calls.Apps = append(mock.calls.Apps, callInfo)
	mock.lockApps.Unlock()
	return mock.AppsFunc()
}

// AppsCalls gets all the calls that were made to Apps.
// Check the length with:
//
//	len(mockedStore.AppsCalls())
func (mock *StoreMock) AppsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockApps.RLock()
	calls = mock.calls.Apps
	mock.lockApps.RUnlock()
	return calls
}

// AuctionConfigurations calls AuctionConfigurationsFunc.
func (mock *StoreMock) AuctionConfigurations() AuctionConfigurationRepo {
	if mock.AuctionConfigurationsFunc == nil {
		panic("StoreMock.AuctionConfigurationsFunc: method is nil but Store.AuctionConfigurations was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuctionConfigurations.Lock()
	mock.calls.AuctionConfigurations = append(mock.calls.AuctionConfigurations, callInfo)
	mock.lockAuctionConfigurations.Unlock()
	return mock.AuctionConfigurationsFunc()
}

// AuctionConfigurationsCalls gets all the calls that were made to AuctionConfigurations.
// Check the length with:
//
//	len(mockedStore.AuctionConfigurationsCalls())
func (mock *StoreMock) AuctionConfigurationsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuctionConfigurations.RLock()
	calls = mock.calls.AuctionConfigurations
	mock.lockAuctionConfigurations.RUnlock()
	return calls
}

// Countries calls CountriesFunc.
func (mock *StoreMock) Countries() CountryRepo {
	if mock.CountriesFunc == nil {
		panic("StoreMock.CountriesFunc: method is nil but Store.Countries was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCountries.Lock()
	mock.calls.Countries = append(mock.calls.Countries, callInfo)
	mock.lockCountries.Unlock()
	return mock.CountriesFunc()
}

// CountriesCalls gets all the calls that were made to Countries.
// Check the length with:
//
//	len(mockedStore.CountriesCalls())
func (mock *StoreMock) CountriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCountries.RLock()
	calls = mock.calls.Countries
	mock.lockCountries.RUnlock()
	return calls
}

// DemandSourceAccounts calls DemandSourceAccountsFunc.
func (mock *StoreMock) DemandSourceAccounts() DemandSourceAccountRepo {
	if mock.DemandSourceAccountsFunc == nil {
		panic("StoreMock.DemandSourceAccountsFunc: method is nil but Store.DemandSourceAccounts was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDemandSourceAccounts.Lock()
	mock.calls.DemandSourceAccounts = append(mock.calls.DemandSourceAccounts, callInfo)
	mock.lockDemandSourceAccounts.Unlock()
	return mock.DemandSourceAccountsFunc()
}

// DemandSourceAccountsCalls gets all the calls that were made to DemandSourceAccounts.
// Check the length with:
//
//	len(mockedStore.DemandSourceAccountsCalls())
func (mock *StoreMock) DemandSourceAccountsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDemandSourceAccounts.RLock()
	calls = mock.calls.DemandSourceAccounts
	mock.lockDemandSourceAccounts.RUnlock()
	return calls
}

// DemandSources calls DemandSourcesFunc.
func (mock *StoreMock) DemandSources() DemandSourceRepo {
	if mock.DemandSourcesFunc == nil {
		panic("StoreMock.DemandSourcesFunc: method is nil but Store.DemandSources was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDemandSources.Lock()
	mock.calls.DemandSources = append(mock.calls.DemandSources, callInfo)
	mock.lockDemandSources.Unlock()
	return mock.DemandSourcesFunc()
}

// DemandSourcesCalls gets all the calls that were made to DemandSources.
// Check the length with:
//
//	len(mockedStore.DemandSourcesCalls())
func (mock *StoreMock) DemandSourcesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDemandSources.RLock()
	calls = mock.calls.DemandSources
	mock.lockDemandSources.RUnlock()
	return calls
}

// LineItems calls LineItemsFunc.
func (mock *StoreMock) LineItems() LineItemRepo {
	if mock.LineItemsFunc == nil {
		panic("StoreMock.LineItemsFunc: method is nil but Store.LineItems was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLineItems.Lock()
	mock.calls.LineItems = append(mock.calls.LineItems, callInfo)
	mock.lockLineItems.Unlock()
	return mock.LineItemsFunc()
}

// LineItemsCalls gets all the calls that were made to LineItems.
// Check the length with:
//
//	len(mockedStore.LineItemsCalls())
func (mock *StoreMock) LineItemsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLineItems.RLock()
	calls = mock.calls.LineItems
	mock.lockLineItems.RUnlock()
	return calls
}

// Segments calls SegmentsFunc.
func (mock *StoreMock) Segments() SegmentRepo {
	if mock.SegmentsFunc == nil {
		panic("StoreMock.SegmentsFunc: method is nil but Store.Segments was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSegments.Lock()
	mock.calls.Segments = append(mock.calls.Segments, callInfo)
	mock.lockSegments.Unlock()
	return mock.SegmentsFunc()
}

// SegmentsCalls gets all the calls that were made to Segments.
// Check the length with:
//
//	len(mockedStore.SegmentsCalls())
func (mock *StoreMock) SegmentsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSegments.RLock()
	calls = mock.calls.Segments
	mock.lockSegments.RUnlock()
	return calls
}

// Users calls UsersFunc.
func (mock *StoreMock) Users() UserRepo {
	if mock.UsersFunc == nil {
		panic("StoreMock.UsersFunc: method is nil but Store.Users was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUsers.Lock()
	mock.calls.Users = append(mock.calls.Users, callInfo)
	mock.lockUsers.Unlock()
	return mock.UsersFunc()
}

// UsersCalls gets all the calls that were made to Users.
// Check the length with:
//
//	len(mockedStore.UsersCalls())
func (mock *StoreMock) UsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUsers.RLock()
	calls = mock.calls.Users
	mock.lockUsers.RUnlock()
	return calls
}
