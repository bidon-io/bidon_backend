// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package admin

import (
	"context"
	"sync"
)

// Ensure, that DemandSourceAccountRepoMock does implement DemandSourceAccountRepo.
// If this is not the case, regenerate this file with moq.
var _ DemandSourceAccountRepo = &DemandSourceAccountRepoMock{}

// DemandSourceAccountRepoMock is a mock implementation of DemandSourceAccountRepo.
//
//	func TestSomethingThatUsesDemandSourceAccountRepo(t *testing.T) {
//
//		// make and configure a mocked DemandSourceAccountRepo
//		mockedDemandSourceAccountRepo := &DemandSourceAccountRepoMock{
//			CreateFunc: func(ctx context.Context, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Delete method")
//			},
//			FindFunc: func(ctx context.Context, id int64) (*DemandSourceAccount, error) {
//				panic("mock out the Find method")
//			},
//			FindOwnedByUserFunc: func(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error) {
//				panic("mock out the FindOwnedByUser method")
//			},
//			FindOwnedByUserOrSharedFunc: func(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error) {
//				panic("mock out the FindOwnedByUserOrShared method")
//			},
//			ListFunc: func(contextMoqParam context.Context, stringToStrings map[string][]string) ([]DemandSourceAccount, error) {
//				panic("mock out the List method")
//			},
//			ListOwnedByUserFunc: func(ctx context.Context, userID int64, qParams map[string][]string) ([]DemandSourceAccount, error) {
//				panic("mock out the ListOwnedByUser method")
//			},
//			ListOwnedByUserOrSharedFunc: func(ctx context.Context, userID int64) ([]DemandSourceAccount, error) {
//				panic("mock out the ListOwnedByUserOrShared method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedDemandSourceAccountRepo in code that requires DemandSourceAccountRepo
//		// and then make assertions.
//
//	}
type DemandSourceAccountRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id int64) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, id int64) (*DemandSourceAccount, error)

	// FindOwnedByUserFunc mocks the FindOwnedByUser method.
	FindOwnedByUserFunc func(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error)

	// FindOwnedByUserOrSharedFunc mocks the FindOwnedByUserOrShared method.
	FindOwnedByUserOrSharedFunc func(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error)

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, stringToStrings map[string][]string) ([]DemandSourceAccount, error)

	// ListOwnedByUserFunc mocks the ListOwnedByUser method.
	ListOwnedByUserFunc func(ctx context.Context, userID int64, qParams map[string][]string) ([]DemandSourceAccount, error)

	// ListOwnedByUserOrSharedFunc mocks the ListOwnedByUserOrShared method.
	ListOwnedByUserOrSharedFunc func(ctx context.Context, userID int64) ([]DemandSourceAccount, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Attrs is the attrs argument value.
			Attrs *DemandSourceAccountAttrs
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// FindOwnedByUser holds details about calls to the FindOwnedByUser method.
		FindOwnedByUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// ID is the id argument value.
			ID int64
		}
		// FindOwnedByUserOrShared holds details about calls to the FindOwnedByUserOrShared method.
		FindOwnedByUserOrShared []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// ID is the id argument value.
			ID int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StringToStrings is the stringToStrings argument value.
			StringToStrings map[string][]string
		}
		// ListOwnedByUser holds details about calls to the ListOwnedByUser method.
		ListOwnedByUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// QParams is the qParams argument value.
			QParams map[string][]string
		}
		// ListOwnedByUserOrShared holds details about calls to the ListOwnedByUserOrShared method.
		ListOwnedByUserOrShared []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Attrs is the attrs argument value.
			Attrs *DemandSourceAccountAttrs
		}
	}
	lockCreate                  sync.RWMutex
	lockDelete                  sync.RWMutex
	lockFind                    sync.RWMutex
	lockFindOwnedByUser         sync.RWMutex
	lockFindOwnedByUserOrShared sync.RWMutex
	lockList                    sync.RWMutex
	lockListOwnedByUser         sync.RWMutex
	lockListOwnedByUserOrShared sync.RWMutex
	lockUpdate                  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DemandSourceAccountRepoMock) Create(ctx context.Context, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error) {
	if mock.CreateFunc == nil {
		panic("DemandSourceAccountRepoMock.CreateFunc: method is nil but DemandSourceAccountRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Attrs *DemandSourceAccountAttrs
	}{
		Ctx:   ctx,
		Attrs: attrs,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, attrs)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.CreateCalls())
func (mock *DemandSourceAccountRepoMock) CreateCalls() []struct {
	Ctx   context.Context
	Attrs *DemandSourceAccountAttrs
} {
	var calls []struct {
		Ctx   context.Context
		Attrs *DemandSourceAccountAttrs
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DemandSourceAccountRepoMock) Delete(ctx context.Context, id int64) error {
	if mock.DeleteFunc == nil {
		panic("DemandSourceAccountRepoMock.DeleteFunc: method is nil but DemandSourceAccountRepo.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.DeleteCalls())
func (mock *DemandSourceAccountRepoMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *DemandSourceAccountRepoMock) Find(ctx context.Context, id int64) (*DemandSourceAccount, error) {
	if mock.FindFunc == nil {
		panic("DemandSourceAccountRepoMock.FindFunc: method is nil but DemandSourceAccountRepo.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.FindCalls())
func (mock *DemandSourceAccountRepoMock) FindCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// FindOwnedByUser calls FindOwnedByUserFunc.
func (mock *DemandSourceAccountRepoMock) FindOwnedByUser(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error) {
	if mock.FindOwnedByUserFunc == nil {
		panic("DemandSourceAccountRepoMock.FindOwnedByUserFunc: method is nil but DemandSourceAccountRepo.FindOwnedByUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
		ID     int64
	}{
		Ctx:    ctx,
		UserID: userID,
		ID:     id,
	}
	mock.lockFindOwnedByUser.Lock()
	mock.calls.FindOwnedByUser = append(mock.calls.FindOwnedByUser, callInfo)
	mock.lockFindOwnedByUser.Unlock()
	return mock.FindOwnedByUserFunc(ctx, userID, id)
}

// FindOwnedByUserCalls gets all the calls that were made to FindOwnedByUser.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.FindOwnedByUserCalls())
func (mock *DemandSourceAccountRepoMock) FindOwnedByUserCalls() []struct {
	Ctx    context.Context
	UserID int64
	ID     int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
		ID     int64
	}
	mock.lockFindOwnedByUser.RLock()
	calls = mock.calls.FindOwnedByUser
	mock.lockFindOwnedByUser.RUnlock()
	return calls
}

// FindOwnedByUserOrShared calls FindOwnedByUserOrSharedFunc.
func (mock *DemandSourceAccountRepoMock) FindOwnedByUserOrShared(ctx context.Context, userID int64, id int64) (*DemandSourceAccount, error) {
	if mock.FindOwnedByUserOrSharedFunc == nil {
		panic("DemandSourceAccountRepoMock.FindOwnedByUserOrSharedFunc: method is nil but DemandSourceAccountRepo.FindOwnedByUserOrShared was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
		ID     int64
	}{
		Ctx:    ctx,
		UserID: userID,
		ID:     id,
	}
	mock.lockFindOwnedByUserOrShared.Lock()
	mock.calls.FindOwnedByUserOrShared = append(mock.calls.FindOwnedByUserOrShared, callInfo)
	mock.lockFindOwnedByUserOrShared.Unlock()
	return mock.FindOwnedByUserOrSharedFunc(ctx, userID, id)
}

// FindOwnedByUserOrSharedCalls gets all the calls that were made to FindOwnedByUserOrShared.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.FindOwnedByUserOrSharedCalls())
func (mock *DemandSourceAccountRepoMock) FindOwnedByUserOrSharedCalls() []struct {
	Ctx    context.Context
	UserID int64
	ID     int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
		ID     int64
	}
	mock.lockFindOwnedByUserOrShared.RLock()
	calls = mock.calls.FindOwnedByUserOrShared
	mock.lockFindOwnedByUserOrShared.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DemandSourceAccountRepoMock) List(contextMoqParam context.Context, stringToStrings map[string][]string) ([]DemandSourceAccount, error) {
	if mock.ListFunc == nil {
		panic("DemandSourceAccountRepoMock.ListFunc: method is nil but DemandSourceAccountRepo.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		StringToStrings map[string][]string
	}{
		ContextMoqParam: contextMoqParam,
		StringToStrings: stringToStrings,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, stringToStrings)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.ListCalls())
func (mock *DemandSourceAccountRepoMock) ListCalls() []struct {
	ContextMoqParam context.Context
	StringToStrings map[string][]string
} {
	var calls []struct {
		ContextMoqParam context.Context
		StringToStrings map[string][]string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListOwnedByUser calls ListOwnedByUserFunc.
func (mock *DemandSourceAccountRepoMock) ListOwnedByUser(ctx context.Context, userID int64, qParams map[string][]string) ([]DemandSourceAccount, error) {
	if mock.ListOwnedByUserFunc == nil {
		panic("DemandSourceAccountRepoMock.ListOwnedByUserFunc: method is nil but DemandSourceAccountRepo.ListOwnedByUser was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserID  int64
		QParams map[string][]string
	}{
		Ctx:     ctx,
		UserID:  userID,
		QParams: qParams,
	}
	mock.lockListOwnedByUser.Lock()
	mock.calls.ListOwnedByUser = append(mock.calls.ListOwnedByUser, callInfo)
	mock.lockListOwnedByUser.Unlock()
	return mock.ListOwnedByUserFunc(ctx, userID, qParams)
}

// ListOwnedByUserCalls gets all the calls that were made to ListOwnedByUser.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.ListOwnedByUserCalls())
func (mock *DemandSourceAccountRepoMock) ListOwnedByUserCalls() []struct {
	Ctx     context.Context
	UserID  int64
	QParams map[string][]string
} {
	var calls []struct {
		Ctx     context.Context
		UserID  int64
		QParams map[string][]string
	}
	mock.lockListOwnedByUser.RLock()
	calls = mock.calls.ListOwnedByUser
	mock.lockListOwnedByUser.RUnlock()
	return calls
}

// ListOwnedByUserOrShared calls ListOwnedByUserOrSharedFunc.
func (mock *DemandSourceAccountRepoMock) ListOwnedByUserOrShared(ctx context.Context, userID int64) ([]DemandSourceAccount, error) {
	if mock.ListOwnedByUserOrSharedFunc == nil {
		panic("DemandSourceAccountRepoMock.ListOwnedByUserOrSharedFunc: method is nil but DemandSourceAccountRepo.ListOwnedByUserOrShared was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockListOwnedByUserOrShared.Lock()
	mock.calls.ListOwnedByUserOrShared = append(mock.calls.ListOwnedByUserOrShared, callInfo)
	mock.lockListOwnedByUserOrShared.Unlock()
	return mock.ListOwnedByUserOrSharedFunc(ctx, userID)
}

// ListOwnedByUserOrSharedCalls gets all the calls that were made to ListOwnedByUserOrShared.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.ListOwnedByUserOrSharedCalls())
func (mock *DemandSourceAccountRepoMock) ListOwnedByUserOrSharedCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockListOwnedByUserOrShared.RLock()
	calls = mock.calls.ListOwnedByUserOrShared
	mock.lockListOwnedByUserOrShared.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DemandSourceAccountRepoMock) Update(ctx context.Context, id int64, attrs *DemandSourceAccountAttrs) (*DemandSourceAccount, error) {
	if mock.UpdateFunc == nil {
		panic("DemandSourceAccountRepoMock.UpdateFunc: method is nil but DemandSourceAccountRepo.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    int64
		Attrs *DemandSourceAccountAttrs
	}{
		Ctx:   ctx,
		ID:    id,
		Attrs: attrs,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, attrs)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedDemandSourceAccountRepo.UpdateCalls())
func (mock *DemandSourceAccountRepoMock) UpdateCalls() []struct {
	Ctx   context.Context
	ID    int64
	Attrs *DemandSourceAccountAttrs
} {
	var calls []struct {
		Ctx   context.Context
		ID    int64
		Attrs *DemandSourceAccountAttrs
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
