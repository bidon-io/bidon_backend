// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package admin

import (
	"context"
	"sync"
)

// Ensure, that ResourceRepoMock does implement ResourceRepo.
// If this is not the case, regenerate this file with moq.
var _ ResourceRepo[any, any] = &ResourceRepoMock[any, any]{}

// ResourceRepoMock is a mock implementation of ResourceRepo.
//
//	func TestSomethingThatUsesResourceRepo(t *testing.T) {
//
//		// make and configure a mocked ResourceRepo
//		mockedResourceRepo := &ResourceRepoMock{
//			CreateFunc: func(ctx context.Context, attrs *ResourceAttrs) (*Resource, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Delete method")
//			},
//			FindFunc: func(ctx context.Context, id int64) (*Resource, error) {
//				panic("mock out the Find method")
//			},
//			ListFunc: func(ctx context.Context) ([]Resource, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, attrs *ResourceAttrs) (*Resource, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedResourceRepo in code that requires ResourceRepo
//		// and then make assertions.
//
//	}
type ResourceRepoMock[Resource any, ResourceAttrs any] struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, attrs *ResourceAttrs) (*Resource, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id int64) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, id int64) (*Resource, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]Resource, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, attrs *ResourceAttrs) (*Resource, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Attrs is the attrs argument value.
			Attrs *ResourceAttrs
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Attrs is the attrs argument value.
			Attrs *ResourceAttrs
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockFind   sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) Create(ctx context.Context, attrs *ResourceAttrs) (*Resource, error) {
	if mock.CreateFunc == nil {
		panic("ResourceRepoMock.CreateFunc: method is nil but ResourceRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Attrs *ResourceAttrs
	}{
		Ctx:   ctx,
		Attrs: attrs,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, attrs)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedResourceRepo.CreateCalls())
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) CreateCalls() []struct {
	Ctx   context.Context
	Attrs *ResourceAttrs
} {
	var calls []struct {
		Ctx   context.Context
		Attrs *ResourceAttrs
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) Delete(ctx context.Context, id int64) error {
	if mock.DeleteFunc == nil {
		panic("ResourceRepoMock.DeleteFunc: method is nil but ResourceRepo.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedResourceRepo.DeleteCalls())
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) DeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) Find(ctx context.Context, id int64) (*Resource, error) {
	if mock.FindFunc == nil {
		panic("ResourceRepoMock.FindFunc: method is nil but ResourceRepo.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedResourceRepo.FindCalls())
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) FindCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) List(ctx context.Context) ([]Resource, error) {
	if mock.ListFunc == nil {
		panic("ResourceRepoMock.ListFunc: method is nil but ResourceRepo.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedResourceRepo.ListCalls())
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) Update(ctx context.Context, id int64, attrs *ResourceAttrs) (*Resource, error) {
	if mock.UpdateFunc == nil {
		panic("ResourceRepoMock.UpdateFunc: method is nil but ResourceRepo.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    int64
		Attrs *ResourceAttrs
	}{
		Ctx:   ctx,
		ID:    id,
		Attrs: attrs,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, attrs)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedResourceRepo.UpdateCalls())
func (mock *ResourceRepoMock[Resource, ResourceAttrs]) UpdateCalls() []struct {
	Ctx   context.Context
	ID    int64
	Attrs *ResourceAttrs
} {
	var calls []struct {
		Ctx   context.Context
		ID    int64
		Attrs *ResourceAttrs
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
