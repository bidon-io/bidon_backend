// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for CreateAppJSONBodyPlatformId.
const (
	CreateAppJSONBodyPlatformIdAndroid CreateAppJSONBodyPlatformId = "android"
	CreateAppJSONBodyPlatformIdIos     CreateAppJSONBodyPlatformId = "ios"
)

// Defines values for UpdateAppJSONBodyPlatformId.
const (
	UpdateAppJSONBodyPlatformIdAndroid UpdateAppJSONBodyPlatformId = "android"
	UpdateAppJSONBodyPlatformIdIos     UpdateAppJSONBodyPlatformId = "ios"
)

// Defines values for CreateAuctionConfigurationJSONBodyAdType.
const (
	CreateAuctionConfigurationJSONBodyAdTypeBanner       CreateAuctionConfigurationJSONBodyAdType = "banner"
	CreateAuctionConfigurationJSONBodyAdTypeInterstitial CreateAuctionConfigurationJSONBodyAdType = "interstitial"
	CreateAuctionConfigurationJSONBodyAdTypeRewarded     CreateAuctionConfigurationJSONBodyAdType = "rewarded"
)

// Defines values for UpdateAuctionConfigurationJSONBodyAdType.
const (
	UpdateAuctionConfigurationJSONBodyAdTypeBanner       UpdateAuctionConfigurationJSONBodyAdType = "banner"
	UpdateAuctionConfigurationJSONBodyAdTypeInterstitial UpdateAuctionConfigurationJSONBodyAdType = "interstitial"
	UpdateAuctionConfigurationJSONBodyAdTypeRewarded     UpdateAuctionConfigurationJSONBodyAdType = "rewarded"
)

// Defines values for CreateLineItemJSONBodyAdType.
const (
	CreateLineItemJSONBodyAdTypeBanner       CreateLineItemJSONBodyAdType = "banner"
	CreateLineItemJSONBodyAdTypeInterstitial CreateLineItemJSONBodyAdType = "interstitial"
	CreateLineItemJSONBodyAdTypeRewarded     CreateLineItemJSONBodyAdType = "rewarded"
)

// Defines values for CreateLineItemJSONBodyExtra1Format.
const (
	CreateLineItemJSONBodyExtra1FormatBANNER       CreateLineItemJSONBodyExtra1Format = "BANNER"
	CreateLineItemJSONBodyExtra1FormatINTERSTITIAL CreateLineItemJSONBodyExtra1Format = "INTERSTITIAL"
	CreateLineItemJSONBodyExtra1FormatMREC         CreateLineItemJSONBodyExtra1Format = "MREC"
	CreateLineItemJSONBodyExtra1FormatREWARDED     CreateLineItemJSONBodyExtra1Format = "REWARDED"
	CreateLineItemJSONBodyExtra1FormatVIDEO        CreateLineItemJSONBodyExtra1Format = "VIDEO"
)

// Defines values for CreateLineItemJSONBodyFormat.
const (
	CreateLineItemJSONBodyFormatADAPTIVE    CreateLineItemJSONBodyFormat = "ADAPTIVE"
	CreateLineItemJSONBodyFormatBANNER      CreateLineItemJSONBodyFormat = "BANNER"
	CreateLineItemJSONBodyFormatLEADERBOARD CreateLineItemJSONBodyFormat = "LEADERBOARD"
	CreateLineItemJSONBodyFormatMREC        CreateLineItemJSONBodyFormat = "MREC"
)

// Defines values for UpdateLineItemJSONBodyAdType.
const (
	UpdateLineItemJSONBodyAdTypeBanner       UpdateLineItemJSONBodyAdType = "banner"
	UpdateLineItemJSONBodyAdTypeInterstitial UpdateLineItemJSONBodyAdType = "interstitial"
	UpdateLineItemJSONBodyAdTypeRewarded     UpdateLineItemJSONBodyAdType = "rewarded"
)

// Defines values for UpdateLineItemJSONBodyExtra1Format.
const (
	UpdateLineItemJSONBodyExtra1FormatBANNER       UpdateLineItemJSONBodyExtra1Format = "BANNER"
	UpdateLineItemJSONBodyExtra1FormatINTERSTITIAL UpdateLineItemJSONBodyExtra1Format = "INTERSTITIAL"
	UpdateLineItemJSONBodyExtra1FormatMREC         UpdateLineItemJSONBodyExtra1Format = "MREC"
	UpdateLineItemJSONBodyExtra1FormatREWARDED     UpdateLineItemJSONBodyExtra1Format = "REWARDED"
	UpdateLineItemJSONBodyExtra1FormatVIDEO        UpdateLineItemJSONBodyExtra1Format = "VIDEO"
)

// Defines values for UpdateLineItemJSONBodyFormat.
const (
	UpdateLineItemJSONBodyFormatADAPTIVE    UpdateLineItemJSONBodyFormat = "ADAPTIVE"
	UpdateLineItemJSONBodyFormatBANNER      UpdateLineItemJSONBodyFormat = "BANNER"
	UpdateLineItemJSONBodyFormatLEADERBOARD UpdateLineItemJSONBodyFormat = "LEADERBOARD"
	UpdateLineItemJSONBodyFormatMREC        UpdateLineItemJSONBodyFormat = "MREC"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyAdType.
const (
	CreateAuctionConfigurationV2JSONBodyAdTypeBanner       CreateAuctionConfigurationV2JSONBodyAdType = "banner"
	CreateAuctionConfigurationV2JSONBodyAdTypeInterstitial CreateAuctionConfigurationV2JSONBodyAdType = "interstitial"
	CreateAuctionConfigurationV2JSONBodyAdTypeRewarded     CreateAuctionConfigurationV2JSONBodyAdType = "rewarded"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyBidding.
const (
	CreateAuctionConfigurationV2JSONBodyBiddingAdmob      CreateAuctionConfigurationV2JSONBodyBidding = "admob"
	CreateAuctionConfigurationV2JSONBodyBiddingAmazon     CreateAuctionConfigurationV2JSONBodyBidding = "amazon"
	CreateAuctionConfigurationV2JSONBodyBiddingApplovin   CreateAuctionConfigurationV2JSONBodyBidding = "applovin"
	CreateAuctionConfigurationV2JSONBodyBiddingBidmachine CreateAuctionConfigurationV2JSONBodyBidding = "bidmachine"
	CreateAuctionConfigurationV2JSONBodyBiddingBigoads    CreateAuctionConfigurationV2JSONBodyBidding = "bigoads"
	CreateAuctionConfigurationV2JSONBodyBiddingChartboost CreateAuctionConfigurationV2JSONBodyBidding = "chartboost"
	CreateAuctionConfigurationV2JSONBodyBiddingDtexchange CreateAuctionConfigurationV2JSONBodyBidding = "dtexchange"
	CreateAuctionConfigurationV2JSONBodyBiddingGam        CreateAuctionConfigurationV2JSONBodyBidding = "gam"
	CreateAuctionConfigurationV2JSONBodyBiddingInmobi     CreateAuctionConfigurationV2JSONBodyBidding = "inmobi"
	CreateAuctionConfigurationV2JSONBodyBiddingIronsource CreateAuctionConfigurationV2JSONBodyBidding = "ironsource"
	CreateAuctionConfigurationV2JSONBodyBiddingMeta       CreateAuctionConfigurationV2JSONBodyBidding = "meta"
	CreateAuctionConfigurationV2JSONBodyBiddingMintegral  CreateAuctionConfigurationV2JSONBodyBidding = "mintegral"
	CreateAuctionConfigurationV2JSONBodyBiddingMobilefuse CreateAuctionConfigurationV2JSONBodyBidding = "mobilefuse"
	CreateAuctionConfigurationV2JSONBodyBiddingMoloco     CreateAuctionConfigurationV2JSONBodyBidding = "moloco"
	CreateAuctionConfigurationV2JSONBodyBiddingTaurusx    CreateAuctionConfigurationV2JSONBodyBidding = "taurusx"
	CreateAuctionConfigurationV2JSONBodyBiddingUnityads   CreateAuctionConfigurationV2JSONBodyBidding = "unityads"
	CreateAuctionConfigurationV2JSONBodyBiddingVkads      CreateAuctionConfigurationV2JSONBodyBidding = "vkads"
	CreateAuctionConfigurationV2JSONBodyBiddingVungle     CreateAuctionConfigurationV2JSONBodyBidding = "vungle"
	CreateAuctionConfigurationV2JSONBodyBiddingYandex     CreateAuctionConfigurationV2JSONBodyBidding = "yandex"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyDemands.
const (
	CreateAuctionConfigurationV2JSONBodyDemandsAdmob      CreateAuctionConfigurationV2JSONBodyDemands = "admob"
	CreateAuctionConfigurationV2JSONBodyDemandsAmazon     CreateAuctionConfigurationV2JSONBodyDemands = "amazon"
	CreateAuctionConfigurationV2JSONBodyDemandsApplovin   CreateAuctionConfigurationV2JSONBodyDemands = "applovin"
	CreateAuctionConfigurationV2JSONBodyDemandsBidmachine CreateAuctionConfigurationV2JSONBodyDemands = "bidmachine"
	CreateAuctionConfigurationV2JSONBodyDemandsBigoads    CreateAuctionConfigurationV2JSONBodyDemands = "bigoads"
	CreateAuctionConfigurationV2JSONBodyDemandsChartboost CreateAuctionConfigurationV2JSONBodyDemands = "chartboost"
	CreateAuctionConfigurationV2JSONBodyDemandsDtexchange CreateAuctionConfigurationV2JSONBodyDemands = "dtexchange"
	CreateAuctionConfigurationV2JSONBodyDemandsGam        CreateAuctionConfigurationV2JSONBodyDemands = "gam"
	CreateAuctionConfigurationV2JSONBodyDemandsInmobi     CreateAuctionConfigurationV2JSONBodyDemands = "inmobi"
	CreateAuctionConfigurationV2JSONBodyDemandsIronsource CreateAuctionConfigurationV2JSONBodyDemands = "ironsource"
	CreateAuctionConfigurationV2JSONBodyDemandsMeta       CreateAuctionConfigurationV2JSONBodyDemands = "meta"
	CreateAuctionConfigurationV2JSONBodyDemandsMintegral  CreateAuctionConfigurationV2JSONBodyDemands = "mintegral"
	CreateAuctionConfigurationV2JSONBodyDemandsMobilefuse CreateAuctionConfigurationV2JSONBodyDemands = "mobilefuse"
	CreateAuctionConfigurationV2JSONBodyDemandsMoloco     CreateAuctionConfigurationV2JSONBodyDemands = "moloco"
	CreateAuctionConfigurationV2JSONBodyDemandsTaurusx    CreateAuctionConfigurationV2JSONBodyDemands = "taurusx"
	CreateAuctionConfigurationV2JSONBodyDemandsUnityads   CreateAuctionConfigurationV2JSONBodyDemands = "unityads"
	CreateAuctionConfigurationV2JSONBodyDemandsVkads      CreateAuctionConfigurationV2JSONBodyDemands = "vkads"
	CreateAuctionConfigurationV2JSONBodyDemandsVungle     CreateAuctionConfigurationV2JSONBodyDemands = "vungle"
	CreateAuctionConfigurationV2JSONBodyDemandsYandex     CreateAuctionConfigurationV2JSONBodyDemands = "yandex"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyAdType.
const (
	UpdateAuctionConfigurationV2JSONBodyAdTypeBanner       UpdateAuctionConfigurationV2JSONBodyAdType = "banner"
	UpdateAuctionConfigurationV2JSONBodyAdTypeInterstitial UpdateAuctionConfigurationV2JSONBodyAdType = "interstitial"
	UpdateAuctionConfigurationV2JSONBodyAdTypeRewarded     UpdateAuctionConfigurationV2JSONBodyAdType = "rewarded"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyBidding.
const (
	UpdateAuctionConfigurationV2JSONBodyBiddingAdmob      UpdateAuctionConfigurationV2JSONBodyBidding = "admob"
	UpdateAuctionConfigurationV2JSONBodyBiddingAmazon     UpdateAuctionConfigurationV2JSONBodyBidding = "amazon"
	UpdateAuctionConfigurationV2JSONBodyBiddingApplovin   UpdateAuctionConfigurationV2JSONBodyBidding = "applovin"
	UpdateAuctionConfigurationV2JSONBodyBiddingBidmachine UpdateAuctionConfigurationV2JSONBodyBidding = "bidmachine"
	UpdateAuctionConfigurationV2JSONBodyBiddingBigoads    UpdateAuctionConfigurationV2JSONBodyBidding = "bigoads"
	UpdateAuctionConfigurationV2JSONBodyBiddingChartboost UpdateAuctionConfigurationV2JSONBodyBidding = "chartboost"
	UpdateAuctionConfigurationV2JSONBodyBiddingDtexchange UpdateAuctionConfigurationV2JSONBodyBidding = "dtexchange"
	UpdateAuctionConfigurationV2JSONBodyBiddingGam        UpdateAuctionConfigurationV2JSONBodyBidding = "gam"
	UpdateAuctionConfigurationV2JSONBodyBiddingInmobi     UpdateAuctionConfigurationV2JSONBodyBidding = "inmobi"
	UpdateAuctionConfigurationV2JSONBodyBiddingIronsource UpdateAuctionConfigurationV2JSONBodyBidding = "ironsource"
	UpdateAuctionConfigurationV2JSONBodyBiddingMeta       UpdateAuctionConfigurationV2JSONBodyBidding = "meta"
	UpdateAuctionConfigurationV2JSONBodyBiddingMintegral  UpdateAuctionConfigurationV2JSONBodyBidding = "mintegral"
	UpdateAuctionConfigurationV2JSONBodyBiddingMobilefuse UpdateAuctionConfigurationV2JSONBodyBidding = "mobilefuse"
	UpdateAuctionConfigurationV2JSONBodyBiddingMoloco     UpdateAuctionConfigurationV2JSONBodyBidding = "moloco"
	UpdateAuctionConfigurationV2JSONBodyBiddingTaurusx    UpdateAuctionConfigurationV2JSONBodyBidding = "taurusx"
	UpdateAuctionConfigurationV2JSONBodyBiddingUnityads   UpdateAuctionConfigurationV2JSONBodyBidding = "unityads"
	UpdateAuctionConfigurationV2JSONBodyBiddingVkads      UpdateAuctionConfigurationV2JSONBodyBidding = "vkads"
	UpdateAuctionConfigurationV2JSONBodyBiddingVungle     UpdateAuctionConfigurationV2JSONBodyBidding = "vungle"
	UpdateAuctionConfigurationV2JSONBodyBiddingYandex     UpdateAuctionConfigurationV2JSONBodyBidding = "yandex"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyDemands.
const (
	UpdateAuctionConfigurationV2JSONBodyDemandsAdmob      UpdateAuctionConfigurationV2JSONBodyDemands = "admob"
	UpdateAuctionConfigurationV2JSONBodyDemandsAmazon     UpdateAuctionConfigurationV2JSONBodyDemands = "amazon"
	UpdateAuctionConfigurationV2JSONBodyDemandsApplovin   UpdateAuctionConfigurationV2JSONBodyDemands = "applovin"
	UpdateAuctionConfigurationV2JSONBodyDemandsBidmachine UpdateAuctionConfigurationV2JSONBodyDemands = "bidmachine"
	UpdateAuctionConfigurationV2JSONBodyDemandsBigoads    UpdateAuctionConfigurationV2JSONBodyDemands = "bigoads"
	UpdateAuctionConfigurationV2JSONBodyDemandsChartboost UpdateAuctionConfigurationV2JSONBodyDemands = "chartboost"
	UpdateAuctionConfigurationV2JSONBodyDemandsDtexchange UpdateAuctionConfigurationV2JSONBodyDemands = "dtexchange"
	UpdateAuctionConfigurationV2JSONBodyDemandsGam        UpdateAuctionConfigurationV2JSONBodyDemands = "gam"
	UpdateAuctionConfigurationV2JSONBodyDemandsInmobi     UpdateAuctionConfigurationV2JSONBodyDemands = "inmobi"
	UpdateAuctionConfigurationV2JSONBodyDemandsIronsource UpdateAuctionConfigurationV2JSONBodyDemands = "ironsource"
	UpdateAuctionConfigurationV2JSONBodyDemandsMeta       UpdateAuctionConfigurationV2JSONBodyDemands = "meta"
	UpdateAuctionConfigurationV2JSONBodyDemandsMintegral  UpdateAuctionConfigurationV2JSONBodyDemands = "mintegral"
	UpdateAuctionConfigurationV2JSONBodyDemandsMobilefuse UpdateAuctionConfigurationV2JSONBodyDemands = "mobilefuse"
	UpdateAuctionConfigurationV2JSONBodyDemandsMoloco     UpdateAuctionConfigurationV2JSONBodyDemands = "moloco"
	UpdateAuctionConfigurationV2JSONBodyDemandsTaurusx    UpdateAuctionConfigurationV2JSONBodyDemands = "taurusx"
	UpdateAuctionConfigurationV2JSONBodyDemandsUnityads   UpdateAuctionConfigurationV2JSONBodyDemands = "unityads"
	UpdateAuctionConfigurationV2JSONBodyDemandsVkads      UpdateAuctionConfigurationV2JSONBodyDemands = "vkads"
	UpdateAuctionConfigurationV2JSONBodyDemandsVungle     UpdateAuctionConfigurationV2JSONBodyDemands = "vungle"
	UpdateAuctionConfigurationV2JSONBodyDemandsYandex     UpdateAuctionConfigurationV2JSONBodyDemands = "yandex"
)

// AccountId defines model for accountId.
type AccountId = int64

// AccountType defines model for accountType.
type AccountType = string

// AdType defines model for adType.
type AdType = string

// AppId defines model for appId.
type AppId = int64

// DemandSourceId defines model for demandSourceId.
type DemandSourceId = int64

// IdParam A positive integer ID
type IdParam = int

// IsBidding defines model for isBidding.
type IsBidding = bool

// IsDefault defines model for isDefault.
type IsDefault = bool

// Limit defines model for limit.
type Limit = int

// Name defines model for name.
type Name = string

// Page defines model for page.
type Page = int

// UserId defines model for userId.
type UserId = int64

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		// Code Error code
		Code int `json:"code"`

		// Message Error message
		Message string `json:"message"`
	} `json:"error"`
}

// CreateAppDemandProfileJSONBody defines parameters for CreateAppDemandProfile.
type CreateAppDemandProfileJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account associated with this demand profile
	AccountType string `json:"account_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Data Additional data associated with the demand profile
	Data map[string]interface{} `json:"data"`

	// DemandSourceId A positive integer ID
	DemandSourceId int `json:"demand_source_id"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateAppDemandProfileJSONBody defines parameters for UpdateAppDemandProfile.
type UpdateAppDemandProfileJSONBody struct {
	// AccountId A positive integer ID
	AccountId *int `json:"account_id,omitempty"`

	// AccountType The type of account associated with this demand profile
	AccountType *string `json:"account_type,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Data Additional data associated with the demand profile
	Data *map[string]interface{} `json:"data,omitempty"`

	// DemandSourceId A positive integer ID
	DemandSourceId *int `json:"demand_source_id,omitempty"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// GetAppDemandProfilesCollectionParams defines parameters for GetAppDemandProfilesCollection.
type GetAppDemandProfilesCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// DemandSourceId Filter by demand source ID
	DemandSourceId *DemandSourceId `form:"demand_source_id,omitempty" json:"demand_source_id,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody struct {
	// AppKey A unique key for the app
	AppKey string `json:"app_key"`

	// Badv Blocked advertiser domains for OpenRTB (comma-separated)
	Badv *string `json:"badv,omitempty"`

	// Bapp Blocked apps for OpenRTB (comma-separated)
	Bapp *string `json:"bapp,omitempty"`

	// Bcat Blocked advertiser categories for OpenRTB (comma-separated)
	Bcat *string `json:"bcat,omitempty"`

	// Categories Array of IAB content categories describing the app
	Categories *[]string `json:"categories,omitempty"`

	// HumanName The human-readable name of the app
	HumanName string `json:"human_name"`

	// Id A positive integer ID
	Id *int `json:"id,omitempty"`

	// PackageName The package name of the app
	PackageName string                      `json:"package_name"`
	PlatformId  CreateAppJSONBodyPlatformId `json:"platform_id"`
	PublicUid   *openapi_types.UUID         `json:"public_uid,omitempty"`

	// StoreId The unique identifier of the app in app stores (e.g., Apple App Store ID, Google Play Store ID)
	StoreId *string `json:"store_id,omitempty"`

	// StoreUrl Direct URL to the app's store page
	StoreUrl *string `json:"store_url,omitempty"`

	// UserId A positive integer ID
	UserId int `json:"user_id"`
}

// CreateAppJSONBodyPlatformId defines parameters for CreateApp.
type CreateAppJSONBodyPlatformId string

// UpdateAppJSONBody defines parameters for UpdateApp.
type UpdateAppJSONBody struct {
	// AppKey A unique key for the app
	AppKey *string `json:"app_key,omitempty"`

	// Badv Blocked advertiser domains for OpenRTB (comma-separated)
	Badv *string `json:"badv,omitempty"`

	// Bapp Blocked apps for OpenRTB (comma-separated)
	Bapp *string `json:"bapp,omitempty"`

	// Bcat Blocked advertiser categories for OpenRTB (comma-separated)
	Bcat *string `json:"bcat,omitempty"`

	// Categories Array of IAB content categories describing the app
	Categories *[]string `json:"categories,omitempty"`

	// HumanName The human-readable name of the app
	HumanName *string `json:"human_name,omitempty"`

	// Id A positive integer ID
	Id *int `json:"id,omitempty"`

	// PackageName The package name of the app
	PackageName *string                      `json:"package_name,omitempty"`
	PlatformId  *UpdateAppJSONBodyPlatformId `json:"platform_id,omitempty"`
	PublicUid   *openapi_types.UUID          `json:"public_uid,omitempty"`

	// StoreId The unique identifier of the app in app stores (e.g., Apple App Store ID, Google Play Store ID)
	StoreId *string `json:"store_id,omitempty"`

	// StoreUrl Direct URL to the app's store page
	StoreUrl *string `json:"store_url,omitempty"`

	// UserId A positive integer ID
	UserId *int `json:"user_id,omitempty"`
}

// UpdateAppJSONBodyPlatformId defines parameters for UpdateApp.
type UpdateAppJSONBodyPlatformId string

// CreateAuctionConfigurationJSONBody defines parameters for CreateAuctionConfiguration.
type CreateAuctionConfigurationJSONBody struct {
	AdType CreateAuctionConfigurationJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name Name of the auction configuration
	Name string `json:"name"`

	// Pricefloor Price floor for the auction configuration
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// Rounds Auction rounds
	Rounds []struct {
		// Demands List of demands for the round
		Demands []string `json:"demands"`

		// Id Round ID
		Id string `json:"id"`

		// Timeout Timeout for the round in milliseconds
		Timeout int `json:"timeout"`
	} `json:"rounds"`
}

// CreateAuctionConfigurationJSONBodyAdType defines parameters for CreateAuctionConfiguration.
type CreateAuctionConfigurationJSONBodyAdType string

// UpdateAuctionConfigurationJSONBody defines parameters for UpdateAuctionConfiguration.
type UpdateAuctionConfigurationJSONBody struct {
	AdType UpdateAuctionConfigurationJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name Name of the auction configuration
	Name string `json:"name"`

	// Pricefloor Price floor for the auction configuration
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// Rounds Auction rounds
	Rounds []struct {
		// Demands List of demands for the round
		Demands []string `json:"demands"`

		// Id Round ID
		Id string `json:"id"`

		// Timeout Timeout for the round in milliseconds
		Timeout int `json:"timeout"`
	} `json:"rounds"`
}

// UpdateAuctionConfigurationJSONBodyAdType defines parameters for UpdateAuctionConfiguration.
type UpdateAuctionConfigurationJSONBodyAdType string

// GetAuctionConfigurationsCollectionParams defines parameters for GetAuctionConfigurationsCollection.
type GetAuctionConfigurationsCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// Name Filter by name
	Name *Name `form:"name,omitempty" json:"name,omitempty"`

	// IsDefault Filter by isDefault status
	IsDefault *IsDefault `form:"is_default,omitempty" json:"is_default,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateCountryJSONBody defines parameters for CreateCountry.
type CreateCountryJSONBody struct {
	// Alpha2Code The ISO 3166-1 alpha-2 code for the country
	Alpha2Code string `json:"alpha_2_code"`

	// Alpha3Code The ISO 3166-1 alpha-3 code for the country
	Alpha3Code string `json:"alpha_3_code"`

	// HumanName The human-readable name of the country
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// UpdateCountryJSONBody defines parameters for UpdateCountry.
type UpdateCountryJSONBody struct {
	// Alpha2Code The ISO 3166-1 alpha-2 code for the country
	Alpha2Code *string `json:"alpha_2_code,omitempty"`

	// Alpha3Code The ISO 3166-1 alpha-3 code for the country
	Alpha3Code *string `json:"alpha_3_code,omitempty"`

	// HumanName The human-readable name of the country
	HumanName *string `json:"human_name,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// CreateDemandSourceAccountJSONBody defines parameters for CreateDemandSourceAccount.
type CreateDemandSourceAccountJSONBody struct {
	// DemandSourceId A positive integer ID
	DemandSourceId int `json:"demand_source_id"`

	// Extra Additional information for the demand source account
	Extra map[string]interface{} `json:"extra"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsBidding Indicates whether bidding is enabled for this demand source account
	IsBidding bool                `json:"is_bidding"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`

	// Type The type of the demand source account
	Type string `json:"type"`

	// UserId A positive integer ID
	UserId int `json:"user_id"`
}

// UpdateDemandSourceAccountJSONBody defines parameters for UpdateDemandSourceAccount.
type UpdateDemandSourceAccountJSONBody struct {
	// DemandSourceId A positive integer ID
	DemandSourceId *int `json:"demand_source_id,omitempty"`

	// Extra Additional information for the demand source account
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsBidding Indicates whether bidding is enabled for this demand source account
	IsBidding *bool               `json:"is_bidding,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`

	// Type The type of the demand source account
	Type *string `json:"type,omitempty"`

	// UserId A positive integer ID
	UserId *int `json:"user_id,omitempty"`
}

// CreateDemandSourceJSONBody defines parameters for CreateDemandSource.
type CreateDemandSourceJSONBody struct {
	// ApiKey The API key associated with the demand source
	ApiKey string `json:"api_key"`

	// HumanName The human-readable name of the demand source
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateDemandSourceJSONBody defines parameters for UpdateDemandSource.
type UpdateDemandSourceJSONBody struct {
	// ApiKey The API key associated with the demand source
	ApiKey string `json:"api_key"`

	// HumanName The human-readable name of the demand source
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// AccountType Filter by account type
	AccountType *AccountType `form:"account_type,omitempty" json:"account_type,omitempty"`

	// IsBidding Filter by bidding status
	IsBidding *IsBidding `form:"is_bidding,omitempty" json:"is_bidding,omitempty"`
}

// CreateLineItemJSONBody defines parameters for CreateLineItem.
type CreateLineItemJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account
	AccountType string                       `json:"account_type"`
	AdType      CreateLineItemJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// BidFloor The minimum bid floor price
	BidFloor string `json:"bid_floor"`

	// Code The unique code for the line item
	Code  string                       `json:"code"`
	Extra CreateLineItemJSONBody_Extra `json:"extra"`

	// Format Format of the banner ad
	Format CreateLineItemJSONBodyFormat `json:"format"`

	// HumanName The human-readable name of the line item
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// CreateLineItemJSONBodyAdType defines parameters for CreateLineItem.
type CreateLineItemJSONBodyAdType string

// CreateLineItemJSONBodyExtra0 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra0 struct {
	// AdUnitId Ad unit ID (for Admob, Yandex)
	AdUnitId string `json:"ad_unit_id"`
}

// CreateLineItemJSONBodyExtra1 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra1 struct {
	// Format Ad format
	Format CreateLineItemJSONBodyExtra1Format `json:"format"`

	// SlotUuid Slot UUID (for Amazon)
	SlotUuid string `json:"slot_uuid"`
}

// CreateLineItemJSONBodyExtra1Format defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra1Format string

// CreateLineItemJSONBodyExtra2 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra2 struct {
	// ZoneId Zone ID (for Applovin)
	ZoneId string `json:"zone_id"`
}

// CreateLineItemJSONBodyExtra3 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra3 struct {
	// Placement Placement (for BidMachine)
	Placement *string `json:"placement,omitempty"`
}

// CreateLineItemJSONBodyExtra4 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra4 struct {
	// SlotId Slot ID (for BigoAds, VKAds)
	SlotId string `json:"slot_id"`
}

// CreateLineItemJSONBodyExtra5 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra5 struct {
	// AdLocation Ad location (for Chartboost)
	AdLocation string `json:"ad_location"`

	// Mediation Optional mediation parameter
	Mediation *string `json:"mediation,omitempty"`
}

// CreateLineItemJSONBodyExtra6 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra6 struct {
	// PlacementId Placement ID (for Meta, UnityAds, Vungle, MobileFuse, TaurusX)
	PlacementId string `json:"placement_id"`
}

// CreateLineItemJSONBodyExtra7 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra7 struct {
	// SpotId Spot ID (for DTExchange)
	SpotId string `json:"spot_id"`
}

// CreateLineItemJSONBodyExtra8 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra8 struct {
	// InstanceId Instance ID (for IronSource)
	InstanceId string `json:"instance_id"`
}

// CreateLineItemJSONBodyExtra9 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra9 struct {
	// PlacementId Placement ID (for Mintegral)
	PlacementId string `json:"placement_id"`

	// UnitId Unit ID (for Mintegral)
	UnitId string `json:"unit_id"`
}

// CreateLineItemJSONBodyExtra10 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra10 struct {
	// AdUnitId Ad Unit ID (for Moloco)
	AdUnitId string `json:"ad_unit_id"`
}

// CreateLineItemJSONBody_Extra defines parameters for CreateLineItem.
type CreateLineItemJSONBody_Extra struct {
	union json.RawMessage
}

// CreateLineItemJSONBodyFormat defines parameters for CreateLineItem.
type CreateLineItemJSONBodyFormat string

// ImportLineItemsMultipartBody defines parameters for ImportLineItems.
type ImportLineItemsMultipartBody struct {
	// AccountId The ID of the account associated with the line items.
	AccountId int64 `json:"account_id"`

	// AppId The ID of the app to which the line items belong.
	AppId int64 `json:"app_id"`

	// Csv The CSV file containing the line items to import.
	Csv openapi_types.File `json:"csv"`

	// IsBidding Indicates whether the line items are for bidding.
	IsBidding *bool `json:"is_bidding,omitempty"`
}

// UpdateLineItemJSONBody defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account
	AccountType string                       `json:"account_type"`
	AdType      UpdateLineItemJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// BidFloor The minimum bid floor price
	BidFloor string `json:"bid_floor"`

	// Code The unique code for the line item
	Code  string                        `json:"code"`
	Extra *UpdateLineItemJSONBody_Extra `json:"extra,omitempty"`

	// Format Format of the banner ad
	Format UpdateLineItemJSONBodyFormat `json:"format"`

	// HumanName The human-readable name of the line item
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateLineItemJSONBodyAdType defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyAdType string

// UpdateLineItemJSONBodyExtra0 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra0 struct {
	// AdUnitId Ad unit ID (for Admob, Yandex)
	AdUnitId string `json:"ad_unit_id"`
}

// UpdateLineItemJSONBodyExtra1 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra1 struct {
	// Format Ad format
	Format UpdateLineItemJSONBodyExtra1Format `json:"format"`

	// SlotUuid Slot UUID (for Amazon)
	SlotUuid string `json:"slot_uuid"`
}

// UpdateLineItemJSONBodyExtra1Format defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra1Format string

// UpdateLineItemJSONBodyExtra2 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra2 struct {
	// ZoneId Zone ID (for Applovin)
	ZoneId string `json:"zone_id"`
}

// UpdateLineItemJSONBodyExtra3 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra3 struct {
	// Placement Placement (for BidMachine)
	Placement *string `json:"placement,omitempty"`
}

// UpdateLineItemJSONBodyExtra4 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra4 struct {
	// SlotId Slot ID (for BigoAds, VKAds)
	SlotId string `json:"slot_id"`
}

// UpdateLineItemJSONBodyExtra5 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra5 struct {
	// AdLocation Ad location (for Chartboost)
	AdLocation string `json:"ad_location"`

	// Mediation Optional mediation parameter
	Mediation *string `json:"mediation,omitempty"`
}

// UpdateLineItemJSONBodyExtra6 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra6 struct {
	// PlacementId Placement ID (for Meta, UnityAds, Vungle, MobileFuse, TaurusX)
	PlacementId string `json:"placement_id"`
}

// UpdateLineItemJSONBodyExtra7 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra7 struct {
	// SpotId Spot ID (for DTExchange)
	SpotId string `json:"spot_id"`
}

// UpdateLineItemJSONBodyExtra8 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra8 struct {
	// InstanceId Instance ID (for IronSource)
	InstanceId string `json:"instance_id"`
}

// UpdateLineItemJSONBodyExtra9 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra9 struct {
	// PlacementId Placement ID (for Mintegral)
	PlacementId string `json:"placement_id"`

	// UnitId Unit ID (for Mintegral)
	UnitId string `json:"unit_id"`
}

// UpdateLineItemJSONBodyExtra10 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra10 struct {
	// AdUnitId Ad Unit ID (for Moloco)
	AdUnitId string `json:"ad_unit_id"`
}

// UpdateLineItemJSONBody_Extra defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody_Extra struct {
	union json.RawMessage
}

// UpdateLineItemJSONBodyFormat defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyFormat string

// GetLineItemsCollectionParams defines parameters for GetLineItemsCollection.
type GetLineItemsCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// AccountType Filter by account type
	AccountType *AccountType `form:"account_type,omitempty" json:"account_type,omitempty"`

	// IsBidding Filter by bidding status
	IsBidding *IsBidding `form:"is_bidding,omitempty" json:"is_bidding,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateSegmentJSONBody defines parameters for CreateSegment.
type CreateSegmentJSONBody struct {
	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Description The description of the segment
	Description string `json:"description"`

	// Enabled Indicates if the segment is enabled
	Enabled bool `json:"enabled"`

	// Filters Filters applied to the segment
	Filters []struct {
		// Name The name of the filter
		Name string `json:"name"`

		// Operator The operator used in the filter
		Operator string `json:"operator"`

		// Type The type of filter
		Type   string   `json:"type"`
		Values []string `json:"values"`
	} `json:"filters"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name The name of the segment
	Name      string              `json:"name"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateSegmentJSONBody defines parameters for UpdateSegment.
type UpdateSegmentJSONBody struct {
	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Description The description of the segment
	Description string `json:"description"`

	// Enabled Indicates if the segment is enabled
	Enabled bool `json:"enabled"`

	// Filters Filters applied to the segment
	Filters []struct {
		// Name The name of the filter
		Name string `json:"name"`

		// Operator The operator used in the filter
		Operator string `json:"operator"`

		// Type The type of filter
		Type   string   `json:"type"`
		Values []string `json:"values"`
	} `json:"filters"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name The name of the segment
	Name      string              `json:"name"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Email openapi_types.Email `json:"email"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// CreateAuctionConfigurationV2JSONBody defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBody struct {
	AdType CreateAuctionConfigurationV2JSONBodyAdType `json:"ad_type"`

	// AdUnitIds List of ad unit IDs
	AdUnitIds *[]int `json:"ad_unit_ids,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Bidding List of bidding sources
	Bidding *[]CreateAuctionConfigurationV2JSONBodyBidding `json:"bidding,omitempty"`

	// Demands List of demand sources
	Demands *[]CreateAuctionConfigurationV2JSONBodyDemands `json:"demands,omitempty"`

	// ExternalWinNotifications Whether external win notifications are enabled
	ExternalWinNotifications *bool `json:"external_win_notifications,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsDefault Indicates if this is the default configuration
	IsDefault  *bool               `json:"is_default,omitempty"`
	Name       string              `json:"name"`
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// SegmentId A positive integer ID
	SegmentId *int `json:"segment_id,omitempty"`

	// Settings A map of configuration settings
	Settings *map[string]interface{} `json:"settings,omitempty"`

	// Timeout Timeout value in milliseconds
	Timeout *int32 `json:"timeout,omitempty"`
}

// CreateAuctionConfigurationV2JSONBodyAdType defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyAdType string

// CreateAuctionConfigurationV2JSONBodyBidding defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyBidding string

// CreateAuctionConfigurationV2JSONBodyDemands defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyDemands string

// UpdateAuctionConfigurationV2JSONBody defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBody struct {
	AdType *UpdateAuctionConfigurationV2JSONBodyAdType `json:"ad_type,omitempty"`

	// AdUnitIds List of ad unit IDs
	AdUnitIds *[]int `json:"ad_unit_ids,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Bidding List of bidding sources
	Bidding *[]UpdateAuctionConfigurationV2JSONBodyBidding `json:"bidding,omitempty"`

	// Demands List of demand sources
	Demands *[]UpdateAuctionConfigurationV2JSONBodyDemands `json:"demands,omitempty"`

	// ExternalWinNotifications Whether external win notifications are enabled
	ExternalWinNotifications *bool `json:"external_win_notifications,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsDefault Indicates if this is the default configuration
	IsDefault  *bool               `json:"is_default,omitempty"`
	Name       *string             `json:"name,omitempty"`
	Pricefloor *float32            `json:"pricefloor,omitempty"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// SegmentId A positive integer ID
	SegmentId *int `json:"segment_id,omitempty"`

	// Settings A map of configuration settings
	Settings *map[string]interface{} `json:"settings,omitempty"`

	// Timeout Timeout value in milliseconds
	Timeout *int32 `json:"timeout,omitempty"`
}

// UpdateAuctionConfigurationV2JSONBodyAdType defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyAdType string

// UpdateAuctionConfigurationV2JSONBodyBidding defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyBidding string

// UpdateAuctionConfigurationV2JSONBodyDemands defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyDemands string

// GetAuctionConfigurationsCollectionV2Params defines parameters for GetAuctionConfigurationsCollectionV2.
type GetAuctionConfigurationsCollectionV2Params struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// Name Filter by name
	Name *Name `form:"name,omitempty" json:"name,omitempty"`

	// IsDefault Filter by isDefault status
	IsDefault *IsDefault `form:"is_default,omitempty" json:"is_default,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// AuthorizeUserJSONBody defines parameters for AuthorizeUser.
type AuthorizeUserJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// LogInJSONBody defines parameters for LogIn.
type LogInJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// CreateAppDemandProfileJSONRequestBody defines body for CreateAppDemandProfile for application/json ContentType.
type CreateAppDemandProfileJSONRequestBody CreateAppDemandProfileJSONBody

// UpdateAppDemandProfileJSONRequestBody defines body for UpdateAppDemandProfile for application/json ContentType.
type UpdateAppDemandProfileJSONRequestBody UpdateAppDemandProfileJSONBody

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody CreateAppJSONBody

// UpdateAppJSONRequestBody defines body for UpdateApp for application/json ContentType.
type UpdateAppJSONRequestBody UpdateAppJSONBody

// CreateAuctionConfigurationJSONRequestBody defines body for CreateAuctionConfiguration for application/json ContentType.
type CreateAuctionConfigurationJSONRequestBody CreateAuctionConfigurationJSONBody

// UpdateAuctionConfigurationJSONRequestBody defines body for UpdateAuctionConfiguration for application/json ContentType.
type UpdateAuctionConfigurationJSONRequestBody UpdateAuctionConfigurationJSONBody

// CreateCountryJSONRequestBody defines body for CreateCountry for application/json ContentType.
type CreateCountryJSONRequestBody CreateCountryJSONBody

// UpdateCountryJSONRequestBody defines body for UpdateCountry for application/json ContentType.
type UpdateCountryJSONRequestBody UpdateCountryJSONBody

// CreateDemandSourceAccountJSONRequestBody defines body for CreateDemandSourceAccount for application/json ContentType.
type CreateDemandSourceAccountJSONRequestBody CreateDemandSourceAccountJSONBody

// UpdateDemandSourceAccountJSONRequestBody defines body for UpdateDemandSourceAccount for application/json ContentType.
type UpdateDemandSourceAccountJSONRequestBody UpdateDemandSourceAccountJSONBody

// CreateDemandSourceJSONRequestBody defines body for CreateDemandSource for application/json ContentType.
type CreateDemandSourceJSONRequestBody CreateDemandSourceJSONBody

// UpdateDemandSourceJSONRequestBody defines body for UpdateDemandSource for application/json ContentType.
type UpdateDemandSourceJSONRequestBody UpdateDemandSourceJSONBody

// CreateLineItemJSONRequestBody defines body for CreateLineItem for application/json ContentType.
type CreateLineItemJSONRequestBody CreateLineItemJSONBody

// ImportLineItemsMultipartRequestBody defines body for ImportLineItems for multipart/form-data ContentType.
type ImportLineItemsMultipartRequestBody ImportLineItemsMultipartBody

// UpdateLineItemJSONRequestBody defines body for UpdateLineItem for application/json ContentType.
type UpdateLineItemJSONRequestBody UpdateLineItemJSONBody

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody CreateSegmentJSONBody

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody UpdateSegmentJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// CreateAuctionConfigurationV2JSONRequestBody defines body for CreateAuctionConfigurationV2 for application/json ContentType.
type CreateAuctionConfigurationV2JSONRequestBody CreateAuctionConfigurationV2JSONBody

// UpdateAuctionConfigurationV2JSONRequestBody defines body for UpdateAuctionConfigurationV2 for application/json ContentType.
type UpdateAuctionConfigurationV2JSONRequestBody UpdateAuctionConfigurationV2JSONBody

// AuthorizeUserJSONRequestBody defines body for AuthorizeUser for application/json ContentType.
type AuthorizeUserJSONRequestBody AuthorizeUserJSONBody

// LogInJSONRequestBody defines body for LogIn for application/json ContentType.
type LogInJSONRequestBody LogInJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List API keys
	// (GET /api/api_keys)
	GetApiKeys(ctx echo.Context) error
	// Create API key
	// (POST /api/api_keys)
	CreateApiKey(ctx echo.Context) error
	// Delete API key
	// (DELETE /api/api_keys/{uuid})
	DeleteApiKey(ctx echo.Context, uuid openapi_types.UUID) error
	// Get API key
	// (GET /api/api_keys/{uuid})
	GetApiKey(ctx echo.Context, uuid openapi_types.UUID) error
	// List app demand profiles
	// (GET /api/app_demand_profiles)
	GetAppDemandProfiles(ctx echo.Context) error
	// Create app demand profile
	// (POST /api/app_demand_profiles)
	CreateAppDemandProfile(ctx echo.Context) error
	// Delete app demand profile
	// (DELETE /api/app_demand_profiles/{id})
	DeleteAppDemandProfile(ctx echo.Context, id IdParam) error
	// Get app demand profile
	// (GET /api/app_demand_profiles/{id})
	GetAppDemandProfile(ctx echo.Context, id IdParam) error
	// Update app demand profile
	// (PATCH /api/app_demand_profiles/{id})
	UpdateAppDemandProfile(ctx echo.Context, id IdParam) error
	// List app demand profiles
	// (GET /api/app_demand_profiles_collection)
	GetAppDemandProfilesCollection(ctx echo.Context, params GetAppDemandProfilesCollectionParams) error
	// List apps
	// (GET /api/apps)
	GetApps(ctx echo.Context) error
	// Create app
	// (POST /api/apps)
	CreateApp(ctx echo.Context) error
	// Delete app
	// (DELETE /api/apps/{id})
	DeleteApp(ctx echo.Context, id IdParam) error
	// Get app
	// (GET /api/apps/{id})
	GetApp(ctx echo.Context, id IdParam) error
	// Update app
	// (PATCH /api/apps/{id})
	UpdateApp(ctx echo.Context, id IdParam) error
	// List auction configurations
	// (GET /api/auction_configurations)
	GetAuctionConfigurations(ctx echo.Context) error
	// Create auction configuration
	// (POST /api/auction_configurations)
	CreateAuctionConfiguration(ctx echo.Context) error
	// Delete auction configuration
	// (DELETE /api/auction_configurations/{id})
	DeleteAuctionConfiguration(ctx echo.Context, id IdParam) error
	// Get auction configuration
	// (GET /api/auction_configurations/{id})
	GetAuctionConfiguration(ctx echo.Context, id IdParam) error
	// Update auction configuration
	// (PATCH /api/auction_configurations/{id})
	UpdateAuctionConfiguration(ctx echo.Context, id IdParam) error
	// List auction configurations
	// (GET /api/auction_configurations_collection)
	GetAuctionConfigurationsCollection(ctx echo.Context, params GetAuctionConfigurationsCollectionParams) error
	// List countries
	// (GET /api/countries)
	GetCountries(ctx echo.Context) error
	// Create country
	// (POST /api/countries)
	CreateCountry(ctx echo.Context) error
	// Delete country
	// (DELETE /api/countries/{id})
	DeleteCountry(ctx echo.Context, id IdParam) error
	// Get country
	// (GET /api/countries/{id})
	GetCountry(ctx echo.Context, id IdParam) error
	// Update country
	// (PATCH /api/countries/{id})
	UpdateCountry(ctx echo.Context, id IdParam) error
	// List demand source accounts
	// (GET /api/demand_source_accounts)
	GetDemandSourceAccounts(ctx echo.Context) error
	// Create demand source account
	// (POST /api/demand_source_accounts)
	CreateDemandSourceAccount(ctx echo.Context) error
	// Delete demand source account
	// (DELETE /api/demand_source_accounts/{id})
	DeleteDemandSourceAccount(ctx echo.Context, id IdParam) error
	// Get demand source account
	// (GET /api/demand_source_accounts/{id})
	GetDemandSourceAccount(ctx echo.Context, id IdParam) error
	// Update demand source account
	// (PATCH /api/demand_source_accounts/{id})
	UpdateDemandSourceAccount(ctx echo.Context, id IdParam) error
	// List demand sources
	// (GET /api/demand_sources)
	GetDemandSources(ctx echo.Context) error
	// Create demand source
	// (POST /api/demand_sources)
	CreateDemandSource(ctx echo.Context) error
	// Delete demand source
	// (DELETE /api/demand_sources/{id})
	DeleteDemandSource(ctx echo.Context, id IdParam) error
	// Get demand source
	// (GET /api/demand_sources/{id})
	GetDemandSource(ctx echo.Context, id IdParam) error
	// Update demand source
	// (PATCH /api/demand_sources/{id})
	UpdateDemandSource(ctx echo.Context, id IdParam) error
	// List line items
	// (GET /api/line_items)
	GetLineItems(ctx echo.Context, params GetLineItemsParams) error
	// Create line item
	// (POST /api/line_items)
	CreateLineItem(ctx echo.Context) error
	// Import Line Items from CSV
	// (POST /api/line_items/import)
	ImportLineItems(ctx echo.Context) error
	// Delete line item
	// (DELETE /api/line_items/{id})
	DeleteLineItem(ctx echo.Context, id IdParam) error
	// Get line item
	// (GET /api/line_items/{id})
	GetLineItem(ctx echo.Context, id IdParam) error
	// Update line item
	// (PATCH /api/line_items/{id})
	UpdateLineItem(ctx echo.Context, id IdParam) error
	// List line items
	// (GET /api/line_items_collection)
	GetLineItemsCollection(ctx echo.Context, params GetLineItemsCollectionParams) error
	// Get OpenAPI specification
	// (GET /api/openapi.json)
	GetOpenAPISpec(ctx echo.Context) error
	// List resources permissions
	// (GET /api/rest/resources)
	GetResources(ctx echo.Context) error
	// List segments
	// (GET /api/segments)
	GetSegments(ctx echo.Context) error
	// Create segment
	// (POST /api/segments)
	CreateSegment(ctx echo.Context) error
	// Delete segment
	// (DELETE /api/segments/{id})
	DeleteSegment(ctx echo.Context, id IdParam) error
	// Get segment
	// (GET /api/segments/{id})
	GetSegment(ctx echo.Context, id IdParam) error
	// Update segment
	// (PATCH /api/segments/{id})
	UpdateSegment(ctx echo.Context, id IdParam) error
	// Update current user password
	// (PATCH /api/settings/password)
	UpdatePassword(ctx echo.Context) error
	// List users
	// (GET /api/users)
	GetUsers(ctx echo.Context) error
	// Create user
	// (POST /api/users)
	CreateUser(ctx echo.Context) error
	// Get current user
	// (GET /api/users/me)
	GetCurrentUser(ctx echo.Context) error
	// Delete user
	// (DELETE /api/users/{id})
	DeleteUser(ctx echo.Context, id IdParam) error
	// Get user
	// (GET /api/users/{id})
	GetUser(ctx echo.Context, id IdParam) error
	// Update user
	// (PATCH /api/users/{id})
	UpdateUser(ctx echo.Context, id IdParam) error
	// List auction configurations V2
	// (GET /api/v2/auction_configurations)
	GetAuctionConfigurationsV2(ctx echo.Context) error
	// Create auction configuration V2
	// (POST /api/v2/auction_configurations)
	CreateAuctionConfigurationV2(ctx echo.Context) error
	// Delete auction configuration
	// (DELETE /api/v2/auction_configurations/{id})
	DeleteAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// Get auction configuration V2
	// (GET /api/v2/auction_configurations/{id})
	GetAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// Update auction configuration V2
	// (PATCH /api/v2/auction_configurations/{id})
	UpdateAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// List auction configurations V2
	// (GET /api/v2/auction_configurations_collection)
	GetAuctionConfigurationsCollectionV2(ctx echo.Context, params GetAuctionConfigurationsCollectionV2Params) error
	// Issue access token
	// (POST /auth/authorize)
	AuthorizeUser(ctx echo.Context) error
	// User login
	// (POST /auth/login)
	LogIn(ctx echo.Context) error
	// User logout
	// (POST /auth/logout)
	LogOut(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiKeys(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiKeys(ctx)
	return err
}

// CreateApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiKey(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApiKey(ctx)
	return err
}

// DeleteApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiKey(ctx, uuid)
	return err
}

// GetApiKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiKey(ctx, uuid)
	return err
}

// GetAppDemandProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfiles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfiles(ctx)
	return err
}

// CreateAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAppDemandProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAppDemandProfile(ctx)
	return err
}

// DeleteAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAppDemandProfile(ctx, id)
	return err
}

// GetAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfile(ctx, id)
	return err
}

// UpdateAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAppDemandProfile(ctx, id)
	return err
}

// GetAppDemandProfilesCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfilesCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAppDemandProfilesCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "demand_source_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "demand_source_id", ctx.QueryParams(), &params.DemandSourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter demand_source_id: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfilesCollection(ctx, params)
	return err
}

// GetApps converts echo context to params.
func (w *ServerInterfaceWrapper) GetApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApps(ctx)
	return err
}

// CreateApp converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApp(ctx)
	return err
}

// DeleteApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApp(ctx, id)
	return err
}

// GetApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApp(ctx, id)
	return err
}

// UpdateApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateApp(ctx, id)
	return err
}

// GetAuctionConfigurations converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurations(ctx)
	return err
}

// CreateAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuctionConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAuctionConfiguration(ctx)
	return err
}

// DeleteAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAuctionConfiguration(ctx, id)
	return err
}

// GetAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfiguration(ctx, id)
	return err
}

// UpdateAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAuctionConfiguration(ctx, id)
	return err
}

// GetAuctionConfigurationsCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionConfigurationsCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "is_default" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_default", ctx.QueryParams(), &params.IsDefault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_default: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsCollection(ctx, params)
	return err
}

// GetCountries converts echo context to params.
func (w *ServerInterfaceWrapper) GetCountries(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCountries(ctx)
	return err
}

// CreateCountry converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCountry(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCountry(ctx)
	return err
}

// DeleteCountry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCountry(ctx, id)
	return err
}

// GetCountry converts echo context to params.
func (w *ServerInterfaceWrapper) GetCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCountry(ctx, id)
	return err
}

// UpdateCountry converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCountry(ctx, id)
	return err
}

// GetDemandSourceAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSourceAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSourceAccounts(ctx)
	return err
}

// CreateDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDemandSourceAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDemandSourceAccount(ctx)
	return err
}

// DeleteDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDemandSourceAccount(ctx, id)
	return err
}

// GetDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSourceAccount(ctx, id)
	return err
}

// UpdateDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDemandSourceAccount(ctx, id)
	return err
}

// GetDemandSources converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSources(ctx)
	return err
}

// CreateDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDemandSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDemandSource(ctx)
	return err
}

// DeleteDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDemandSource(ctx, id)
	return err
}

// GetDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSource(ctx, id)
	return err
}

// UpdateDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDemandSource(ctx, id)
	return err
}

// GetLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "account_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type", ctx.QueryParams(), &params.AccountType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type: %s", err))
	}

	// ------------- Optional query parameter "is_bidding" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_bidding", ctx.QueryParams(), &params.IsBidding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_bidding: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItems(ctx, params)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLineItem(ctx)
	return err
}

// ImportLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) ImportLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImportLineItems(ctx)
	return err
}

// DeleteLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLineItem(ctx, id)
	return err
}

// GetLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItem(ctx, id)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLineItem(ctx, id)
	return err
}

// GetLineItemsCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemsCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "account_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type", ctx.QueryParams(), &params.AccountType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type: %s", err))
	}

	// ------------- Optional query parameter "is_bidding" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_bidding", ctx.QueryParams(), &params.IsBidding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_bidding: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItemsCollection(ctx, params)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx)
	return err
}

// GetSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegments(ctx)
	return err
}

// CreateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSegment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSegment(ctx)
	return err
}

// DeleteSegment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSegment(ctx, id)
	return err
}

// GetSegment converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegment(ctx, id)
	return err
}

// UpdateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSegment(ctx, id)
	return err
}

// UpdatePassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePassword(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// GetAuctionConfigurationsV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsV2(ctx)
	return err
}

// CreateAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuctionConfigurationV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAuctionConfigurationV2(ctx)
	return err
}

// DeleteAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAuctionConfigurationV2(ctx, id)
	return err
}

// GetAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationV2(ctx, id)
	return err
}

// UpdateAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAuctionConfigurationV2(ctx, id)
	return err
}

// GetAuctionConfigurationsCollectionV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsCollectionV2(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionConfigurationsCollectionV2Params
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "is_default" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_default", ctx.QueryParams(), &params.IsDefault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_default: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsCollectionV2(ctx, params)
	return err
}

// AuthorizeUser converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeUser(ctx)
	return err
}

// LogIn converts echo context to params.
func (w *ServerInterfaceWrapper) LogIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogIn(ctx)
	return err
}

// LogOut converts echo context to params.
func (w *ServerInterfaceWrapper) LogOut(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogOut(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/api_keys", wrapper.GetApiKeys)
	router.POST(baseURL+"/api/api_keys", wrapper.CreateApiKey)
	router.DELETE(baseURL+"/api/api_keys/:uuid", wrapper.DeleteApiKey)
	router.GET(baseURL+"/api/api_keys/:uuid", wrapper.GetApiKey)
	router.GET(baseURL+"/api/app_demand_profiles", wrapper.GetAppDemandProfiles)
	router.POST(baseURL+"/api/app_demand_profiles", wrapper.CreateAppDemandProfile)
	router.DELETE(baseURL+"/api/app_demand_profiles/:id", wrapper.DeleteAppDemandProfile)
	router.GET(baseURL+"/api/app_demand_profiles/:id", wrapper.GetAppDemandProfile)
	router.PATCH(baseURL+"/api/app_demand_profiles/:id", wrapper.UpdateAppDemandProfile)
	router.GET(baseURL+"/api/app_demand_profiles_collection", wrapper.GetAppDemandProfilesCollection)
	router.GET(baseURL+"/api/apps", wrapper.GetApps)
	router.POST(baseURL+"/api/apps", wrapper.CreateApp)
	router.DELETE(baseURL+"/api/apps/:id", wrapper.DeleteApp)
	router.GET(baseURL+"/api/apps/:id", wrapper.GetApp)
	router.PATCH(baseURL+"/api/apps/:id", wrapper.UpdateApp)
	router.GET(baseURL+"/api/auction_configurations", wrapper.GetAuctionConfigurations)
	router.POST(baseURL+"/api/auction_configurations", wrapper.CreateAuctionConfiguration)
	router.DELETE(baseURL+"/api/auction_configurations/:id", wrapper.DeleteAuctionConfiguration)
	router.GET(baseURL+"/api/auction_configurations/:id", wrapper.GetAuctionConfiguration)
	router.PATCH(baseURL+"/api/auction_configurations/:id", wrapper.UpdateAuctionConfiguration)
	router.GET(baseURL+"/api/auction_configurations_collection", wrapper.GetAuctionConfigurationsCollection)
	router.GET(baseURL+"/api/countries", wrapper.GetCountries)
	router.POST(baseURL+"/api/countries", wrapper.CreateCountry)
	router.DELETE(baseURL+"/api/countries/:id", wrapper.DeleteCountry)
	router.GET(baseURL+"/api/countries/:id", wrapper.GetCountry)
	router.PATCH(baseURL+"/api/countries/:id", wrapper.UpdateCountry)
	router.GET(baseURL+"/api/demand_source_accounts", wrapper.GetDemandSourceAccounts)
	router.POST(baseURL+"/api/demand_source_accounts", wrapper.CreateDemandSourceAccount)
	router.DELETE(baseURL+"/api/demand_source_accounts/:id", wrapper.DeleteDemandSourceAccount)
	router.GET(baseURL+"/api/demand_source_accounts/:id", wrapper.GetDemandSourceAccount)
	router.PATCH(baseURL+"/api/demand_source_accounts/:id", wrapper.UpdateDemandSourceAccount)
	router.GET(baseURL+"/api/demand_sources", wrapper.GetDemandSources)
	router.POST(baseURL+"/api/demand_sources", wrapper.CreateDemandSource)
	router.DELETE(baseURL+"/api/demand_sources/:id", wrapper.DeleteDemandSource)
	router.GET(baseURL+"/api/demand_sources/:id", wrapper.GetDemandSource)
	router.PATCH(baseURL+"/api/demand_sources/:id", wrapper.UpdateDemandSource)
	router.GET(baseURL+"/api/line_items", wrapper.GetLineItems)
	router.POST(baseURL+"/api/line_items", wrapper.CreateLineItem)
	router.POST(baseURL+"/api/line_items/import", wrapper.ImportLineItems)
	router.DELETE(baseURL+"/api/line_items/:id", wrapper.DeleteLineItem)
	router.GET(baseURL+"/api/line_items/:id", wrapper.GetLineItem)
	router.PATCH(baseURL+"/api/line_items/:id", wrapper.UpdateLineItem)
	router.GET(baseURL+"/api/line_items_collection", wrapper.GetLineItemsCollection)
	router.GET(baseURL+"/api/openapi.json", wrapper.GetOpenAPISpec)
	router.GET(baseURL+"/api/rest/resources", wrapper.GetResources)
	router.GET(baseURL+"/api/segments", wrapper.GetSegments)
	router.POST(baseURL+"/api/segments", wrapper.CreateSegment)
	router.DELETE(baseURL+"/api/segments/:id", wrapper.DeleteSegment)
	router.GET(baseURL+"/api/segments/:id", wrapper.GetSegment)
	router.PATCH(baseURL+"/api/segments/:id", wrapper.UpdateSegment)
	router.PATCH(baseURL+"/api/settings/password", wrapper.UpdatePassword)
	router.GET(baseURL+"/api/users", wrapper.GetUsers)
	router.POST(baseURL+"/api/users", wrapper.CreateUser)
	router.GET(baseURL+"/api/users/me", wrapper.GetCurrentUser)
	router.DELETE(baseURL+"/api/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/api/users/:id", wrapper.GetUser)
	router.PATCH(baseURL+"/api/users/:id", wrapper.UpdateUser)
	router.GET(baseURL+"/api/v2/auction_configurations", wrapper.GetAuctionConfigurationsV2)
	router.POST(baseURL+"/api/v2/auction_configurations", wrapper.CreateAuctionConfigurationV2)
	router.DELETE(baseURL+"/api/v2/auction_configurations/:id", wrapper.DeleteAuctionConfigurationV2)
	router.GET(baseURL+"/api/v2/auction_configurations/:id", wrapper.GetAuctionConfigurationV2)
	router.PATCH(baseURL+"/api/v2/auction_configurations/:id", wrapper.UpdateAuctionConfigurationV2)
	router.GET(baseURL+"/api/v2/auction_configurations_collection", wrapper.GetAuctionConfigurationsCollectionV2)
	router.POST(baseURL+"/auth/authorize", wrapper.AuthorizeUser)
	router.POST(baseURL+"/auth/login", wrapper.LogIn)
	router.POST(baseURL+"/auth/logout", wrapper.LogOut)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
