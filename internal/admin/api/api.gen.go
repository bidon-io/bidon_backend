// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for CreateAppJSONBodyPlatformId.
const (
	CreateAppJSONBodyPlatformIdAndroid CreateAppJSONBodyPlatformId = "android"
	CreateAppJSONBodyPlatformIdIos     CreateAppJSONBodyPlatformId = "ios"
)

// Defines values for UpdateAppJSONBodyPlatformId.
const (
	UpdateAppJSONBodyPlatformIdAndroid UpdateAppJSONBodyPlatformId = "android"
	UpdateAppJSONBodyPlatformIdIos     UpdateAppJSONBodyPlatformId = "ios"
)

// Defines values for CreateAuctionConfigurationJSONBodyAdType.
const (
	CreateAuctionConfigurationJSONBodyAdTypeBanner       CreateAuctionConfigurationJSONBodyAdType = "banner"
	CreateAuctionConfigurationJSONBodyAdTypeInterstitial CreateAuctionConfigurationJSONBodyAdType = "interstitial"
	CreateAuctionConfigurationJSONBodyAdTypeRewarded     CreateAuctionConfigurationJSONBodyAdType = "rewarded"
)

// Defines values for UpdateAuctionConfigurationJSONBodyAdType.
const (
	UpdateAuctionConfigurationJSONBodyAdTypeBanner       UpdateAuctionConfigurationJSONBodyAdType = "banner"
	UpdateAuctionConfigurationJSONBodyAdTypeInterstitial UpdateAuctionConfigurationJSONBodyAdType = "interstitial"
	UpdateAuctionConfigurationJSONBodyAdTypeRewarded     UpdateAuctionConfigurationJSONBodyAdType = "rewarded"
)

// Defines values for CreateLineItemJSONBodyAdType.
const (
	CreateLineItemJSONBodyAdTypeBanner       CreateLineItemJSONBodyAdType = "banner"
	CreateLineItemJSONBodyAdTypeInterstitial CreateLineItemJSONBodyAdType = "interstitial"
	CreateLineItemJSONBodyAdTypeRewarded     CreateLineItemJSONBodyAdType = "rewarded"
)

// Defines values for CreateLineItemJSONBodyExtra1Format.
const (
	CreateLineItemJSONBodyExtra1FormatBANNER       CreateLineItemJSONBodyExtra1Format = "BANNER"
	CreateLineItemJSONBodyExtra1FormatINTERSTITIAL CreateLineItemJSONBodyExtra1Format = "INTERSTITIAL"
	CreateLineItemJSONBodyExtra1FormatMREC         CreateLineItemJSONBodyExtra1Format = "MREC"
	CreateLineItemJSONBodyExtra1FormatREWARDED     CreateLineItemJSONBodyExtra1Format = "REWARDED"
	CreateLineItemJSONBodyExtra1FormatVIDEO        CreateLineItemJSONBodyExtra1Format = "VIDEO"
)

// Defines values for CreateLineItemJSONBodyFormat.
const (
	CreateLineItemJSONBodyFormatADAPTIVE    CreateLineItemJSONBodyFormat = "ADAPTIVE"
	CreateLineItemJSONBodyFormatBANNER      CreateLineItemJSONBodyFormat = "BANNER"
	CreateLineItemJSONBodyFormatLEADERBOARD CreateLineItemJSONBodyFormat = "LEADERBOARD"
	CreateLineItemJSONBodyFormatMREC        CreateLineItemJSONBodyFormat = "MREC"
)

// Defines values for UpdateLineItemJSONBodyAdType.
const (
	UpdateLineItemJSONBodyAdTypeBanner       UpdateLineItemJSONBodyAdType = "banner"
	UpdateLineItemJSONBodyAdTypeInterstitial UpdateLineItemJSONBodyAdType = "interstitial"
	UpdateLineItemJSONBodyAdTypeRewarded     UpdateLineItemJSONBodyAdType = "rewarded"
)

// Defines values for UpdateLineItemJSONBodyExtra1Format.
const (
	UpdateLineItemJSONBodyExtra1FormatBANNER       UpdateLineItemJSONBodyExtra1Format = "BANNER"
	UpdateLineItemJSONBodyExtra1FormatINTERSTITIAL UpdateLineItemJSONBodyExtra1Format = "INTERSTITIAL"
	UpdateLineItemJSONBodyExtra1FormatMREC         UpdateLineItemJSONBodyExtra1Format = "MREC"
	UpdateLineItemJSONBodyExtra1FormatREWARDED     UpdateLineItemJSONBodyExtra1Format = "REWARDED"
	UpdateLineItemJSONBodyExtra1FormatVIDEO        UpdateLineItemJSONBodyExtra1Format = "VIDEO"
)

// Defines values for UpdateLineItemJSONBodyFormat.
const (
	UpdateLineItemJSONBodyFormatADAPTIVE    UpdateLineItemJSONBodyFormat = "ADAPTIVE"
	UpdateLineItemJSONBodyFormatBANNER      UpdateLineItemJSONBodyFormat = "BANNER"
	UpdateLineItemJSONBodyFormatLEADERBOARD UpdateLineItemJSONBodyFormat = "LEADERBOARD"
	UpdateLineItemJSONBodyFormatMREC        UpdateLineItemJSONBodyFormat = "MREC"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyAdType.
const (
	CreateAuctionConfigurationV2JSONBodyAdTypeBanner       CreateAuctionConfigurationV2JSONBodyAdType = "banner"
	CreateAuctionConfigurationV2JSONBodyAdTypeInterstitial CreateAuctionConfigurationV2JSONBodyAdType = "interstitial"
	CreateAuctionConfigurationV2JSONBodyAdTypeRewarded     CreateAuctionConfigurationV2JSONBodyAdType = "rewarded"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyBidding.
const (
	CreateAuctionConfigurationV2JSONBodyBiddingAdmob      CreateAuctionConfigurationV2JSONBodyBidding = "admob"
	CreateAuctionConfigurationV2JSONBodyBiddingAmazon     CreateAuctionConfigurationV2JSONBodyBidding = "amazon"
	CreateAuctionConfigurationV2JSONBodyBiddingApplovin   CreateAuctionConfigurationV2JSONBodyBidding = "applovin"
	CreateAuctionConfigurationV2JSONBodyBiddingBidmachine CreateAuctionConfigurationV2JSONBodyBidding = "bidmachine"
	CreateAuctionConfigurationV2JSONBodyBiddingBigoads    CreateAuctionConfigurationV2JSONBodyBidding = "bigoads"
	CreateAuctionConfigurationV2JSONBodyBiddingChartboost CreateAuctionConfigurationV2JSONBodyBidding = "chartboost"
	CreateAuctionConfigurationV2JSONBodyBiddingDtexchange CreateAuctionConfigurationV2JSONBodyBidding = "dtexchange"
	CreateAuctionConfigurationV2JSONBodyBiddingGam        CreateAuctionConfigurationV2JSONBodyBidding = "gam"
	CreateAuctionConfigurationV2JSONBodyBiddingInmobi     CreateAuctionConfigurationV2JSONBodyBidding = "inmobi"
	CreateAuctionConfigurationV2JSONBodyBiddingIronsource CreateAuctionConfigurationV2JSONBodyBidding = "ironsource"
	CreateAuctionConfigurationV2JSONBodyBiddingMeta       CreateAuctionConfigurationV2JSONBodyBidding = "meta"
	CreateAuctionConfigurationV2JSONBodyBiddingMintegral  CreateAuctionConfigurationV2JSONBodyBidding = "mintegral"
	CreateAuctionConfigurationV2JSONBodyBiddingMobilefuse CreateAuctionConfigurationV2JSONBodyBidding = "mobilefuse"
	CreateAuctionConfigurationV2JSONBodyBiddingUnityads   CreateAuctionConfigurationV2JSONBodyBidding = "unityads"
	CreateAuctionConfigurationV2JSONBodyBiddingVkads      CreateAuctionConfigurationV2JSONBodyBidding = "vkads"
	CreateAuctionConfigurationV2JSONBodyBiddingVungle     CreateAuctionConfigurationV2JSONBodyBidding = "vungle"
	CreateAuctionConfigurationV2JSONBodyBiddingYandex     CreateAuctionConfigurationV2JSONBodyBidding = "yandex"
)

// Defines values for CreateAuctionConfigurationV2JSONBodyDemands.
const (
	CreateAuctionConfigurationV2JSONBodyDemandsAdmob      CreateAuctionConfigurationV2JSONBodyDemands = "admob"
	CreateAuctionConfigurationV2JSONBodyDemandsAmazon     CreateAuctionConfigurationV2JSONBodyDemands = "amazon"
	CreateAuctionConfigurationV2JSONBodyDemandsApplovin   CreateAuctionConfigurationV2JSONBodyDemands = "applovin"
	CreateAuctionConfigurationV2JSONBodyDemandsBidmachine CreateAuctionConfigurationV2JSONBodyDemands = "bidmachine"
	CreateAuctionConfigurationV2JSONBodyDemandsBigoads    CreateAuctionConfigurationV2JSONBodyDemands = "bigoads"
	CreateAuctionConfigurationV2JSONBodyDemandsChartboost CreateAuctionConfigurationV2JSONBodyDemands = "chartboost"
	CreateAuctionConfigurationV2JSONBodyDemandsDtexchange CreateAuctionConfigurationV2JSONBodyDemands = "dtexchange"
	CreateAuctionConfigurationV2JSONBodyDemandsGam        CreateAuctionConfigurationV2JSONBodyDemands = "gam"
	CreateAuctionConfigurationV2JSONBodyDemandsInmobi     CreateAuctionConfigurationV2JSONBodyDemands = "inmobi"
	CreateAuctionConfigurationV2JSONBodyDemandsIronsource CreateAuctionConfigurationV2JSONBodyDemands = "ironsource"
	CreateAuctionConfigurationV2JSONBodyDemandsMeta       CreateAuctionConfigurationV2JSONBodyDemands = "meta"
	CreateAuctionConfigurationV2JSONBodyDemandsMintegral  CreateAuctionConfigurationV2JSONBodyDemands = "mintegral"
	CreateAuctionConfigurationV2JSONBodyDemandsMobilefuse CreateAuctionConfigurationV2JSONBodyDemands = "mobilefuse"
	CreateAuctionConfigurationV2JSONBodyDemandsUnityads   CreateAuctionConfigurationV2JSONBodyDemands = "unityads"
	CreateAuctionConfigurationV2JSONBodyDemandsVkads      CreateAuctionConfigurationV2JSONBodyDemands = "vkads"
	CreateAuctionConfigurationV2JSONBodyDemandsVungle     CreateAuctionConfigurationV2JSONBodyDemands = "vungle"
	CreateAuctionConfigurationV2JSONBodyDemandsYandex     CreateAuctionConfigurationV2JSONBodyDemands = "yandex"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyAdType.
const (
	UpdateAuctionConfigurationV2JSONBodyAdTypeBanner       UpdateAuctionConfigurationV2JSONBodyAdType = "banner"
	UpdateAuctionConfigurationV2JSONBodyAdTypeInterstitial UpdateAuctionConfigurationV2JSONBodyAdType = "interstitial"
	UpdateAuctionConfigurationV2JSONBodyAdTypeRewarded     UpdateAuctionConfigurationV2JSONBodyAdType = "rewarded"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyBidding.
const (
	UpdateAuctionConfigurationV2JSONBodyBiddingAdmob      UpdateAuctionConfigurationV2JSONBodyBidding = "admob"
	UpdateAuctionConfigurationV2JSONBodyBiddingAmazon     UpdateAuctionConfigurationV2JSONBodyBidding = "amazon"
	UpdateAuctionConfigurationV2JSONBodyBiddingApplovin   UpdateAuctionConfigurationV2JSONBodyBidding = "applovin"
	UpdateAuctionConfigurationV2JSONBodyBiddingBidmachine UpdateAuctionConfigurationV2JSONBodyBidding = "bidmachine"
	UpdateAuctionConfigurationV2JSONBodyBiddingBigoads    UpdateAuctionConfigurationV2JSONBodyBidding = "bigoads"
	UpdateAuctionConfigurationV2JSONBodyBiddingChartboost UpdateAuctionConfigurationV2JSONBodyBidding = "chartboost"
	UpdateAuctionConfigurationV2JSONBodyBiddingDtexchange UpdateAuctionConfigurationV2JSONBodyBidding = "dtexchange"
	UpdateAuctionConfigurationV2JSONBodyBiddingGam        UpdateAuctionConfigurationV2JSONBodyBidding = "gam"
	UpdateAuctionConfigurationV2JSONBodyBiddingInmobi     UpdateAuctionConfigurationV2JSONBodyBidding = "inmobi"
	UpdateAuctionConfigurationV2JSONBodyBiddingIronsource UpdateAuctionConfigurationV2JSONBodyBidding = "ironsource"
	UpdateAuctionConfigurationV2JSONBodyBiddingMeta       UpdateAuctionConfigurationV2JSONBodyBidding = "meta"
	UpdateAuctionConfigurationV2JSONBodyBiddingMintegral  UpdateAuctionConfigurationV2JSONBodyBidding = "mintegral"
	UpdateAuctionConfigurationV2JSONBodyBiddingMobilefuse UpdateAuctionConfigurationV2JSONBodyBidding = "mobilefuse"
	UpdateAuctionConfigurationV2JSONBodyBiddingUnityads   UpdateAuctionConfigurationV2JSONBodyBidding = "unityads"
	UpdateAuctionConfigurationV2JSONBodyBiddingVkads      UpdateAuctionConfigurationV2JSONBodyBidding = "vkads"
	UpdateAuctionConfigurationV2JSONBodyBiddingVungle     UpdateAuctionConfigurationV2JSONBodyBidding = "vungle"
	UpdateAuctionConfigurationV2JSONBodyBiddingYandex     UpdateAuctionConfigurationV2JSONBodyBidding = "yandex"
)

// Defines values for UpdateAuctionConfigurationV2JSONBodyDemands.
const (
	UpdateAuctionConfigurationV2JSONBodyDemandsAdmob      UpdateAuctionConfigurationV2JSONBodyDemands = "admob"
	UpdateAuctionConfigurationV2JSONBodyDemandsAmazon     UpdateAuctionConfigurationV2JSONBodyDemands = "amazon"
	UpdateAuctionConfigurationV2JSONBodyDemandsApplovin   UpdateAuctionConfigurationV2JSONBodyDemands = "applovin"
	UpdateAuctionConfigurationV2JSONBodyDemandsBidmachine UpdateAuctionConfigurationV2JSONBodyDemands = "bidmachine"
	UpdateAuctionConfigurationV2JSONBodyDemandsBigoads    UpdateAuctionConfigurationV2JSONBodyDemands = "bigoads"
	UpdateAuctionConfigurationV2JSONBodyDemandsChartboost UpdateAuctionConfigurationV2JSONBodyDemands = "chartboost"
	UpdateAuctionConfigurationV2JSONBodyDemandsDtexchange UpdateAuctionConfigurationV2JSONBodyDemands = "dtexchange"
	UpdateAuctionConfigurationV2JSONBodyDemandsGam        UpdateAuctionConfigurationV2JSONBodyDemands = "gam"
	UpdateAuctionConfigurationV2JSONBodyDemandsInmobi     UpdateAuctionConfigurationV2JSONBodyDemands = "inmobi"
	UpdateAuctionConfigurationV2JSONBodyDemandsIronsource UpdateAuctionConfigurationV2JSONBodyDemands = "ironsource"
	UpdateAuctionConfigurationV2JSONBodyDemandsMeta       UpdateAuctionConfigurationV2JSONBodyDemands = "meta"
	UpdateAuctionConfigurationV2JSONBodyDemandsMintegral  UpdateAuctionConfigurationV2JSONBodyDemands = "mintegral"
	UpdateAuctionConfigurationV2JSONBodyDemandsMobilefuse UpdateAuctionConfigurationV2JSONBodyDemands = "mobilefuse"
	UpdateAuctionConfigurationV2JSONBodyDemandsUnityads   UpdateAuctionConfigurationV2JSONBodyDemands = "unityads"
	UpdateAuctionConfigurationV2JSONBodyDemandsVkads      UpdateAuctionConfigurationV2JSONBodyDemands = "vkads"
	UpdateAuctionConfigurationV2JSONBodyDemandsVungle     UpdateAuctionConfigurationV2JSONBodyDemands = "vungle"
	UpdateAuctionConfigurationV2JSONBodyDemandsYandex     UpdateAuctionConfigurationV2JSONBodyDemands = "yandex"
)

// AccountId defines model for accountId.
type AccountId = int64

// AccountType defines model for accountType.
type AccountType = string

// AdType defines model for adType.
type AdType = string

// AppId defines model for appId.
type AppId = int64

// DemandSourceId defines model for demandSourceId.
type DemandSourceId = int64

// IdParam A positive integer ID
type IdParam = int

// IsBidding defines model for isBidding.
type IsBidding = bool

// IsDefault defines model for isDefault.
type IsDefault = bool

// Limit defines model for limit.
type Limit = int

// Name defines model for name.
type Name = string

// Page defines model for page.
type Page = int

// UserId defines model for userId.
type UserId = int64

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		// Code Error code
		Code int `json:"code"`

		// Message Error message
		Message string `json:"message"`
	} `json:"error"`
}

// CreateAppDemandProfileJSONBody defines parameters for CreateAppDemandProfile.
type CreateAppDemandProfileJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account associated with this demand profile
	AccountType string `json:"account_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Data Additional data associated with the demand profile
	Data map[string]interface{} `json:"data"`

	// DemandSourceId A positive integer ID
	DemandSourceId int `json:"demand_source_id"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateAppDemandProfileJSONBody defines parameters for UpdateAppDemandProfile.
type UpdateAppDemandProfileJSONBody struct {
	// AccountId A positive integer ID
	AccountId *int `json:"account_id,omitempty"`

	// AccountType The type of account associated with this demand profile
	AccountType *string `json:"account_type,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Data Additional data associated with the demand profile
	Data *map[string]interface{} `json:"data,omitempty"`

	// DemandSourceId A positive integer ID
	DemandSourceId *int `json:"demand_source_id,omitempty"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// GetAppDemandProfilesCollectionParams defines parameters for GetAppDemandProfilesCollection.
type GetAppDemandProfilesCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// DemandSourceId Filter by demand source ID
	DemandSourceId *DemandSourceId `form:"demand_source_id,omitempty" json:"demand_source_id,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody struct {
	// AppKey A unique key for the app
	AppKey string `json:"app_key"`

	// HumanName The human-readable name of the app
	HumanName string `json:"human_name"`

	// Id A positive integer ID
	Id *int `json:"id,omitempty"`

	// PackageName The package name of the app
	PackageName string                      `json:"package_name"`
	PlatformId  CreateAppJSONBodyPlatformId `json:"platform_id"`
	PublicUid   *openapi_types.UUID         `json:"public_uid,omitempty"`

	// UserId A positive integer ID
	UserId int `json:"user_id"`
}

// CreateAppJSONBodyPlatformId defines parameters for CreateApp.
type CreateAppJSONBodyPlatformId string

// UpdateAppJSONBody defines parameters for UpdateApp.
type UpdateAppJSONBody struct {
	// AppKey A unique key for the app
	AppKey *string `json:"app_key,omitempty"`

	// HumanName The human-readable name of the app
	HumanName *string `json:"human_name,omitempty"`

	// Id A positive integer ID
	Id *int `json:"id,omitempty"`

	// PackageName The package name of the app
	PackageName *string                      `json:"package_name,omitempty"`
	PlatformId  *UpdateAppJSONBodyPlatformId `json:"platform_id,omitempty"`
	PublicUid   *openapi_types.UUID          `json:"public_uid,omitempty"`

	// UserId A positive integer ID
	UserId *int `json:"user_id,omitempty"`
}

// UpdateAppJSONBodyPlatformId defines parameters for UpdateApp.
type UpdateAppJSONBodyPlatformId string

// CreateAuctionConfigurationJSONBody defines parameters for CreateAuctionConfiguration.
type CreateAuctionConfigurationJSONBody struct {
	AdType CreateAuctionConfigurationJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name Name of the auction configuration
	Name string `json:"name"`

	// Pricefloor Price floor for the auction configuration
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// Rounds Auction rounds
	Rounds []struct {
		// Demands List of demands for the round
		Demands []string `json:"demands"`

		// Id Round ID
		Id string `json:"id"`

		// Timeout Timeout for the round in milliseconds
		Timeout int `json:"timeout"`
	} `json:"rounds"`
}

// CreateAuctionConfigurationJSONBodyAdType defines parameters for CreateAuctionConfiguration.
type CreateAuctionConfigurationJSONBodyAdType string

// UpdateAuctionConfigurationJSONBody defines parameters for UpdateAuctionConfiguration.
type UpdateAuctionConfigurationJSONBody struct {
	AdType UpdateAuctionConfigurationJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name Name of the auction configuration
	Name string `json:"name"`

	// Pricefloor Price floor for the auction configuration
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// Rounds Auction rounds
	Rounds []struct {
		// Demands List of demands for the round
		Demands []string `json:"demands"`

		// Id Round ID
		Id string `json:"id"`

		// Timeout Timeout for the round in milliseconds
		Timeout int `json:"timeout"`
	} `json:"rounds"`
}

// UpdateAuctionConfigurationJSONBodyAdType defines parameters for UpdateAuctionConfiguration.
type UpdateAuctionConfigurationJSONBodyAdType string

// GetAuctionConfigurationsCollectionParams defines parameters for GetAuctionConfigurationsCollection.
type GetAuctionConfigurationsCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// Name Filter by name
	Name *Name `form:"name,omitempty" json:"name,omitempty"`

	// IsDefault Filter by isDefault status
	IsDefault *IsDefault `form:"is_default,omitempty" json:"is_default,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateCountryJSONBody defines parameters for CreateCountry.
type CreateCountryJSONBody struct {
	// Alpha2Code The ISO 3166-1 alpha-2 code for the country
	Alpha2Code string `json:"alpha_2_code"`

	// Alpha3Code The ISO 3166-1 alpha-3 code for the country
	Alpha3Code string `json:"alpha_3_code"`

	// HumanName The human-readable name of the country
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// UpdateCountryJSONBody defines parameters for UpdateCountry.
type UpdateCountryJSONBody struct {
	// Alpha2Code The ISO 3166-1 alpha-2 code for the country
	Alpha2Code *string `json:"alpha_2_code,omitempty"`

	// Alpha3Code The ISO 3166-1 alpha-3 code for the country
	Alpha3Code *string `json:"alpha_3_code,omitempty"`

	// HumanName The human-readable name of the country
	HumanName *string `json:"human_name,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// CreateDemandSourceAccountJSONBody defines parameters for CreateDemandSourceAccount.
type CreateDemandSourceAccountJSONBody struct {
	// DemandSourceId A positive integer ID
	DemandSourceId int `json:"demand_source_id"`

	// Extra Additional information for the demand source account
	Extra map[string]interface{} `json:"extra"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsBidding Indicates whether bidding is enabled for this demand source account
	IsBidding bool                `json:"is_bidding"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`

	// Type The type of the demand source account
	Type string `json:"type"`

	// UserId A positive integer ID
	UserId int `json:"user_id"`
}

// UpdateDemandSourceAccountJSONBody defines parameters for UpdateDemandSourceAccount.
type UpdateDemandSourceAccountJSONBody struct {
	// DemandSourceId A positive integer ID
	DemandSourceId *int `json:"demand_source_id,omitempty"`

	// Extra Additional information for the demand source account
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsBidding Indicates whether bidding is enabled for this demand source account
	IsBidding *bool               `json:"is_bidding,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`

	// Type The type of the demand source account
	Type *string `json:"type,omitempty"`

	// UserId A positive integer ID
	UserId *int `json:"user_id,omitempty"`
}

// CreateDemandSourceJSONBody defines parameters for CreateDemandSource.
type CreateDemandSourceJSONBody struct {
	// ApiKey The API key associated with the demand source
	ApiKey string `json:"api_key"`

	// HumanName The human-readable name of the demand source
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateDemandSourceJSONBody defines parameters for UpdateDemandSource.
type UpdateDemandSourceJSONBody struct {
	// ApiKey The API key associated with the demand source
	ApiKey string `json:"api_key"`

	// HumanName The human-readable name of the demand source
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// AccountType Filter by account type
	AccountType *AccountType `form:"account_type,omitempty" json:"account_type,omitempty"`

	// IsBidding Filter by bidding status
	IsBidding *IsBidding `form:"is_bidding,omitempty" json:"is_bidding,omitempty"`
}

// CreateLineItemJSONBody defines parameters for CreateLineItem.
type CreateLineItemJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account
	AccountType string                       `json:"account_type"`
	AdType      CreateLineItemJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// BidFloor The minimum bid floor price
	BidFloor string `json:"bid_floor"`

	// Code The unique code for the line item
	Code  string                       `json:"code"`
	Extra CreateLineItemJSONBody_Extra `json:"extra"`

	// Format Format of the banner ad
	Format CreateLineItemJSONBodyFormat `json:"format"`

	// HumanName The human-readable name of the line item
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// CreateLineItemJSONBodyAdType defines parameters for CreateLineItem.
type CreateLineItemJSONBodyAdType string

// CreateLineItemJSONBodyExtra0 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra0 struct {
	// AdUnitId Ad unit ID (for Admob, Yandex)
	AdUnitId string `json:"ad_unit_id"`
}

// CreateLineItemJSONBodyExtra1 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra1 struct {
	// Format Ad format
	Format CreateLineItemJSONBodyExtra1Format `json:"format"`

	// SlotUuid Slot UUID (for Amazon)
	SlotUuid string `json:"slot_uuid"`
}

// CreateLineItemJSONBodyExtra1Format defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra1Format string

// CreateLineItemJSONBodyExtra2 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra2 struct {
	// ZoneId Zone ID (for Applovin)
	ZoneId string `json:"zone_id"`
}

// CreateLineItemJSONBodyExtra3 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra3 struct {
	// SlotId Slot ID (for BigoAds, VKAds)
	SlotId string `json:"slot_id"`
}

// CreateLineItemJSONBodyExtra4 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra4 struct {
	// AdLocation Ad location (for Chartboost)
	AdLocation string `json:"ad_location"`

	// Mediation Optional mediation parameter
	Mediation *string `json:"mediation,omitempty"`
}

// CreateLineItemJSONBodyExtra5 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra5 struct {
	// PlacementId Placement ID (for Meta, UnityAds, Vungle, MobileFuse)
	PlacementId string `json:"placement_id"`
}

// CreateLineItemJSONBodyExtra6 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra6 struct {
	// SpotId Spot ID (for DTExchange)
	SpotId string `json:"spot_id"`
}

// CreateLineItemJSONBodyExtra7 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra7 struct {
	// InstanceId Instance ID (for IronSource)
	InstanceId string `json:"instance_id"`
}

// CreateLineItemJSONBodyExtra8 defines parameters for CreateLineItem.
type CreateLineItemJSONBodyExtra8 struct {
	// PlacementId Placement ID (for Mintegral)
	PlacementId string `json:"placement_id"`

	// UnitId Unit ID (for Mintegral)
	UnitId string `json:"unit_id"`
}

// CreateLineItemJSONBody_Extra defines parameters for CreateLineItem.
type CreateLineItemJSONBody_Extra struct {
	union json.RawMessage
}

// CreateLineItemJSONBodyFormat defines parameters for CreateLineItem.
type CreateLineItemJSONBodyFormat string

// ImportLineItemsMultipartBody defines parameters for ImportLineItems.
type ImportLineItemsMultipartBody struct {
	// AccountId The ID of the account associated with the line items.
	AccountId int64 `json:"account_id"`

	// AppId The ID of the app to which the line items belong.
	AppId int64 `json:"app_id"`

	// Csv The CSV file containing the line items to import.
	Csv openapi_types.File `json:"csv"`

	// IsBidding Indicates whether the line items are for bidding.
	IsBidding *bool `json:"is_bidding,omitempty"`
}

// UpdateLineItemJSONBody defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody struct {
	// AccountId A positive integer ID
	AccountId int `json:"account_id"`

	// AccountType The type of account
	AccountType string                       `json:"account_type"`
	AdType      UpdateLineItemJSONBodyAdType `json:"ad_type"`

	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// BidFloor The minimum bid floor price
	BidFloor string `json:"bid_floor"`

	// Code The unique code for the line item
	Code  string                        `json:"code"`
	Extra *UpdateLineItemJSONBody_Extra `json:"extra,omitempty"`

	// Format Format of the banner ad
	Format UpdateLineItemJSONBodyFormat `json:"format"`

	// HumanName The human-readable name of the line item
	HumanName string `json:"human_name"`

	// Id A positive integer primary ID, read-only
	Id        *int                `json:"id,omitempty"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateLineItemJSONBodyAdType defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyAdType string

// UpdateLineItemJSONBodyExtra0 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra0 struct {
	// AdUnitId Ad unit ID (for Admob, Yandex)
	AdUnitId string `json:"ad_unit_id"`
}

// UpdateLineItemJSONBodyExtra1 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra1 struct {
	// Format Ad format
	Format UpdateLineItemJSONBodyExtra1Format `json:"format"`

	// SlotUuid Slot UUID (for Amazon)
	SlotUuid string `json:"slot_uuid"`
}

// UpdateLineItemJSONBodyExtra1Format defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra1Format string

// UpdateLineItemJSONBodyExtra2 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra2 struct {
	// ZoneId Zone ID (for Applovin)
	ZoneId string `json:"zone_id"`
}

// UpdateLineItemJSONBodyExtra3 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra3 struct {
	// SlotId Slot ID (for BigoAds, VKAds)
	SlotId string `json:"slot_id"`
}

// UpdateLineItemJSONBodyExtra4 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra4 struct {
	// AdLocation Ad location (for Chartboost)
	AdLocation string `json:"ad_location"`

	// Mediation Optional mediation parameter
	Mediation *string `json:"mediation,omitempty"`
}

// UpdateLineItemJSONBodyExtra5 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra5 struct {
	// PlacementId Placement ID (for Meta, UnityAds, Vungle, MobileFuse)
	PlacementId string `json:"placement_id"`
}

// UpdateLineItemJSONBodyExtra6 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra6 struct {
	// SpotId Spot ID (for DTExchange)
	SpotId string `json:"spot_id"`
}

// UpdateLineItemJSONBodyExtra7 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra7 struct {
	// InstanceId Instance ID (for IronSource)
	InstanceId string `json:"instance_id"`
}

// UpdateLineItemJSONBodyExtra8 defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyExtra8 struct {
	// PlacementId Placement ID (for Mintegral)
	PlacementId string `json:"placement_id"`

	// UnitId Unit ID (for Mintegral)
	UnitId string `json:"unit_id"`
}

// UpdateLineItemJSONBody_Extra defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody_Extra struct {
	union json.RawMessage
}

// UpdateLineItemJSONBodyFormat defines parameters for UpdateLineItem.
type UpdateLineItemJSONBodyFormat string

// GetLineItemsCollectionParams defines parameters for GetLineItemsCollection.
type GetLineItemsCollectionParams struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// AccountId Filter by account ID
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`

	// AccountType Filter by account type
	AccountType *AccountType `form:"account_type,omitempty" json:"account_type,omitempty"`

	// IsBidding Filter by bidding status
	IsBidding *IsBidding `form:"is_bidding,omitempty" json:"is_bidding,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateSegmentJSONBody defines parameters for CreateSegment.
type CreateSegmentJSONBody struct {
	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Description The description of the segment
	Description string `json:"description"`

	// Enabled Indicates if the segment is enabled
	Enabled bool `json:"enabled"`

	// Filters Filters applied to the segment
	Filters []struct {
		// Name The name of the filter
		Name string `json:"name"`

		// Operator The operator used in the filter
		Operator string `json:"operator"`

		// Type The type of filter
		Type   string   `json:"type"`
		Values []string `json:"values"`
	} `json:"filters"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name The name of the segment
	Name      string              `json:"name"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// UpdateSegmentJSONBody defines parameters for UpdateSegment.
type UpdateSegmentJSONBody struct {
	// AppId A positive integer ID
	AppId int `json:"app_id"`

	// Description The description of the segment
	Description string `json:"description"`

	// Enabled Indicates if the segment is enabled
	Enabled bool `json:"enabled"`

	// Filters Filters applied to the segment
	Filters []struct {
		// Name The name of the filter
		Name string `json:"name"`

		// Operator The operator used in the filter
		Operator string `json:"operator"`

		// Type The type of filter
		Type   string   `json:"type"`
		Values []string `json:"values"`
	} `json:"filters"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// Name The name of the segment
	Name      string              `json:"name"`
	PublicUid *openapi_types.UUID `json:"public_uid,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Email openapi_types.Email `json:"email"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`
}

// CreateAuctionConfigurationV2JSONBody defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBody struct {
	AdType CreateAuctionConfigurationV2JSONBodyAdType `json:"ad_type"`

	// AdUnitIds List of ad unit IDs
	AdUnitIds *[]int `json:"ad_unit_ids,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Bidding List of bidding sources
	Bidding *[]CreateAuctionConfigurationV2JSONBodyBidding `json:"bidding,omitempty"`

	// Demands List of demand sources
	Demands *[]CreateAuctionConfigurationV2JSONBodyDemands `json:"demands,omitempty"`

	// ExternalWinNotifications Whether external win notifications are enabled
	ExternalWinNotifications *bool `json:"external_win_notifications,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsDefault Indicates if this is the default configuration
	IsDefault  *bool               `json:"is_default,omitempty"`
	Name       string              `json:"name"`
	Pricefloor float32             `json:"pricefloor"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// SegmentId A positive integer ID
	SegmentId *int `json:"segment_id,omitempty"`

	// Settings A map of configuration settings
	Settings *map[string]interface{} `json:"settings,omitempty"`

	// Timeout Timeout value in milliseconds
	Timeout *int32 `json:"timeout,omitempty"`
}

// CreateAuctionConfigurationV2JSONBodyAdType defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyAdType string

// CreateAuctionConfigurationV2JSONBodyBidding defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyBidding string

// CreateAuctionConfigurationV2JSONBodyDemands defines parameters for CreateAuctionConfigurationV2.
type CreateAuctionConfigurationV2JSONBodyDemands string

// UpdateAuctionConfigurationV2JSONBody defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBody struct {
	AdType *UpdateAuctionConfigurationV2JSONBodyAdType `json:"ad_type,omitempty"`

	// AdUnitIds List of ad unit IDs
	AdUnitIds *[]int `json:"ad_unit_ids,omitempty"`

	// AppId A positive integer ID
	AppId *int `json:"app_id,omitempty"`

	// Bidding List of bidding sources
	Bidding *[]UpdateAuctionConfigurationV2JSONBodyBidding `json:"bidding,omitempty"`

	// Demands List of demand sources
	Demands *[]UpdateAuctionConfigurationV2JSONBodyDemands `json:"demands,omitempty"`

	// ExternalWinNotifications Whether external win notifications are enabled
	ExternalWinNotifications *bool `json:"external_win_notifications,omitempty"`

	// Id A positive integer primary ID, read-only
	Id *int `json:"id,omitempty"`

	// IsDefault Indicates if this is the default configuration
	IsDefault  *bool               `json:"is_default,omitempty"`
	Name       *string             `json:"name,omitempty"`
	Pricefloor *float32            `json:"pricefloor,omitempty"`
	PublicUid  *openapi_types.UUID `json:"public_uid,omitempty"`

	// SegmentId A positive integer ID
	SegmentId *int `json:"segment_id,omitempty"`

	// Settings A map of configuration settings
	Settings *map[string]interface{} `json:"settings,omitempty"`

	// Timeout Timeout value in milliseconds
	Timeout *int32 `json:"timeout,omitempty"`
}

// UpdateAuctionConfigurationV2JSONBodyAdType defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyAdType string

// UpdateAuctionConfigurationV2JSONBodyBidding defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyBidding string

// UpdateAuctionConfigurationV2JSONBodyDemands defines parameters for UpdateAuctionConfigurationV2.
type UpdateAuctionConfigurationV2JSONBodyDemands string

// GetAuctionConfigurationsCollectionV2Params defines parameters for GetAuctionConfigurationsCollectionV2.
type GetAuctionConfigurationsCollectionV2Params struct {
	// UserId Filter by user ID
	UserId *UserId `form:"user_id,omitempty" json:"user_id,omitempty"`

	// AppId Filter by app ID
	AppId *AppId `form:"app_id,omitempty" json:"app_id,omitempty"`

	// AdType Filter by ad type
	AdType *AdType `form:"ad_type,omitempty" json:"ad_type,omitempty"`

	// Name Filter by name
	Name *Name `form:"name,omitempty" json:"name,omitempty"`

	// IsDefault Filter by isDefault status
	IsDefault *IsDefault `form:"is_default,omitempty" json:"is_default,omitempty"`

	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// AuthorizeUserJSONBody defines parameters for AuthorizeUser.
type AuthorizeUserJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// LogInJSONBody defines parameters for LogIn.
type LogInJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// CreateAppDemandProfileJSONRequestBody defines body for CreateAppDemandProfile for application/json ContentType.
type CreateAppDemandProfileJSONRequestBody CreateAppDemandProfileJSONBody

// UpdateAppDemandProfileJSONRequestBody defines body for UpdateAppDemandProfile for application/json ContentType.
type UpdateAppDemandProfileJSONRequestBody UpdateAppDemandProfileJSONBody

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody CreateAppJSONBody

// UpdateAppJSONRequestBody defines body for UpdateApp for application/json ContentType.
type UpdateAppJSONRequestBody UpdateAppJSONBody

// CreateAuctionConfigurationJSONRequestBody defines body for CreateAuctionConfiguration for application/json ContentType.
type CreateAuctionConfigurationJSONRequestBody CreateAuctionConfigurationJSONBody

// UpdateAuctionConfigurationJSONRequestBody defines body for UpdateAuctionConfiguration for application/json ContentType.
type UpdateAuctionConfigurationJSONRequestBody UpdateAuctionConfigurationJSONBody

// CreateCountryJSONRequestBody defines body for CreateCountry for application/json ContentType.
type CreateCountryJSONRequestBody CreateCountryJSONBody

// UpdateCountryJSONRequestBody defines body for UpdateCountry for application/json ContentType.
type UpdateCountryJSONRequestBody UpdateCountryJSONBody

// CreateDemandSourceAccountJSONRequestBody defines body for CreateDemandSourceAccount for application/json ContentType.
type CreateDemandSourceAccountJSONRequestBody CreateDemandSourceAccountJSONBody

// UpdateDemandSourceAccountJSONRequestBody defines body for UpdateDemandSourceAccount for application/json ContentType.
type UpdateDemandSourceAccountJSONRequestBody UpdateDemandSourceAccountJSONBody

// CreateDemandSourceJSONRequestBody defines body for CreateDemandSource for application/json ContentType.
type CreateDemandSourceJSONRequestBody CreateDemandSourceJSONBody

// UpdateDemandSourceJSONRequestBody defines body for UpdateDemandSource for application/json ContentType.
type UpdateDemandSourceJSONRequestBody UpdateDemandSourceJSONBody

// CreateLineItemJSONRequestBody defines body for CreateLineItem for application/json ContentType.
type CreateLineItemJSONRequestBody CreateLineItemJSONBody

// ImportLineItemsMultipartRequestBody defines body for ImportLineItems for multipart/form-data ContentType.
type ImportLineItemsMultipartRequestBody ImportLineItemsMultipartBody

// UpdateLineItemJSONRequestBody defines body for UpdateLineItem for application/json ContentType.
type UpdateLineItemJSONRequestBody UpdateLineItemJSONBody

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody CreateSegmentJSONBody

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody UpdateSegmentJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// CreateAuctionConfigurationV2JSONRequestBody defines body for CreateAuctionConfigurationV2 for application/json ContentType.
type CreateAuctionConfigurationV2JSONRequestBody CreateAuctionConfigurationV2JSONBody

// UpdateAuctionConfigurationV2JSONRequestBody defines body for UpdateAuctionConfigurationV2 for application/json ContentType.
type UpdateAuctionConfigurationV2JSONRequestBody UpdateAuctionConfigurationV2JSONBody

// AuthorizeUserJSONRequestBody defines body for AuthorizeUser for application/json ContentType.
type AuthorizeUserJSONRequestBody AuthorizeUserJSONBody

// LogInJSONRequestBody defines body for LogIn for application/json ContentType.
type LogInJSONRequestBody LogInJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List app demand profiles
	// (GET /api/app_demand_profiles)
	GetAppDemandProfiles(ctx echo.Context) error
	// Create app demand profile
	// (POST /api/app_demand_profiles)
	CreateAppDemandProfile(ctx echo.Context) error
	// Delete app demand profile
	// (DELETE /api/app_demand_profiles/{id})
	DeleteAppDemandProfile(ctx echo.Context, id IdParam) error
	// Get app demand profile
	// (GET /api/app_demand_profiles/{id})
	GetAppDemandProfile(ctx echo.Context, id IdParam) error
	// Update app demand profile
	// (PATCH /api/app_demand_profiles/{id})
	UpdateAppDemandProfile(ctx echo.Context, id IdParam) error
	// List app demand profiles
	// (GET /api/app_demand_profiles_collection)
	GetAppDemandProfilesCollection(ctx echo.Context, params GetAppDemandProfilesCollectionParams) error
	// List apps
	// (GET /api/apps)
	GetApps(ctx echo.Context) error
	// Create app
	// (POST /api/apps)
	CreateApp(ctx echo.Context) error
	// Delete app
	// (DELETE /api/apps/{id})
	DeleteApp(ctx echo.Context, id IdParam) error
	// Get app
	// (GET /api/apps/{id})
	GetApp(ctx echo.Context, id IdParam) error
	// Update app
	// (PATCH /api/apps/{id})
	UpdateApp(ctx echo.Context, id IdParam) error
	// List auction configurations
	// (GET /api/auction_configurations)
	GetAuctionConfigurations(ctx echo.Context) error
	// Create auction configuration
	// (POST /api/auction_configurations)
	CreateAuctionConfiguration(ctx echo.Context) error
	// Delete auction configuration
	// (DELETE /api/auction_configurations/{id})
	DeleteAuctionConfiguration(ctx echo.Context, id IdParam) error
	// Get auction configuration
	// (GET /api/auction_configurations/{id})
	GetAuctionConfiguration(ctx echo.Context, id IdParam) error
	// Update auction configuration
	// (PATCH /api/auction_configurations/{id})
	UpdateAuctionConfiguration(ctx echo.Context, id IdParam) error
	// List auction configurations
	// (GET /api/auction_configurations_collection)
	GetAuctionConfigurationsCollection(ctx echo.Context, params GetAuctionConfigurationsCollectionParams) error
	// List countries
	// (GET /api/countries)
	GetCountries(ctx echo.Context) error
	// Create country
	// (POST /api/countries)
	CreateCountry(ctx echo.Context) error
	// Delete country
	// (DELETE /api/countries/{id})
	DeleteCountry(ctx echo.Context, id IdParam) error
	// Get country
	// (GET /api/countries/{id})
	GetCountry(ctx echo.Context, id IdParam) error
	// Update country
	// (PATCH /api/countries/{id})
	UpdateCountry(ctx echo.Context, id IdParam) error
	// List demand source accounts
	// (GET /api/demand_source_accounts)
	GetDemandSourceAccounts(ctx echo.Context) error
	// Create demand source account
	// (POST /api/demand_source_accounts)
	CreateDemandSourceAccount(ctx echo.Context) error
	// Delete demand source account
	// (DELETE /api/demand_source_accounts/{id})
	DeleteDemandSourceAccount(ctx echo.Context, id IdParam) error
	// Get demand source account
	// (GET /api/demand_source_accounts/{id})
	GetDemandSourceAccount(ctx echo.Context, id IdParam) error
	// Update demand source account
	// (PATCH /api/demand_source_accounts/{id})
	UpdateDemandSourceAccount(ctx echo.Context, id IdParam) error
	// List demand sources
	// (GET /api/demand_sources)
	GetDemandSources(ctx echo.Context) error
	// Create demand source
	// (POST /api/demand_sources)
	CreateDemandSource(ctx echo.Context) error
	// Delete demand source
	// (DELETE /api/demand_sources/{id})
	DeleteDemandSource(ctx echo.Context, id IdParam) error
	// Get demand source
	// (GET /api/demand_sources/{id})
	GetDemandSource(ctx echo.Context, id IdParam) error
	// Update demand source
	// (PATCH /api/demand_sources/{id})
	UpdateDemandSource(ctx echo.Context, id IdParam) error
	// List line items
	// (GET /api/line_items)
	GetLineItems(ctx echo.Context, params GetLineItemsParams) error
	// Create line item
	// (POST /api/line_items)
	CreateLineItem(ctx echo.Context) error
	// Import Line Items from CSV
	// (POST /api/line_items/import)
	ImportLineItems(ctx echo.Context) error
	// Delete line item
	// (DELETE /api/line_items/{id})
	DeleteLineItem(ctx echo.Context, id IdParam) error
	// Get line item
	// (GET /api/line_items/{id})
	GetLineItem(ctx echo.Context, id IdParam) error
	// Update line item
	// (PATCH /api/line_items/{id})
	UpdateLineItem(ctx echo.Context, id IdParam) error
	// List line items
	// (GET /api/line_items_collection)
	GetLineItemsCollection(ctx echo.Context, params GetLineItemsCollectionParams) error
	// Get OpenAPI specification
	// (GET /api/openapi.json)
	GetOpenAPISpec(ctx echo.Context) error
	// List resources permissions
	// (GET /api/rest/resources)
	GetResources(ctx echo.Context) error
	// List segments
	// (GET /api/segments)
	GetSegments(ctx echo.Context) error
	// Create segment
	// (POST /api/segments)
	CreateSegment(ctx echo.Context) error
	// Delete segment
	// (DELETE /api/segments/{id})
	DeleteSegment(ctx echo.Context, id IdParam) error
	// Get segment
	// (GET /api/segments/{id})
	GetSegment(ctx echo.Context, id IdParam) error
	// Update segment
	// (PATCH /api/segments/{id})
	UpdateSegment(ctx echo.Context, id IdParam) error
	// Update current user password
	// (PATCH /api/settings/password)
	UpdatePassword(ctx echo.Context) error
	// List users
	// (GET /api/users)
	GetUsers(ctx echo.Context) error
	// Create user
	// (POST /api/users)
	CreateUser(ctx echo.Context) error
	// Get current user
	// (GET /api/users/me)
	GetCurrentUser(ctx echo.Context) error
	// Delete user
	// (DELETE /api/users/{id})
	DeleteUser(ctx echo.Context, id IdParam) error
	// Get user
	// (GET /api/users/{id})
	GetUser(ctx echo.Context, id IdParam) error
	// Update user
	// (PATCH /api/users/{id})
	UpdateUser(ctx echo.Context, id IdParam) error
	// List auction configurations V2
	// (GET /api/v2/auction_configurations)
	GetAuctionConfigurationsV2(ctx echo.Context) error
	// Create auction configuration V2
	// (POST /api/v2/auction_configurations)
	CreateAuctionConfigurationV2(ctx echo.Context) error
	// Delete auction configuration
	// (DELETE /api/v2/auction_configurations/{id})
	DeleteAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// Get auction configuration V2
	// (GET /api/v2/auction_configurations/{id})
	GetAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// Update auction configuration V2
	// (PATCH /api/v2/auction_configurations/{id})
	UpdateAuctionConfigurationV2(ctx echo.Context, id IdParam) error
	// List auction configurations V2
	// (GET /api/v2/auction_configurations_collection)
	GetAuctionConfigurationsCollectionV2(ctx echo.Context, params GetAuctionConfigurationsCollectionV2Params) error
	// Issue access token
	// (POST /auth/authorize)
	AuthorizeUser(ctx echo.Context) error
	// User login
	// (POST /auth/login)
	LogIn(ctx echo.Context) error
	// User logout
	// (POST /auth/logout)
	LogOut(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAppDemandProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfiles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfiles(ctx)
	return err
}

// CreateAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAppDemandProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAppDemandProfile(ctx)
	return err
}

// DeleteAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAppDemandProfile(ctx, id)
	return err
}

// GetAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfile(ctx, id)
	return err
}

// UpdateAppDemandProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAppDemandProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAppDemandProfile(ctx, id)
	return err
}

// GetAppDemandProfilesCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppDemandProfilesCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAppDemandProfilesCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "demand_source_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "demand_source_id", ctx.QueryParams(), &params.DemandSourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter demand_source_id: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppDemandProfilesCollection(ctx, params)
	return err
}

// GetApps converts echo context to params.
func (w *ServerInterfaceWrapper) GetApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApps(ctx)
	return err
}

// CreateApp converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateApp(ctx)
	return err
}

// DeleteApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApp(ctx, id)
	return err
}

// GetApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApp(ctx, id)
	return err
}

// UpdateApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateApp(ctx, id)
	return err
}

// GetAuctionConfigurations converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurations(ctx)
	return err
}

// CreateAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuctionConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAuctionConfiguration(ctx)
	return err
}

// DeleteAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAuctionConfiguration(ctx, id)
	return err
}

// GetAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfiguration(ctx, id)
	return err
}

// UpdateAuctionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAuctionConfiguration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAuctionConfiguration(ctx, id)
	return err
}

// GetAuctionConfigurationsCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionConfigurationsCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "is_default" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_default", ctx.QueryParams(), &params.IsDefault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_default: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsCollection(ctx, params)
	return err
}

// GetCountries converts echo context to params.
func (w *ServerInterfaceWrapper) GetCountries(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCountries(ctx)
	return err
}

// CreateCountry converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCountry(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCountry(ctx)
	return err
}

// DeleteCountry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCountry(ctx, id)
	return err
}

// GetCountry converts echo context to params.
func (w *ServerInterfaceWrapper) GetCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCountry(ctx, id)
	return err
}

// UpdateCountry converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCountry(ctx, id)
	return err
}

// GetDemandSourceAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSourceAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSourceAccounts(ctx)
	return err
}

// CreateDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDemandSourceAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDemandSourceAccount(ctx)
	return err
}

// DeleteDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDemandSourceAccount(ctx, id)
	return err
}

// GetDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSourceAccount(ctx, id)
	return err
}

// UpdateDemandSourceAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDemandSourceAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDemandSourceAccount(ctx, id)
	return err
}

// GetDemandSources converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSources(ctx)
	return err
}

// CreateDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDemandSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDemandSource(ctx)
	return err
}

// DeleteDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDemandSource(ctx, id)
	return err
}

// GetDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) GetDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDemandSource(ctx, id)
	return err
}

// UpdateDemandSource converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDemandSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDemandSource(ctx, id)
	return err
}

// GetLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "account_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type", ctx.QueryParams(), &params.AccountType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type: %s", err))
	}

	// ------------- Optional query parameter "is_bidding" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_bidding", ctx.QueryParams(), &params.IsBidding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_bidding: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItems(ctx, params)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLineItem(ctx)
	return err
}

// ImportLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) ImportLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImportLineItems(ctx)
	return err
}

// DeleteLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLineItem(ctx, id)
	return err
}

// GetLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItem(ctx, id)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLineItem(ctx, id)
	return err
}

// GetLineItemsCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemsCollection(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsCollectionParams
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Optional query parameter "account_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type", ctx.QueryParams(), &params.AccountType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type: %s", err))
	}

	// ------------- Optional query parameter "is_bidding" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_bidding", ctx.QueryParams(), &params.IsBidding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_bidding: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItemsCollection(ctx, params)
	return err
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx)
	return err
}

// GetSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegments(ctx)
	return err
}

// CreateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSegment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSegment(ctx)
	return err
}

// DeleteSegment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSegment(ctx, id)
	return err
}

// GetSegment converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegment(ctx, id)
	return err
}

// UpdateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSegment(ctx, id)
	return err
}

// UpdatePassword converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePassword(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// GetAuctionConfigurationsV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsV2(ctx)
	return err
}

// CreateAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuctionConfigurationV2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAuctionConfigurationV2(ctx)
	return err
}

// DeleteAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAuctionConfigurationV2(ctx, id)
	return err
}

// GetAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationV2(ctx, id)
	return err
}

// UpdateAuctionConfigurationV2 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAuctionConfigurationV2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAuctionConfigurationV2(ctx, id)
	return err
}

// GetAuctionConfigurationsCollectionV2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuctionConfigurationsCollectionV2(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionConfigurationsCollectionV2Params
	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Optional query parameter "ad_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "ad_type", ctx.QueryParams(), &params.AdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "is_default" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_default", ctx.QueryParams(), &params.IsDefault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_default: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuctionConfigurationsCollectionV2(ctx, params)
	return err
}

// AuthorizeUser converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeUser(ctx)
	return err
}

// LogIn converts echo context to params.
func (w *ServerInterfaceWrapper) LogIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogIn(ctx)
	return err
}

// LogOut converts echo context to params.
func (w *ServerInterfaceWrapper) LogOut(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogOut(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/app_demand_profiles", wrapper.GetAppDemandProfiles)
	router.POST(baseURL+"/api/app_demand_profiles", wrapper.CreateAppDemandProfile)
	router.DELETE(baseURL+"/api/app_demand_profiles/:id", wrapper.DeleteAppDemandProfile)
	router.GET(baseURL+"/api/app_demand_profiles/:id", wrapper.GetAppDemandProfile)
	router.PATCH(baseURL+"/api/app_demand_profiles/:id", wrapper.UpdateAppDemandProfile)
	router.GET(baseURL+"/api/app_demand_profiles_collection", wrapper.GetAppDemandProfilesCollection)
	router.GET(baseURL+"/api/apps", wrapper.GetApps)
	router.POST(baseURL+"/api/apps", wrapper.CreateApp)
	router.DELETE(baseURL+"/api/apps/:id", wrapper.DeleteApp)
	router.GET(baseURL+"/api/apps/:id", wrapper.GetApp)
	router.PATCH(baseURL+"/api/apps/:id", wrapper.UpdateApp)
	router.GET(baseURL+"/api/auction_configurations", wrapper.GetAuctionConfigurations)
	router.POST(baseURL+"/api/auction_configurations", wrapper.CreateAuctionConfiguration)
	router.DELETE(baseURL+"/api/auction_configurations/:id", wrapper.DeleteAuctionConfiguration)
	router.GET(baseURL+"/api/auction_configurations/:id", wrapper.GetAuctionConfiguration)
	router.PATCH(baseURL+"/api/auction_configurations/:id", wrapper.UpdateAuctionConfiguration)
	router.GET(baseURL+"/api/auction_configurations_collection", wrapper.GetAuctionConfigurationsCollection)
	router.GET(baseURL+"/api/countries", wrapper.GetCountries)
	router.POST(baseURL+"/api/countries", wrapper.CreateCountry)
	router.DELETE(baseURL+"/api/countries/:id", wrapper.DeleteCountry)
	router.GET(baseURL+"/api/countries/:id", wrapper.GetCountry)
	router.PATCH(baseURL+"/api/countries/:id", wrapper.UpdateCountry)
	router.GET(baseURL+"/api/demand_source_accounts", wrapper.GetDemandSourceAccounts)
	router.POST(baseURL+"/api/demand_source_accounts", wrapper.CreateDemandSourceAccount)
	router.DELETE(baseURL+"/api/demand_source_accounts/:id", wrapper.DeleteDemandSourceAccount)
	router.GET(baseURL+"/api/demand_source_accounts/:id", wrapper.GetDemandSourceAccount)
	router.PATCH(baseURL+"/api/demand_source_accounts/:id", wrapper.UpdateDemandSourceAccount)
	router.GET(baseURL+"/api/demand_sources", wrapper.GetDemandSources)
	router.POST(baseURL+"/api/demand_sources", wrapper.CreateDemandSource)
	router.DELETE(baseURL+"/api/demand_sources/:id", wrapper.DeleteDemandSource)
	router.GET(baseURL+"/api/demand_sources/:id", wrapper.GetDemandSource)
	router.PATCH(baseURL+"/api/demand_sources/:id", wrapper.UpdateDemandSource)
	router.GET(baseURL+"/api/line_items", wrapper.GetLineItems)
	router.POST(baseURL+"/api/line_items", wrapper.CreateLineItem)
	router.POST(baseURL+"/api/line_items/import", wrapper.ImportLineItems)
	router.DELETE(baseURL+"/api/line_items/:id", wrapper.DeleteLineItem)
	router.GET(baseURL+"/api/line_items/:id", wrapper.GetLineItem)
	router.PATCH(baseURL+"/api/line_items/:id", wrapper.UpdateLineItem)
	router.GET(baseURL+"/api/line_items_collection", wrapper.GetLineItemsCollection)
	router.GET(baseURL+"/api/openapi.json", wrapper.GetOpenAPISpec)
	router.GET(baseURL+"/api/rest/resources", wrapper.GetResources)
	router.GET(baseURL+"/api/segments", wrapper.GetSegments)
	router.POST(baseURL+"/api/segments", wrapper.CreateSegment)
	router.DELETE(baseURL+"/api/segments/:id", wrapper.DeleteSegment)
	router.GET(baseURL+"/api/segments/:id", wrapper.GetSegment)
	router.PATCH(baseURL+"/api/segments/:id", wrapper.UpdateSegment)
	router.PATCH(baseURL+"/api/settings/password", wrapper.UpdatePassword)
	router.GET(baseURL+"/api/users", wrapper.GetUsers)
	router.POST(baseURL+"/api/users", wrapper.CreateUser)
	router.GET(baseURL+"/api/users/me", wrapper.GetCurrentUser)
	router.DELETE(baseURL+"/api/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/api/users/:id", wrapper.GetUser)
	router.PATCH(baseURL+"/api/users/:id", wrapper.UpdateUser)
	router.GET(baseURL+"/api/v2/auction_configurations", wrapper.GetAuctionConfigurationsV2)
	router.POST(baseURL+"/api/v2/auction_configurations", wrapper.CreateAuctionConfigurationV2)
	router.DELETE(baseURL+"/api/v2/auction_configurations/:id", wrapper.DeleteAuctionConfigurationV2)
	router.GET(baseURL+"/api/v2/auction_configurations/:id", wrapper.GetAuctionConfigurationV2)
	router.PATCH(baseURL+"/api/v2/auction_configurations/:id", wrapper.UpdateAuctionConfigurationV2)
	router.GET(baseURL+"/api/v2/auction_configurations_collection", wrapper.GetAuctionConfigurationsCollectionV2)
	router.POST(baseURL+"/auth/authorize", wrapper.AuthorizeUser)
	router.POST(baseURL+"/auth/login", wrapper.LogIn)
	router.POST(baseURL+"/auth/logout", wrapper.LogOut)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwMAAP//fouLfOe3AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
