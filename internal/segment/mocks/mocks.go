// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/segment"
	"sync"
)

// Ensure, that FetcherMock does implement segment.Fetcher.
// If this is not the case, regenerate this file with moq.
var _ segment.Fetcher = &FetcherMock{}

// FetcherMock is a mock implementation of segment.Fetcher.
//
//	func TestSomethingThatUsesFetcher(t *testing.T) {
//
//		// make and configure a mocked segment.Fetcher
//		mockedFetcher := &FetcherMock{
//			FetchFunc: func(ctx context.Context, appID int64) ([]segment.Segment, error) {
//				panic("mock out the Fetch method")
//			},
//		}
//
//		// use mockedFetcher in code that requires segment.Fetcher
//		// and then make assertions.
//
//	}
type FetcherMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(ctx context.Context, appID int64) ([]segment.Segment, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
		}
	}
	lockFetch sync.RWMutex
}

// Fetch calls FetchFunc.
func (mock *FetcherMock) Fetch(ctx context.Context, appID int64) ([]segment.Segment, error) {
	if mock.FetchFunc == nil {
		panic("FetcherMock.FetchFunc: method is nil but Fetcher.Fetch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		AppID int64
	}{
		Ctx:   ctx,
		AppID: appID,
	}
	mock.lockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	mock.lockFetch.Unlock()
	return mock.FetchFunc(ctx, appID)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//
//	len(mockedFetcher.FetchCalls())
func (mock *FetcherMock) FetchCalls() []struct {
	Ctx   context.Context
	AppID int64
} {
	var calls []struct {
		Ctx   context.Context
		AppID int64
	}
	mock.lockFetch.RLock()
	calls = mock.calls.Fetch
	mock.lockFetch.RUnlock()
	return calls
}
