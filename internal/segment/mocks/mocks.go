// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/segment"
	"sync"
)

// Ensure, that FetcherMock does implement segment.Fetcher.
// If this is not the case, regenerate this file with moq.
var _ segment.Fetcher = &FetcherMock{}

// FetcherMock is a mock implementation of segment.Fetcher.
//
//	func TestSomethingThatUsesFetcher(t *testing.T) {
//
//		// make and configure a mocked segment.Fetcher
//		mockedFetcher := &FetcherMock{
//			FetchCachedFunc: func(ctx context.Context, appID int64) ([]segment.Segment, error) {
//				panic("mock out the FetchCached method")
//			},
//		}
//
//		// use mockedFetcher in code that requires segment.Fetcher
//		// and then make assertions.
//
//	}
type FetcherMock struct {
	// FetchCachedFunc mocks the FetchCached method.
	FetchCachedFunc func(ctx context.Context, appID int64) ([]segment.Segment, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchCached holds details about calls to the FetchCached method.
		FetchCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
		}
	}
	lockFetchCached sync.RWMutex
}

// FetchCached calls FetchCachedFunc.
func (mock *FetcherMock) FetchCached(ctx context.Context, appID int64) ([]segment.Segment, error) {
	if mock.FetchCachedFunc == nil {
		panic("FetcherMock.FetchCachedFunc: method is nil but Fetcher.FetchCached was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		AppID int64
	}{
		Ctx:   ctx,
		AppID: appID,
	}
	mock.lockFetchCached.Lock()
	mock.calls.FetchCached = append(mock.calls.FetchCached, callInfo)
	mock.lockFetchCached.Unlock()
	return mock.FetchCachedFunc(ctx, appID)
}

// FetchCachedCalls gets all the calls that were made to FetchCached.
// Check the length with:
//
//	len(mockedFetcher.FetchCachedCalls())
func (mock *FetcherMock) FetchCachedCalls() []struct {
	Ctx   context.Context
	AppID int64
} {
	var calls []struct {
		Ctx   context.Context
		AppID int64
	}
	mock.lockFetchCached.RLock()
	calls = mock.calls.FetchCached
	mock.lockFetchCached.RUnlock()
	return calls
}
