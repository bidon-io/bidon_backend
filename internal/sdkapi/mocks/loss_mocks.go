// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/schema"
	"sync"
)

// Ensure, that LossNotificationHandlerMock does implement sdkapi.LossNotificationHandler.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.LossNotificationHandler = &LossNotificationHandlerMock{}

// LossNotificationHandlerMock is a mock implementation of sdkapi.LossNotificationHandler.
//
//	func TestSomethingThatUsesLossNotificationHandler(t *testing.T) {
//
//		// make and configure a mocked sdkapi.LossNotificationHandler
//		mockedLossNotificationHandler := &LossNotificationHandlerMock{
//			HandleLossFunc: func(ctx context.Context, bid *schema.Bid) error {
//				panic("mock out the HandleLoss method")
//			},
//		}
//
//		// use mockedLossNotificationHandler in code that requires sdkapi.LossNotificationHandler
//		// and then make assertions.
//
//	}
type LossNotificationHandlerMock struct {
	// HandleLossFunc mocks the HandleLoss method.
	HandleLossFunc func(ctx context.Context, bid *schema.Bid) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleLoss holds details about calls to the HandleLoss method.
		HandleLoss []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bid is the bid argument value.
			Bid *schema.Bid
		}
	}
	lockHandleLoss sync.RWMutex
}

// HandleLoss calls HandleLossFunc.
func (mock *LossNotificationHandlerMock) HandleLoss(ctx context.Context, bid *schema.Bid) error {
	if mock.HandleLossFunc == nil {
		panic("LossNotificationHandlerMock.HandleLossFunc: method is nil but LossNotificationHandler.HandleLoss was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Bid *schema.Bid
	}{
		Ctx: ctx,
		Bid: bid,
	}
	mock.lockHandleLoss.Lock()
	mock.calls.HandleLoss = append(mock.calls.HandleLoss, callInfo)
	mock.lockHandleLoss.Unlock()
	return mock.HandleLossFunc(ctx, bid)
}

// HandleLossCalls gets all the calls that were made to HandleLoss.
// Check the length with:
//
//	len(mockedLossNotificationHandler.HandleLossCalls())
func (mock *LossNotificationHandlerMock) HandleLossCalls() []struct {
	Ctx context.Context
	Bid *schema.Bid
} {
	var calls []struct {
		Ctx context.Context
		Bid *schema.Bid
	}
	mock.lockHandleLoss.RLock()
	calls = mock.calls.HandleLoss
	mock.lockHandleLoss.RUnlock()
	return calls
}
