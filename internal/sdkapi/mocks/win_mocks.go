// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/bidding/adapters"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/schema"
	"sync"
)

// Ensure, that WinNotificationHandlerMock does implement sdkapi.WinNotificationHandler.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.WinNotificationHandler = &WinNotificationHandlerMock{}

// WinNotificationHandlerMock is a mock implementation of sdkapi.WinNotificationHandler.
//
//	func TestSomethingThatUsesWinNotificationHandler(t *testing.T) {
//
//		// make and configure a mocked sdkapi.WinNotificationHandler
//		mockedWinNotificationHandler := &WinNotificationHandlerMock{
//			HandleWinFunc: func(contextMoqParam context.Context, imp *schema.Imp, demandResponses []*adapters.DemandResponse) error {
//				panic("mock out the HandleWin method")
//			},
//		}
//
//		// use mockedWinNotificationHandler in code that requires sdkapi.WinNotificationHandler
//		// and then make assertions.
//
//	}
type WinNotificationHandlerMock struct {
	// HandleWinFunc mocks the HandleWin method.
	HandleWinFunc func(contextMoqParam context.Context, imp *schema.Imp, demandResponses []*adapters.DemandResponse) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleWin holds details about calls to the HandleWin method.
		HandleWin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Imp is the imp argument value.
			Imp *schema.Imp
			// DemandResponses is the demandResponses argument value.
			DemandResponses []*adapters.DemandResponse
		}
	}
	lockHandleWin sync.RWMutex
}

// HandleWin calls HandleWinFunc.
func (mock *WinNotificationHandlerMock) HandleWin(contextMoqParam context.Context, imp *schema.Imp, demandResponses []*adapters.DemandResponse) error {
	if mock.HandleWinFunc == nil {
		panic("WinNotificationHandlerMock.HandleWinFunc: method is nil but WinNotificationHandler.HandleWin was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Imp             *schema.Imp
		DemandResponses []*adapters.DemandResponse
	}{
		ContextMoqParam: contextMoqParam,
		Imp:             imp,
		DemandResponses: demandResponses,
	}
	mock.lockHandleWin.Lock()
	mock.calls.HandleWin = append(mock.calls.HandleWin, callInfo)
	mock.lockHandleWin.Unlock()
	return mock.HandleWinFunc(contextMoqParam, imp, demandResponses)
}

// HandleWinCalls gets all the calls that were made to HandleWin.
// Check the length with:
//
//	len(mockedWinNotificationHandler.HandleWinCalls())
func (mock *WinNotificationHandlerMock) HandleWinCalls() []struct {
	ContextMoqParam context.Context
	Imp             *schema.Imp
	DemandResponses []*adapters.DemandResponse
} {
	var calls []struct {
		ContextMoqParam context.Context
		Imp             *schema.Imp
		DemandResponses []*adapters.DemandResponse
	}
	mock.lockHandleWin.RLock()
	calls = mock.calls.HandleWin
	mock.lockHandleWin.RUnlock()
	return calls
}
