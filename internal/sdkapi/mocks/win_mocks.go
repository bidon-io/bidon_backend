// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/schema"
	"sync"
)

// Ensure, that WinNotificationHandlerMock does implement sdkapi.WinNotificationHandler.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.WinNotificationHandler = &WinNotificationHandlerMock{}

// WinNotificationHandlerMock is a mock implementation of sdkapi.WinNotificationHandler.
//
//	func TestSomethingThatUsesWinNotificationHandler(t *testing.T) {
//
//		// make and configure a mocked sdkapi.WinNotificationHandler
//		mockedWinNotificationHandler := &WinNotificationHandlerMock{
//			HandleWinFunc: func(ctx context.Context, bid *schema.Bid) error {
//				panic("mock out the HandleWin method")
//			},
//		}
//
//		// use mockedWinNotificationHandler in code that requires sdkapi.WinNotificationHandler
//		// and then make assertions.
//
//	}
type WinNotificationHandlerMock struct {
	// HandleWinFunc mocks the HandleWin method.
	HandleWinFunc func(ctx context.Context, bid *schema.Bid) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleWin holds details about calls to the HandleWin method.
		HandleWin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bid is the bid argument value.
			Bid *schema.Bid
		}
	}
	lockHandleWin sync.RWMutex
}

// HandleWin calls HandleWinFunc.
func (mock *WinNotificationHandlerMock) HandleWin(ctx context.Context, bid *schema.Bid) error {
	if mock.HandleWinFunc == nil {
		panic("WinNotificationHandlerMock.HandleWinFunc: method is nil but WinNotificationHandler.HandleWin was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Bid *schema.Bid
	}{
		Ctx: ctx,
		Bid: bid,
	}
	mock.lockHandleWin.Lock()
	mock.calls.HandleWin = append(mock.calls.HandleWin, callInfo)
	mock.lockHandleWin.Unlock()
	return mock.HandleWinFunc(ctx, bid)
}

// HandleWinCalls gets all the calls that were made to HandleWin.
// Check the length with:
//
//	len(mockedWinNotificationHandler.HandleWinCalls())
func (mock *WinNotificationHandlerMock) HandleWinCalls() []struct {
	Ctx context.Context
	Bid *schema.Bid
} {
	var calls []struct {
		Ctx context.Context
		Bid *schema.Bid
	}
	mock.lockHandleWin.RLock()
	calls = mock.calls.HandleWin
	mock.lockHandleWin.RUnlock()
	return calls
}
