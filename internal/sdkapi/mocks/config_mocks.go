// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/Masterminds/semver/v3"
	"github.com/bidon-io/bidon-backend/internal/adapter"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"sync"
)

// Ensure, that AdapterInitConfigsFetcherMock does implement sdkapi.AdapterInitConfigsFetcher.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.AdapterInitConfigsFetcher = &AdapterInitConfigsFetcherMock{}

// AdapterInitConfigsFetcherMock is a mock implementation of sdkapi.AdapterInitConfigsFetcher.
//
//	func TestSomethingThatUsesAdapterInitConfigsFetcher(t *testing.T) {
//
//		// make and configure a mocked sdkapi.AdapterInitConfigsFetcher
//		mockedAdapterInitConfigsFetcher := &AdapterInitConfigsFetcherMock{
//			FetchAdapterInitConfigsFunc: func(ctx context.Context, appID int64, adapterKeys []adapter.Key, sdkVersion *semver.Version, setOrder bool) ([]sdkapi.AdapterInitConfig, error) {
//				panic("mock out the FetchAdapterInitConfigs method")
//			},
//		}
//
//		// use mockedAdapterInitConfigsFetcher in code that requires sdkapi.AdapterInitConfigsFetcher
//		// and then make assertions.
//
//	}
type AdapterInitConfigsFetcherMock struct {
	// FetchAdapterInitConfigsFunc mocks the FetchAdapterInitConfigs method.
	FetchAdapterInitConfigsFunc func(ctx context.Context, appID int64, adapterKeys []adapter.Key, sdkVersion *semver.Version, setOrder bool) ([]sdkapi.AdapterInitConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchAdapterInitConfigs holds details about calls to the FetchAdapterInitConfigs method.
		FetchAdapterInitConfigs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdapterKeys is the adapterKeys argument value.
			AdapterKeys []adapter.Key
			// SdkVersion is the sdkVersion argument value.
			SdkVersion *semver.Version
			// SetOrder is the setOrder argument value.
			SetOrder bool
		}
	}
	lockFetchAdapterInitConfigs sync.RWMutex
}

// FetchAdapterInitConfigs calls FetchAdapterInitConfigsFunc.
func (mock *AdapterInitConfigsFetcherMock) FetchAdapterInitConfigs(ctx context.Context, appID int64, adapterKeys []adapter.Key, sdkVersion *semver.Version, setOrder bool) ([]sdkapi.AdapterInitConfig, error) {
	if mock.FetchAdapterInitConfigsFunc == nil {
		panic("AdapterInitConfigsFetcherMock.FetchAdapterInitConfigsFunc: method is nil but AdapterInitConfigsFetcher.FetchAdapterInitConfigs was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
		SdkVersion  *semver.Version
		SetOrder    bool
	}{
		Ctx:         ctx,
		AppID:       appID,
		AdapterKeys: adapterKeys,
		SdkVersion:  sdkVersion,
		SetOrder:    setOrder,
	}
	mock.lockFetchAdapterInitConfigs.Lock()
	mock.calls.FetchAdapterInitConfigs = append(mock.calls.FetchAdapterInitConfigs, callInfo)
	mock.lockFetchAdapterInitConfigs.Unlock()
	return mock.FetchAdapterInitConfigsFunc(ctx, appID, adapterKeys, sdkVersion, setOrder)
}

// FetchAdapterInitConfigsCalls gets all the calls that were made to FetchAdapterInitConfigs.
// Check the length with:
//
//	len(mockedAdapterInitConfigsFetcher.FetchAdapterInitConfigsCalls())
func (mock *AdapterInitConfigsFetcherMock) FetchAdapterInitConfigsCalls() []struct {
	Ctx         context.Context
	AppID       int64
	AdapterKeys []adapter.Key
	SdkVersion  *semver.Version
	SetOrder    bool
} {
	var calls []struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
		SdkVersion  *semver.Version
		SetOrder    bool
	}
	mock.lockFetchAdapterInitConfigs.RLock()
	calls = mock.calls.FetchAdapterInitConfigs
	mock.lockFetchAdapterInitConfigs.RUnlock()
	return calls
}
