// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/ad"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/geocoder"
	"sync"
)

// Ensure, that AppFetcherMock does implement sdkapi.AppFetcher.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.AppFetcher = &AppFetcherMock{}

// AppFetcherMock is a mock implementation of sdkapi.AppFetcher.
//
//	func TestSomethingThatUsesAppFetcher(t *testing.T) {
//
//		// make and configure a mocked sdkapi.AppFetcher
//		mockedAppFetcher := &AppFetcherMock{
//			FetchCachedFunc: func(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error) {
//				panic("mock out the FetchCached method")
//			},
//		}
//
//		// use mockedAppFetcher in code that requires sdkapi.AppFetcher
//		// and then make assertions.
//
//	}
type AppFetcherMock struct {
	// FetchCachedFunc mocks the FetchCached method.
	FetchCachedFunc func(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchCached holds details about calls to the FetchCached method.
		FetchCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppKey is the appKey argument value.
			AppKey string
			// AppBundle is the appBundle argument value.
			AppBundle string
		}
	}
	lockFetchCached sync.RWMutex
}

// FetchCached calls FetchCachedFunc.
func (mock *AppFetcherMock) FetchCached(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error) {
	if mock.FetchCachedFunc == nil {
		panic("AppFetcherMock.FetchCachedFunc: method is nil but AppFetcher.FetchCached was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AppKey    string
		AppBundle string
	}{
		Ctx:       ctx,
		AppKey:    appKey,
		AppBundle: appBundle,
	}
	mock.lockFetchCached.Lock()
	mock.calls.FetchCached = append(mock.calls.FetchCached, callInfo)
	mock.lockFetchCached.Unlock()
	return mock.FetchCachedFunc(ctx, appKey, appBundle)
}

// FetchCachedCalls gets all the calls that were made to FetchCached.
// Check the length with:
//
//	len(mockedAppFetcher.FetchCachedCalls())
func (mock *AppFetcherMock) FetchCachedCalls() []struct {
	Ctx       context.Context
	AppKey    string
	AppBundle string
} {
	var calls []struct {
		Ctx       context.Context
		AppKey    string
		AppBundle string
	}
	mock.lockFetchCached.RLock()
	calls = mock.calls.FetchCached
	mock.lockFetchCached.RUnlock()
	return calls
}

// Ensure, that ConfigFetcherMock does implement sdkapi.ConfigFetcher.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.ConfigFetcher = &ConfigFetcherMock{}

// ConfigFetcherMock is a mock implementation of sdkapi.ConfigFetcher.
//
//	func TestSomethingThatUsesConfigFetcher(t *testing.T) {
//
//		// make and configure a mocked sdkapi.ConfigFetcher
//		mockedConfigFetcher := &ConfigFetcherMock{
//			FetchByUIDCachedFunc: func(ctx context.Context, appId int64, id string, uid string) *auction.Config {
//				panic("mock out the FetchByUIDCached method")
//			},
//			MatchFunc: func(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedConfigFetcher in code that requires sdkapi.ConfigFetcher
//		// and then make assertions.
//
//	}
type ConfigFetcherMock struct {
	// FetchByUIDCachedFunc mocks the FetchByUIDCached method.
	FetchByUIDCachedFunc func(ctx context.Context, appId int64, id string, uid string) *auction.Config

	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchByUIDCached holds details about calls to the FetchByUIDCached method.
		FetchByUIDCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppId is the appId argument value.
			AppId int64
			// ID is the id argument value.
			ID string
			// UID is the uid argument value.
			UID string
		}
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdType is the adType argument value.
			AdType ad.Type
			// SegmentID is the segmentID argument value.
			SegmentID int64
		}
	}
	lockFetchByUIDCached sync.RWMutex
	lockMatch            sync.RWMutex
}

// FetchByUIDCached calls FetchByUIDCachedFunc.
func (mock *ConfigFetcherMock) FetchByUIDCached(ctx context.Context, appId int64, id string, uid string) *auction.Config {
	if mock.FetchByUIDCachedFunc == nil {
		panic("ConfigFetcherMock.FetchByUIDCachedFunc: method is nil but ConfigFetcher.FetchByUIDCached was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		AppId int64
		ID    string
		UID   string
	}{
		Ctx:   ctx,
		AppId: appId,
		ID:    id,
		UID:   uid,
	}
	mock.lockFetchByUIDCached.Lock()
	mock.calls.FetchByUIDCached = append(mock.calls.FetchByUIDCached, callInfo)
	mock.lockFetchByUIDCached.Unlock()
	return mock.FetchByUIDCachedFunc(ctx, appId, id, uid)
}

// FetchByUIDCachedCalls gets all the calls that were made to FetchByUIDCached.
// Check the length with:
//
//	len(mockedConfigFetcher.FetchByUIDCachedCalls())
func (mock *ConfigFetcherMock) FetchByUIDCachedCalls() []struct {
	Ctx   context.Context
	AppId int64
	ID    string
	UID   string
} {
	var calls []struct {
		Ctx   context.Context
		AppId int64
		ID    string
		UID   string
	}
	mock.lockFetchByUIDCached.RLock()
	calls = mock.calls.FetchByUIDCached
	mock.lockFetchByUIDCached.RUnlock()
	return calls
}

// Match calls MatchFunc.
func (mock *ConfigFetcherMock) Match(ctx context.Context, appID int64, adType ad.Type, segmentID int64) (*auction.Config, error) {
	if mock.MatchFunc == nil {
		panic("ConfigFetcherMock.MatchFunc: method is nil but ConfigFetcher.Match was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
	}{
		Ctx:       ctx,
		AppID:     appID,
		AdType:    adType,
		SegmentID: segmentID,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, appID, adType, segmentID)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedConfigFetcher.MatchCalls())
func (mock *ConfigFetcherMock) MatchCalls() []struct {
	Ctx       context.Context
	AppID     int64
	AdType    ad.Type
	SegmentID int64
} {
	var calls []struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}

// Ensure, that GeocoderMock does implement sdkapi.Geocoder.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.Geocoder = &GeocoderMock{}

// GeocoderMock is a mock implementation of sdkapi.Geocoder.
//
//	func TestSomethingThatUsesGeocoder(t *testing.T) {
//
//		// make and configure a mocked sdkapi.Geocoder
//		mockedGeocoder := &GeocoderMock{
//			LookupFunc: func(ctx context.Context, ipString string) (geocoder.GeoData, error) {
//				panic("mock out the Lookup method")
//			},
//		}
//
//		// use mockedGeocoder in code that requires sdkapi.Geocoder
//		// and then make assertions.
//
//	}
type GeocoderMock struct {
	// LookupFunc mocks the Lookup method.
	LookupFunc func(ctx context.Context, ipString string) (geocoder.GeoData, error)

	// calls tracks calls to the methods.
	calls struct {
		// Lookup holds details about calls to the Lookup method.
		Lookup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IpString is the ipString argument value.
			IpString string
		}
	}
	lockLookup sync.RWMutex
}

// Lookup calls LookupFunc.
func (mock *GeocoderMock) Lookup(ctx context.Context, ipString string) (geocoder.GeoData, error) {
	if mock.LookupFunc == nil {
		panic("GeocoderMock.LookupFunc: method is nil but Geocoder.Lookup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		IpString string
	}{
		Ctx:      ctx,
		IpString: ipString,
	}
	mock.lockLookup.Lock()
	mock.calls.Lookup = append(mock.calls.Lookup, callInfo)
	mock.lockLookup.Unlock()
	return mock.LookupFunc(ctx, ipString)
}

// LookupCalls gets all the calls that were made to Lookup.
// Check the length with:
//
//	len(mockedGeocoder.LookupCalls())
func (mock *GeocoderMock) LookupCalls() []struct {
	Ctx      context.Context
	IpString string
} {
	var calls []struct {
		Ctx      context.Context
		IpString string
	}
	mock.lockLookup.RLock()
	calls = mock.calls.Lookup
	mock.lockLookup.RUnlock()
	return calls
}
