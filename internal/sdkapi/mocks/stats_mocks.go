// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/schema"
	"sync"
)

// Ensure, that StatsNotificationHandlerMock does implement sdkapi.StatsNotificationHandler.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.StatsNotificationHandler = &StatsNotificationHandlerMock{}

// StatsNotificationHandlerMock is a mock implementation of sdkapi.StatsNotificationHandler.
//
//	func TestSomethingThatUsesStatsNotificationHandler(t *testing.T) {
//
//		// make and configure a mocked sdkapi.StatsNotificationHandler
//		mockedStatsNotificationHandler := &StatsNotificationHandlerMock{
//			HandleStatsFunc: func(contextMoqParam context.Context, stats schema.Stats, config auction.Config) error {
//				panic("mock out the HandleStats method")
//			},
//		}
//
//		// use mockedStatsNotificationHandler in code that requires sdkapi.StatsNotificationHandler
//		// and then make assertions.
//
//	}
type StatsNotificationHandlerMock struct {
	// HandleStatsFunc mocks the HandleStats method.
	HandleStatsFunc func(contextMoqParam context.Context, stats schema.Stats, config auction.Config) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleStats holds details about calls to the HandleStats method.
		HandleStats []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Stats is the stats argument value.
			Stats schema.Stats
			// Config is the config argument value.
			Config auction.Config
		}
	}
	lockHandleStats sync.RWMutex
}

// HandleStats calls HandleStatsFunc.
func (mock *StatsNotificationHandlerMock) HandleStats(contextMoqParam context.Context, stats schema.Stats, config auction.Config) error {
	if mock.HandleStatsFunc == nil {
		panic("StatsNotificationHandlerMock.HandleStatsFunc: method is nil but StatsNotificationHandler.HandleStats was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Stats           schema.Stats
		Config          auction.Config
	}{
		ContextMoqParam: contextMoqParam,
		Stats:           stats,
		Config:          config,
	}
	mock.lockHandleStats.Lock()
	mock.calls.HandleStats = append(mock.calls.HandleStats, callInfo)
	mock.lockHandleStats.Unlock()
	return mock.HandleStatsFunc(contextMoqParam, stats, config)
}

// HandleStatsCalls gets all the calls that were made to HandleStats.
// Check the length with:
//
//	len(mockedStatsNotificationHandler.HandleStatsCalls())
func (mock *StatsNotificationHandlerMock) HandleStatsCalls() []struct {
	ContextMoqParam context.Context
	Stats           schema.Stats
	Config          auction.Config
} {
	var calls []struct {
		ContextMoqParam context.Context
		Stats           schema.Stats
		Config          auction.Config
	}
	mock.lockHandleStats.RLock()
	calls = mock.calls.HandleStats
	mock.lockHandleStats.RUnlock()
	return calls
}

// Ensure, that ConfigMatcherMock does implement sdkapi.ConfigMatcher.
// If this is not the case, regenerate this file with moq.
var _ sdkapi.ConfigMatcher = &ConfigMatcherMock{}

// ConfigMatcherMock is a mock implementation of sdkapi.ConfigMatcher.
//
//	func TestSomethingThatUsesConfigMatcher(t *testing.T) {
//
//		// make and configure a mocked sdkapi.ConfigMatcher
//		mockedConfigMatcher := &ConfigMatcherMock{
//			MatchByIdFunc: func(ctx context.Context, appID int64, id int64) *auction.Config {
//				panic("mock out the MatchById method")
//			},
//		}
//
//		// use mockedConfigMatcher in code that requires sdkapi.ConfigMatcher
//		// and then make assertions.
//
//	}
type ConfigMatcherMock struct {
	// MatchByIdFunc mocks the MatchById method.
	MatchByIdFunc func(ctx context.Context, appID int64, id int64) *auction.Config

	// calls tracks calls to the methods.
	calls struct {
		// MatchById holds details about calls to the MatchById method.
		MatchById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// ID is the id argument value.
			ID int64
		}
	}
	lockMatchById sync.RWMutex
}

// MatchById calls MatchByIdFunc.
func (mock *ConfigMatcherMock) MatchById(ctx context.Context, appID int64, id int64) *auction.Config {
	if mock.MatchByIdFunc == nil {
		panic("ConfigMatcherMock.MatchByIdFunc: method is nil but ConfigMatcher.MatchById was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		AppID int64
		ID    int64
	}{
		Ctx:   ctx,
		AppID: appID,
		ID:    id,
	}
	mock.lockMatchById.Lock()
	mock.calls.MatchById = append(mock.calls.MatchById, callInfo)
	mock.lockMatchById.Unlock()
	return mock.MatchByIdFunc(ctx, appID, id)
}

// MatchByIdCalls gets all the calls that were made to MatchById.
// Check the length with:
//
//	len(mockedConfigMatcher.MatchByIdCalls())
func (mock *ConfigMatcherMock) MatchByIdCalls() []struct {
	Ctx   context.Context
	AppID int64
	ID    int64
} {
	var calls []struct {
		Ctx   context.Context
		AppID int64
		ID    int64
	}
	mock.lockMatchById.RLock()
	calls = mock.calls.MatchById
	mock.lockMatchById.RUnlock()
	return calls
}
