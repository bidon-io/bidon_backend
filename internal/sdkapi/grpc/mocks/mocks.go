// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/sdkapi"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/geocoder"
	"github.com/bidon-io/bidon-backend/internal/sdkapi/grpc"
	"sync"
)

// Ensure, that AppFetcherMock does implement grpcserver.AppFetcher.
// If this is not the case, regenerate this file with moq.
var _ grpcserver.AppFetcher = &AppFetcherMock{}

// AppFetcherMock is a mock implementation of grpcserver.AppFetcher.
//
//	func TestSomethingThatUsesAppFetcher(t *testing.T) {
//
//		// make and configure a mocked grpcserver.AppFetcher
//		mockedAppFetcher := &AppFetcherMock{
//			FetchCachedFunc: func(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error) {
//				panic("mock out the FetchCached method")
//			},
//		}
//
//		// use mockedAppFetcher in code that requires grpcserver.AppFetcher
//		// and then make assertions.
//
//	}
type AppFetcherMock struct {
	// FetchCachedFunc mocks the FetchCached method.
	FetchCachedFunc func(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchCached holds details about calls to the FetchCached method.
		FetchCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppKey is the appKey argument value.
			AppKey string
			// AppBundle is the appBundle argument value.
			AppBundle string
		}
	}
	lockFetchCached sync.RWMutex
}

// FetchCached calls FetchCachedFunc.
func (mock *AppFetcherMock) FetchCached(ctx context.Context, appKey string, appBundle string) (sdkapi.App, error) {
	if mock.FetchCachedFunc == nil {
		panic("AppFetcherMock.FetchCachedFunc: method is nil but AppFetcher.FetchCached was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AppKey    string
		AppBundle string
	}{
		Ctx:       ctx,
		AppKey:    appKey,
		AppBundle: appBundle,
	}
	mock.lockFetchCached.Lock()
	mock.calls.FetchCached = append(mock.calls.FetchCached, callInfo)
	mock.lockFetchCached.Unlock()
	return mock.FetchCachedFunc(ctx, appKey, appBundle)
}

// FetchCachedCalls gets all the calls that were made to FetchCached.
// Check the length with:
//
//	len(mockedAppFetcher.FetchCachedCalls())
func (mock *AppFetcherMock) FetchCachedCalls() []struct {
	Ctx       context.Context
	AppKey    string
	AppBundle string
} {
	var calls []struct {
		Ctx       context.Context
		AppKey    string
		AppBundle string
	}
	mock.lockFetchCached.RLock()
	calls = mock.calls.FetchCached
	mock.lockFetchCached.RUnlock()
	return calls
}

// Ensure, that AuctionServiceMock does implement grpcserver.AuctionService.
// If this is not the case, regenerate this file with moq.
var _ grpcserver.AuctionService = &AuctionServiceMock{}

// AuctionServiceMock is a mock implementation of grpcserver.AuctionService.
//
//	func TestSomethingThatUsesAuctionService(t *testing.T) {
//
//		// make and configure a mocked grpcserver.AuctionService
//		mockedAuctionService := &AuctionServiceMock{
//			RunFunc: func(ctx context.Context, params *auction.ExecutionParams) (*auction.Response, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedAuctionService in code that requires grpcserver.AuctionService
//		// and then make assertions.
//
//	}
type AuctionServiceMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, params *auction.ExecutionParams) (*auction.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *auction.ExecutionParams
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *AuctionServiceMock) Run(ctx context.Context, params *auction.ExecutionParams) (*auction.Response, error) {
	if mock.RunFunc == nil {
		panic("AuctionServiceMock.RunFunc: method is nil but AuctionService.Run was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *auction.ExecutionParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, params)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedAuctionService.RunCalls())
func (mock *AuctionServiceMock) RunCalls() []struct {
	Ctx    context.Context
	Params *auction.ExecutionParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *auction.ExecutionParams
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Ensure, that GeocoderMock does implement grpcserver.Geocoder.
// If this is not the case, regenerate this file with moq.
var _ grpcserver.Geocoder = &GeocoderMock{}

// GeocoderMock is a mock implementation of grpcserver.Geocoder.
//
//	func TestSomethingThatUsesGeocoder(t *testing.T) {
//
//		// make and configure a mocked grpcserver.Geocoder
//		mockedGeocoder := &GeocoderMock{
//			LookupFunc: func(ctx context.Context, ipString string) (geocoder.GeoData, error) {
//				panic("mock out the Lookup method")
//			},
//		}
//
//		// use mockedGeocoder in code that requires grpcserver.Geocoder
//		// and then make assertions.
//
//	}
type GeocoderMock struct {
	// LookupFunc mocks the Lookup method.
	LookupFunc func(ctx context.Context, ipString string) (geocoder.GeoData, error)

	// calls tracks calls to the methods.
	calls struct {
		// Lookup holds details about calls to the Lookup method.
		Lookup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IpString is the ipString argument value.
			IpString string
		}
	}
	lockLookup sync.RWMutex
}

// Lookup calls LookupFunc.
func (mock *GeocoderMock) Lookup(ctx context.Context, ipString string) (geocoder.GeoData, error) {
	if mock.LookupFunc == nil {
		panic("GeocoderMock.LookupFunc: method is nil but Geocoder.Lookup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		IpString string
	}{
		Ctx:      ctx,
		IpString: ipString,
	}
	mock.lockLookup.Lock()
	mock.calls.Lookup = append(mock.calls.Lookup, callInfo)
	mock.lockLookup.Unlock()
	return mock.LookupFunc(ctx, ipString)
}

// LookupCalls gets all the calls that were made to Lookup.
// Check the length with:
//
//	len(mockedGeocoder.LookupCalls())
func (mock *GeocoderMock) LookupCalls() []struct {
	Ctx      context.Context
	IpString string
} {
	var calls []struct {
		Ctx      context.Context
		IpString string
	}
	mock.lockLookup.RLock()
	calls = mock.calls.Lookup
	mock.lockLookup.RUnlock()
	return calls
}
