// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetConfigJSONBodyDeviceConnectionType.
const (
	CELLULAR        GetConfigJSONBodyDeviceConnectionType = "CELLULAR"
	CELLULAR2G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	CELLULAR3G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	CELLULAR4G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	CELLULAR5G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	CELLULARUNKNOWN GetConfigJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	ETHERNET        GetConfigJSONBodyDeviceConnectionType = "ETHERNET"
	WIFI            GetConfigJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for GetConfigJSONBodyDeviceType.
const (
	PHONE  GetConfigJSONBodyDeviceType = "PHONE"
	TABLET GetConfigJSONBodyDeviceType = "TABLET"
)

// GetConfigJSONBody defines parameters for GetConfig.
type GetConfigJSONBody struct {
	Adapters *map[string]struct {
		SdkVersion string `json:"sdk_version"`
		Version    string `json:"version"`
	} `json:"adapters,omitempty"`
	App *struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app,omitempty"`
	Device *struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType GetConfigJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *GetConfigJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device,omitempty"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Session *struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session,omitempty"`
	Token *string `json:"token,omitempty"`
	User  *struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user,omitempty"`
}

// GetConfigJSONBodyDeviceConnectionType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceConnectionType string

// GetConfigJSONBodyDeviceType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceType string

// GetConfigJSONRequestBody defines body for GetConfig for application/json ContentType.
type GetConfigJSONRequestBody GetConfigJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get OpenAPI specification
	// (GET /openapi.json)
	GetOpenAPISpec(ctx echo.Context) error
	// Get config
	// (POST /v2/config)
	GetConfig(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetOpenAPISpec)
	router.POST(baseURL+"/v2/config", wrapper.GetConfig)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"E98+6VYg7aNvnsqWy+V/AwAA//9ONc0EGiUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
