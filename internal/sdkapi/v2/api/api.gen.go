// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetAuctionParamsAdType.
const (
	GetAuctionParamsAdTypeBanner       GetAuctionParamsAdType = "banner"
	GetAuctionParamsAdTypeInterstitial GetAuctionParamsAdType = "interstitial"
	GetAuctionParamsAdTypeRewarded     GetAuctionParamsAdType = "rewarded"
)

// Defines values for GetAuctionJSONBodyAdObjectBannerFormat.
const (
	GetAuctionJSONBodyAdObjectBannerFormatADAPTIVE    GetAuctionJSONBodyAdObjectBannerFormat = "ADAPTIVE"
	GetAuctionJSONBodyAdObjectBannerFormatBANNER      GetAuctionJSONBodyAdObjectBannerFormat = "BANNER"
	GetAuctionJSONBodyAdObjectBannerFormatLEADERBOARD GetAuctionJSONBodyAdObjectBannerFormat = "LEADERBOARD"
	GetAuctionJSONBodyAdObjectBannerFormatMREC        GetAuctionJSONBodyAdObjectBannerFormat = "MREC"
)

// Defines values for GetAuctionJSONBodyAdObjectOrientation.
const (
	LANDSCAPE GetAuctionJSONBodyAdObjectOrientation = "LANDSCAPE"
	PORTRAIT  GetAuctionJSONBodyAdObjectOrientation = "PORTRAIT"
)

// Defines values for GetAuctionJSONBodyDeviceConnectionType.
const (
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR        GetAuctionJSONBodyDeviceConnectionType = "CELLULAR"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR2G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR3G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR4G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR5G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULARUNKNOWN GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	GetAuctionJSONBodyDeviceConnectionTypeETHERNET        GetAuctionJSONBodyDeviceConnectionType = "ETHERNET"
	GetAuctionJSONBodyDeviceConnectionTypeWIFI            GetAuctionJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for GetAuctionJSONBodyDeviceType.
const (
	GetAuctionJSONBodyDeviceTypePHONE  GetAuctionJSONBodyDeviceType = "PHONE"
	GetAuctionJSONBodyDeviceTypeTABLET GetAuctionJSONBodyDeviceType = "TABLET"
)

// Defines values for PostClickParamsAdType.
const (
	PostClickParamsAdTypeBanner       PostClickParamsAdType = "banner"
	PostClickParamsAdTypeInterstitial PostClickParamsAdType = "interstitial"
	PostClickParamsAdTypeRewarded     PostClickParamsAdType = "rewarded"
)

// Defines values for PostClickJSONBodyBidBannerFormat.
const (
	PostClickJSONBodyBidBannerFormatADAPTIVE    PostClickJSONBodyBidBannerFormat = "ADAPTIVE"
	PostClickJSONBodyBidBannerFormatBANNER      PostClickJSONBodyBidBannerFormat = "BANNER"
	PostClickJSONBodyBidBannerFormatLEADERBOARD PostClickJSONBodyBidBannerFormat = "LEADERBOARD"
	PostClickJSONBodyBidBannerFormatMREC        PostClickJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostClickJSONBodyBidBidType.
const (
	PostClickJSONBodyBidBidTypeCPM PostClickJSONBodyBidBidType = "CPM"
	PostClickJSONBodyBidBidTypeRTB PostClickJSONBodyBidBidType = "RTB"
)

// Defines values for PostClickJSONBodyDeviceConnectionType.
const (
	PostClickJSONBodyDeviceConnectionTypeCELLULAR        PostClickJSONBodyDeviceConnectionType = "CELLULAR"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR2G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR3G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR4G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR5G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostClickJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostClickJSONBodyDeviceConnectionTypeETHERNET        PostClickJSONBodyDeviceConnectionType = "ETHERNET"
	PostClickJSONBodyDeviceConnectionTypeWIFI            PostClickJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostClickJSONBodyDeviceType.
const (
	PostClickJSONBodyDeviceTypePHONE  PostClickJSONBodyDeviceType = "PHONE"
	PostClickJSONBodyDeviceTypeTABLET PostClickJSONBodyDeviceType = "TABLET"
)

// Defines values for PostClickJSONBodyShowBannerFormat.
const (
	PostClickJSONBodyShowBannerFormatADAPTIVE    PostClickJSONBodyShowBannerFormat = "ADAPTIVE"
	PostClickJSONBodyShowBannerFormatBANNER      PostClickJSONBodyShowBannerFormat = "BANNER"
	PostClickJSONBodyShowBannerFormatLEADERBOARD PostClickJSONBodyShowBannerFormat = "LEADERBOARD"
	PostClickJSONBodyShowBannerFormatMREC        PostClickJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostClickJSONBodyShowBidType.
const (
	PostClickJSONBodyShowBidTypeCPM PostClickJSONBodyShowBidType = "CPM"
	PostClickJSONBodyShowBidTypeRTB PostClickJSONBodyShowBidType = "RTB"
)

// Defines values for GetConfigJSONBodyDeviceConnectionType.
const (
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR        GetConfigJSONBodyDeviceConnectionType = "CELLULAR"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR2G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR3G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR4G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR5G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULARUNKNOWN GetConfigJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	GetConfigJSONBodyDeviceConnectionTypeETHERNET        GetConfigJSONBodyDeviceConnectionType = "ETHERNET"
	GetConfigJSONBodyDeviceConnectionTypeWIFI            GetConfigJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for GetConfigJSONBodyDeviceType.
const (
	GetConfigJSONBodyDeviceTypePHONE  GetConfigJSONBodyDeviceType = "PHONE"
	GetConfigJSONBodyDeviceTypeTABLET GetConfigJSONBodyDeviceType = "TABLET"
)

// Defines values for PostRewardParamsAdType.
const (
	PostRewardParamsAdTypeRewarded PostRewardParamsAdType = "rewarded"
)

// Defines values for PostRewardJSONBodyBidBannerFormat.
const (
	PostRewardJSONBodyBidBannerFormatADAPTIVE    PostRewardJSONBodyBidBannerFormat = "ADAPTIVE"
	PostRewardJSONBodyBidBannerFormatBANNER      PostRewardJSONBodyBidBannerFormat = "BANNER"
	PostRewardJSONBodyBidBannerFormatLEADERBOARD PostRewardJSONBodyBidBannerFormat = "LEADERBOARD"
	PostRewardJSONBodyBidBannerFormatMREC        PostRewardJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostRewardJSONBodyBidBidType.
const (
	PostRewardJSONBodyBidBidTypeCPM PostRewardJSONBodyBidBidType = "CPM"
	PostRewardJSONBodyBidBidTypeRTB PostRewardJSONBodyBidBidType = "RTB"
)

// Defines values for PostRewardJSONBodyDeviceConnectionType.
const (
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR        PostRewardJSONBodyDeviceConnectionType = "CELLULAR"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR2G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR3G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR4G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR5G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostRewardJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostRewardJSONBodyDeviceConnectionTypeETHERNET        PostRewardJSONBodyDeviceConnectionType = "ETHERNET"
	PostRewardJSONBodyDeviceConnectionTypeWIFI            PostRewardJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostRewardJSONBodyDeviceType.
const (
	PostRewardJSONBodyDeviceTypePHONE  PostRewardJSONBodyDeviceType = "PHONE"
	PostRewardJSONBodyDeviceTypeTABLET PostRewardJSONBodyDeviceType = "TABLET"
)

// Defines values for PostRewardJSONBodyShowBannerFormat.
const (
	PostRewardJSONBodyShowBannerFormatADAPTIVE    PostRewardJSONBodyShowBannerFormat = "ADAPTIVE"
	PostRewardJSONBodyShowBannerFormatBANNER      PostRewardJSONBodyShowBannerFormat = "BANNER"
	PostRewardJSONBodyShowBannerFormatLEADERBOARD PostRewardJSONBodyShowBannerFormat = "LEADERBOARD"
	PostRewardJSONBodyShowBannerFormatMREC        PostRewardJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostRewardJSONBodyShowBidType.
const (
	PostRewardJSONBodyShowBidTypeCPM PostRewardJSONBodyShowBidType = "CPM"
	PostRewardJSONBodyShowBidTypeRTB PostRewardJSONBodyShowBidType = "RTB"
)

// Defines values for PostShowParamsAdType.
const (
	PostShowParamsAdTypeBanner       PostShowParamsAdType = "banner"
	PostShowParamsAdTypeInterstitial PostShowParamsAdType = "interstitial"
	PostShowParamsAdTypeRewarded     PostShowParamsAdType = "rewarded"
)

// Defines values for PostShowJSONBodyBidBannerFormat.
const (
	PostShowJSONBodyBidBannerFormatADAPTIVE    PostShowJSONBodyBidBannerFormat = "ADAPTIVE"
	PostShowJSONBodyBidBannerFormatBANNER      PostShowJSONBodyBidBannerFormat = "BANNER"
	PostShowJSONBodyBidBannerFormatLEADERBOARD PostShowJSONBodyBidBannerFormat = "LEADERBOARD"
	PostShowJSONBodyBidBannerFormatMREC        PostShowJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostShowJSONBodyBidBidType.
const (
	PostShowJSONBodyBidBidTypeCPM PostShowJSONBodyBidBidType = "CPM"
	PostShowJSONBodyBidBidTypeRTB PostShowJSONBodyBidBidType = "RTB"
)

// Defines values for PostShowJSONBodyDeviceConnectionType.
const (
	PostShowJSONBodyDeviceConnectionTypeCELLULAR        PostShowJSONBodyDeviceConnectionType = "CELLULAR"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR2G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR3G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR4G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR5G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostShowJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostShowJSONBodyDeviceConnectionTypeETHERNET        PostShowJSONBodyDeviceConnectionType = "ETHERNET"
	PostShowJSONBodyDeviceConnectionTypeWIFI            PostShowJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostShowJSONBodyDeviceType.
const (
	PostShowJSONBodyDeviceTypePHONE  PostShowJSONBodyDeviceType = "PHONE"
	PostShowJSONBodyDeviceTypeTABLET PostShowJSONBodyDeviceType = "TABLET"
)

// Defines values for PostShowJSONBodyShowBannerFormat.
const (
	PostShowJSONBodyShowBannerFormatADAPTIVE    PostShowJSONBodyShowBannerFormat = "ADAPTIVE"
	PostShowJSONBodyShowBannerFormatBANNER      PostShowJSONBodyShowBannerFormat = "BANNER"
	PostShowJSONBodyShowBannerFormatLEADERBOARD PostShowJSONBodyShowBannerFormat = "LEADERBOARD"
	PostShowJSONBodyShowBannerFormatMREC        PostShowJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostShowJSONBodyShowBidType.
const (
	PostShowJSONBodyShowBidTypeCPM PostShowJSONBodyShowBidType = "CPM"
	PostShowJSONBodyShowBidTypeRTB PostShowJSONBodyShowBidType = "RTB"
)

// Defines values for PostStatsParamsAdType.
const (
	Banner       PostStatsParamsAdType = "banner"
	Interstitial PostStatsParamsAdType = "interstitial"
	Rewarded     PostStatsParamsAdType = "rewarded"
)

// Defines values for PostStatsJSONBodyDeviceConnectionType.
const (
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR        PostStatsJSONBodyDeviceConnectionType = "CELLULAR"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR2G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR3G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR4G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR5G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostStatsJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostStatsJSONBodyDeviceConnectionTypeETHERNET        PostStatsJSONBodyDeviceConnectionType = "ETHERNET"
	PostStatsJSONBodyDeviceConnectionTypeWIFI            PostStatsJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostStatsJSONBodyDeviceType.
const (
	PostStatsJSONBodyDeviceTypePHONE  PostStatsJSONBodyDeviceType = "PHONE"
	PostStatsJSONBodyDeviceTypeTABLET PostStatsJSONBodyDeviceType = "TABLET"
)

// Defines values for PostStatsJSONBodyStatsAdUnitsStatus.
const (
	PostStatsJSONBodyStatsAdUnitsStatusEmpty   PostStatsJSONBodyStatsAdUnitsStatus = ""
	PostStatsJSONBodyStatsAdUnitsStatusFAIL    PostStatsJSONBodyStatsAdUnitsStatus = "FAIL"
	PostStatsJSONBodyStatsAdUnitsStatusPENDING PostStatsJSONBodyStatsAdUnitsStatus = "PENDING"
	PostStatsJSONBodyStatsAdUnitsStatusSUCCESS PostStatsJSONBodyStatsAdUnitsStatus = "SUCCESS"
)

// Defines values for PostStatsJSONBodyStatsResultBannerFormat.
const (
	PostStatsJSONBodyStatsResultBannerFormatADAPTIVE    PostStatsJSONBodyStatsResultBannerFormat = "ADAPTIVE"
	PostStatsJSONBodyStatsResultBannerFormatBANNER      PostStatsJSONBodyStatsResultBannerFormat = "BANNER"
	PostStatsJSONBodyStatsResultBannerFormatLEADERBOARD PostStatsJSONBodyStatsResultBannerFormat = "LEADERBOARD"
	PostStatsJSONBodyStatsResultBannerFormatMREC        PostStatsJSONBodyStatsResultBannerFormat = "MREC"
)

// Defines values for PostStatsJSONBodyStatsResultBidType.
const (
	CPM PostStatsJSONBodyStatsResultBidType = "CPM"
	RTB PostStatsJSONBodyStatsResultBidType = "RTB"
)

// Defines values for PostStatsJSONBodyStatsResultStatus.
const (
	PostStatsJSONBodyStatsResultStatusAUCTIONCANCELLED PostStatsJSONBodyStatsResultStatus = "AUCTION_CANCELLED"
	PostStatsJSONBodyStatsResultStatusFAIL             PostStatsJSONBodyStatsResultStatus = "FAIL"
	PostStatsJSONBodyStatsResultStatusSUCCESS          PostStatsJSONBodyStatsResultStatus = "SUCCESS"
)

// GetAuctionJSONBody defines parameters for GetAuction.
type GetAuctionJSONBody struct {
	AdObject struct {
		// AuctionConfigurationId ID of the auction configuration
		AuctionConfigurationId *int64 `json:"auction_configuration_id,omitempty"`

		// AuctionConfigurationUid UID of the auction configuration
		AuctionConfigurationUid *string `json:"auction_configuration_uid,omitempty"`

		// AuctionId Unique identifier for the auction
		AuctionId *string `json:"auction_id,omitempty"`

		// AuctionKey Generated key for the auction request
		AuctionKey *string `json:"auction_key,omitempty"`

		// AuctionPricefloor PriceFloor for the auction
		AuctionPricefloor float32 `json:"auction_pricefloor"`
		Banner            *struct {
			// Format Format of the banner ad
			Format GetAuctionJSONBodyAdObjectBannerFormat `json:"format"`
		} `json:"banner,omitempty"`

		// Demands Map of demands
		Demands map[string]map[string]interface{} `json:"demands"`

		// Interstitial Empty schema for interstitial ad configuration
		Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

		// Orientation Orientation of the ad
		Orientation *GetAuctionJSONBodyAdObjectOrientation `json:"orientation,omitempty"`

		// Rewarded Empty schema for rewarded ad configuration
		Rewarded *map[string]interface{} `json:"rewarded,omitempty"`
	} `json:"ad_object"`
	Adapters map[string]struct {
		SdkVersion string `json:"sdk_version"`
		Version    string `json:"version"`
	} `json:"adapters"`
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType GetAuctionJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *GetAuctionJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`

	// Test Flag indicating that the request is a test
	Test *bool `json:"test,omitempty"`

	// Tmax Maximum response time for the server before timeout
	Tmax  *int64  `json:"tmax,omitempty"`
	Token *string `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// GetAuctionParamsAdType defines parameters for GetAuction.
type GetAuctionParamsAdType string

// GetAuctionJSONBodyAdObjectBannerFormat defines parameters for GetAuction.
type GetAuctionJSONBodyAdObjectBannerFormat string

// GetAuctionJSONBodyAdObjectOrientation defines parameters for GetAuction.
type GetAuctionJSONBodyAdObjectOrientation string

// GetAuctionJSONBodyDeviceConnectionType defines parameters for GetAuction.
type GetAuctionJSONBodyDeviceConnectionType string

// GetAuctionJSONBodyDeviceType defines parameters for GetAuction.
type GetAuctionJSONBodyDeviceType string

// PostClickJSONBody defines parameters for PostClick.
type PostClickJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostClickJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostClickJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostClickJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostClickJSONBody_Show `json:"show,omitempty"`
	Token *string                 `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostClickParamsAdType defines parameters for PostClick.
type PostClickParamsAdType string

// PostClickJSONBodyBidBannerFormat defines parameters for PostClick.
type PostClickJSONBodyBidBannerFormat string

// PostClickJSONBodyBidBidType defines parameters for PostClick.
type PostClickJSONBodyBidBidType string

// PostClickJSONBodyBid0 defines parameters for PostClick.
type PostClickJSONBodyBid0 = interface{}

// PostClickJSONBodyBid1 defines parameters for PostClick.
type PostClickJSONBodyBid1 = interface{}

// PostClickJSONBody_Bid defines parameters for PostClick.
type PostClickJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostClickJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostClickJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostClickJSONBodyDeviceConnectionType defines parameters for PostClick.
type PostClickJSONBodyDeviceConnectionType string

// PostClickJSONBodyDeviceType defines parameters for PostClick.
type PostClickJSONBodyDeviceType string

// PostClickJSONBodyShowBannerFormat defines parameters for PostClick.
type PostClickJSONBodyShowBannerFormat string

// PostClickJSONBodyShowBidType defines parameters for PostClick.
type PostClickJSONBodyShowBidType string

// PostClickJSONBodyShow0 defines parameters for PostClick.
type PostClickJSONBodyShow0 = interface{}

// PostClickJSONBodyShow1 defines parameters for PostClick.
type PostClickJSONBodyShow1 = interface{}

// PostClickJSONBody_Show defines parameters for PostClick.
type PostClickJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostClickJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostClickJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostClickJSONBody0 defines parameters for PostClick.
type PostClickJSONBody0 = interface{}

// PostClickJSONBody1 defines parameters for PostClick.
type PostClickJSONBody1 = interface{}

// GetConfigJSONBody defines parameters for GetConfig.
type GetConfigJSONBody struct {
	Adapters *map[string]struct {
		SdkVersion string `json:"sdk_version"`
		Version    string `json:"version"`
	} `json:"adapters,omitempty"`
	App *struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app,omitempty"`
	Device *struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType GetConfigJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *GetConfigJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device,omitempty"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session *struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session,omitempty"`
	Token *string `json:"token,omitempty"`
	User  *struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user,omitempty"`
}

// GetConfigJSONBodyDeviceConnectionType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceConnectionType string

// GetConfigJSONBodyDeviceType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceType string

// PostRewardJSONBody defines parameters for PostReward.
type PostRewardJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostRewardJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostRewardJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostRewardJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostRewardJSONBody_Show `json:"show,omitempty"`
	Token *string                  `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostRewardParamsAdType defines parameters for PostReward.
type PostRewardParamsAdType string

// PostRewardJSONBodyBidBannerFormat defines parameters for PostReward.
type PostRewardJSONBodyBidBannerFormat string

// PostRewardJSONBodyBidBidType defines parameters for PostReward.
type PostRewardJSONBodyBidBidType string

// PostRewardJSONBodyBid0 defines parameters for PostReward.
type PostRewardJSONBodyBid0 = interface{}

// PostRewardJSONBodyBid1 defines parameters for PostReward.
type PostRewardJSONBodyBid1 = interface{}

// PostRewardJSONBody_Bid defines parameters for PostReward.
type PostRewardJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostRewardJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostRewardJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostRewardJSONBodyDeviceConnectionType defines parameters for PostReward.
type PostRewardJSONBodyDeviceConnectionType string

// PostRewardJSONBodyDeviceType defines parameters for PostReward.
type PostRewardJSONBodyDeviceType string

// PostRewardJSONBodyShowBannerFormat defines parameters for PostReward.
type PostRewardJSONBodyShowBannerFormat string

// PostRewardJSONBodyShowBidType defines parameters for PostReward.
type PostRewardJSONBodyShowBidType string

// PostRewardJSONBodyShow0 defines parameters for PostReward.
type PostRewardJSONBodyShow0 = interface{}

// PostRewardJSONBodyShow1 defines parameters for PostReward.
type PostRewardJSONBodyShow1 = interface{}

// PostRewardJSONBody_Show defines parameters for PostReward.
type PostRewardJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostRewardJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostRewardJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostRewardJSONBody0 defines parameters for PostReward.
type PostRewardJSONBody0 = interface{}

// PostRewardJSONBody1 defines parameters for PostReward.
type PostRewardJSONBody1 = interface{}

// PostShowJSONBody defines parameters for PostShow.
type PostShowJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostShowJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostShowJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostShowJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostShowJSONBody_Show `json:"show,omitempty"`
	Token *string                `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostShowParamsAdType defines parameters for PostShow.
type PostShowParamsAdType string

// PostShowJSONBodyBidBannerFormat defines parameters for PostShow.
type PostShowJSONBodyBidBannerFormat string

// PostShowJSONBodyBidBidType defines parameters for PostShow.
type PostShowJSONBodyBidBidType string

// PostShowJSONBodyBid0 defines parameters for PostShow.
type PostShowJSONBodyBid0 = interface{}

// PostShowJSONBodyBid1 defines parameters for PostShow.
type PostShowJSONBodyBid1 = interface{}

// PostShowJSONBody_Bid defines parameters for PostShow.
type PostShowJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostShowJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostShowJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostShowJSONBodyDeviceConnectionType defines parameters for PostShow.
type PostShowJSONBodyDeviceConnectionType string

// PostShowJSONBodyDeviceType defines parameters for PostShow.
type PostShowJSONBodyDeviceType string

// PostShowJSONBodyShowBannerFormat defines parameters for PostShow.
type PostShowJSONBodyShowBannerFormat string

// PostShowJSONBodyShowBidType defines parameters for PostShow.
type PostShowJSONBodyShowBidType string

// PostShowJSONBodyShow0 defines parameters for PostShow.
type PostShowJSONBodyShow0 = interface{}

// PostShowJSONBodyShow1 defines parameters for PostShow.
type PostShowJSONBodyShow1 = interface{}

// PostShowJSONBody_Show defines parameters for PostShow.
type PostShowJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPriceFloor Auction PriceFloor
	AuctionPriceFloor *float32 `json:"auction_price_floor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostShowJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostShowJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`

	// RoundPriceFloor PriceFloor for the bidding round
	RoundPriceFloor *float32 `json:"round_price_floor,omitempty"`
	union           json.RawMessage
}

// PostShowJSONBody0 defines parameters for PostShow.
type PostShowJSONBody0 = interface{}

// PostShowJSONBody1 defines parameters for PostShow.
type PostShowJSONBody1 = interface{}

// PostStatsJSONBody defines parameters for PostStats.
type PostStatsJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostStatsJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostStatsJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Stats PostStatsJSONBody_Stats `json:"stats"`
	Token *string                 `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// PostStatsParamsAdType defines parameters for PostStats.
type PostStatsParamsAdType string

// PostStatsJSONBodyDeviceConnectionType defines parameters for PostStats.
type PostStatsJSONBodyDeviceConnectionType string

// PostStatsJSONBodyDeviceType defines parameters for PostStats.
type PostStatsJSONBodyDeviceType string

// PostStatsJSONBodyStatsAdUnitsStatus defines parameters for PostStats.
type PostStatsJSONBodyStatsAdUnitsStatus string

// PostStatsJSONBodyStatsResultBannerFormat defines parameters for PostStats.
type PostStatsJSONBodyStatsResultBannerFormat string

// PostStatsJSONBodyStatsResultBidType defines parameters for PostStats.
type PostStatsJSONBodyStatsResultBidType string

// PostStatsJSONBodyStatsResultStatus defines parameters for PostStats.
type PostStatsJSONBodyStatsResultStatus string

// PostStatsJSONBodyStats0 defines parameters for PostStats.
type PostStatsJSONBodyStats0 = interface{}

// PostStatsJSONBodyStats1 defines parameters for PostStats.
type PostStatsJSONBodyStats1 = interface{}

// PostStatsJSONBody_Stats defines parameters for PostStats.
type PostStatsJSONBody_Stats struct {
	// AdUnits List of results for each ad unit in the auction
	AdUnits []struct {
		// AdUnitLabel Label of the ad unit
		AdUnitLabel *string `json:"ad_unit_label,omitempty"`

		// AdUnitUid UID of the ad unit
		AdUnitUid *string      `json:"ad_unit_uid,omitempty"`
		BidType   *interface{} `json:"bid_type,omitempty"`

		// DemandId ID of the demand source for the ad unit
		DemandId string `json:"demand_id"`

		// ErrorMessage Error message associated with the ad unit, if applicable
		ErrorMessage *string `json:"error_message,omitempty"`

		// FillFinishTs Timestamp when the ad fill finished
		FillFinishTs *int64 `json:"fill_finish_ts,omitempty"`

		// FillStartTs Timestamp when the ad fill started
		FillStartTs *int64 `json:"fill_start_ts,omitempty"`

		// Price Price associated with the ad unit
		Price *float32 `json:"price,omitempty"`

		// Status Status of the ad unit
		Status PostStatsJSONBodyStatsAdUnitsStatus `json:"status"`

		// TokenFinishTs Timestamp when the token process finished
		TokenFinishTs *int64 `json:"token_finish_ts,omitempty"`

		// TokenStartTs Timestamp when the token process started
		TokenStartTs *int64 `json:"token_start_ts,omitempty"`
	} `json:"ad_units"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Generated unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor PriceFloor for the auction
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Result            struct {
		// AuctionFinishTs Timestamp when the auction finished
		AuctionFinishTs *int64 `json:"auction_finish_ts,omitempty"`

		// AuctionStartTs Timestamp when the auction started
		AuctionStartTs *int64 `json:"auction_start_ts,omitempty"`
		Banner         *struct {
			// Format Format of the banner ad
			Format PostStatsJSONBodyStatsResultBannerFormat `json:"format"`
		} `json:"banner,omitempty"`

		// BidType Type of bid (RTB or CPM)
		BidType *PostStatsJSONBodyStatsResultBidType `json:"bid_type,omitempty"`

		// Interstitial Empty schema for interstitial ad configuration
		Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

		// Price Price of the winning bid
		Price *float32 `json:"price,omitempty"`

		// Rewarded Empty schema for rewarded ad configuration
		Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

		// Status Status of the auction
		Status PostStatsJSONBodyStatsResultStatus `json:"status"`

		// WinnerAdUnitLabel Label of the winning ad unit, if applicable
		WinnerAdUnitLabel *string `json:"winner_ad_unit_label,omitempty"`

		// WinnerAdUnitUid UID of the winning ad unit, if applicable
		WinnerAdUnitUid *string `json:"winner_ad_unit_uid,omitempty"`

		// WinnerDemandId ID of the winning demand source, if applicable
		WinnerDemandId *string `json:"winner_demand_id,omitempty"`
	} `json:"result"`
	union json.RawMessage
}

// GetAuctionJSONRequestBody defines body for GetAuction for application/json ContentType.
type GetAuctionJSONRequestBody GetAuctionJSONBody

// PostClickJSONRequestBody defines body for PostClick for application/json ContentType.
type PostClickJSONRequestBody PostClickJSONBody

// GetConfigJSONRequestBody defines body for GetConfig for application/json ContentType.
type GetConfigJSONRequestBody GetConfigJSONBody

// PostRewardJSONRequestBody defines body for PostReward for application/json ContentType.
type PostRewardJSONRequestBody PostRewardJSONBody

// PostShowJSONRequestBody defines body for PostShow for application/json ContentType.
type PostShowJSONRequestBody PostShowJSONBody

// PostStatsJSONRequestBody defines body for PostStats for application/json ContentType.
type PostStatsJSONRequestBody PostStatsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get OpenAPI specification
	// (GET /openapi.json)
	GetOpenAPISpec(ctx echo.Context) error
	// Auction
	// (POST /v2/auction/{ad_type})
	GetAuction(ctx echo.Context, adType GetAuctionParamsAdType) error
	// Click
	// (POST /v2/click{ad_type})
	PostClick(ctx echo.Context, adType PostClickParamsAdType) error
	// Get config
	// (POST /v2/config)
	GetConfig(ctx echo.Context) error
	// Reward
	// (POST /v2/reward/{ad_type})
	PostReward(ctx echo.Context, adType PostRewardParamsAdType) error
	// Show
	// (POST /v2/show/{ad_type})
	PostShow(ctx echo.Context, adType PostShowParamsAdType) error
	// Stats
	// (POST v2/stats/{ad_type})
	PostStats(ctx echo.Context, adType PostStatsParamsAdType) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetAuction converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType GetAuctionParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuction(ctx, adType)
	return err
}

// PostClick converts echo context to params.
func (w *ServerInterfaceWrapper) PostClick(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostClickParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClick(ctx, adType)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// PostReward converts echo context to params.
func (w *ServerInterfaceWrapper) PostReward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostRewardParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReward(ctx, adType)
	return err
}

// PostShow converts echo context to params.
func (w *ServerInterfaceWrapper) PostShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostShowParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShow(ctx, adType)
	return err
}

// PostStats converts echo context to params.
func (w *ServerInterfaceWrapper) PostStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostStatsParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStats(ctx, adType)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetOpenAPISpec)
	router.POST(baseURL+"/v2/auction/:ad_type", wrapper.GetAuction)
	router.POST(baseURL+"/v2/click:ad_type", wrapper.PostClick)
	router.POST(baseURL+"/v2/config", wrapper.GetConfig)
	router.POST(baseURL+"/v2/reward/:ad_type", wrapper.PostReward)
	router.POST(baseURL+"/v2/show/:ad_type", wrapper.PostShow)
	router.POST(baseURL+"v2/stats/:ad_type", wrapper.PostStats)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
