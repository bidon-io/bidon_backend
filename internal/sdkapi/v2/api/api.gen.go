// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AdType.
const (
	AdTypeBanner       AdType = "banner"
	AdTypeInterstitial AdType = "interstitial"
	AdTypeRewarded     AdType = "rewarded"
)

// Defines values for GetAuctionParamsAdType.
const (
	GetAuctionParamsAdTypeBanner       GetAuctionParamsAdType = "banner"
	GetAuctionParamsAdTypeInterstitial GetAuctionParamsAdType = "interstitial"
	GetAuctionParamsAdTypeRewarded     GetAuctionParamsAdType = "rewarded"
)

// Defines values for GetAuctionJSONBodyAdObjectBannerFormat.
const (
	GetAuctionJSONBodyAdObjectBannerFormatADAPTIVE    GetAuctionJSONBodyAdObjectBannerFormat = "ADAPTIVE"
	GetAuctionJSONBodyAdObjectBannerFormatBANNER      GetAuctionJSONBodyAdObjectBannerFormat = "BANNER"
	GetAuctionJSONBodyAdObjectBannerFormatLEADERBOARD GetAuctionJSONBodyAdObjectBannerFormat = "LEADERBOARD"
	GetAuctionJSONBodyAdObjectBannerFormatMREC        GetAuctionJSONBodyAdObjectBannerFormat = "MREC"
)

// Defines values for GetAuctionJSONBodyAdObjectOrientation.
const (
	LANDSCAPE GetAuctionJSONBodyAdObjectOrientation = "LANDSCAPE"
	PORTRAIT  GetAuctionJSONBodyAdObjectOrientation = "PORTRAIT"
)

// Defines values for GetAuctionJSONBodyDeviceConnectionType.
const (
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR        GetAuctionJSONBodyDeviceConnectionType = "CELLULAR"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR2G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR3G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR4G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULAR5G      GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	GetAuctionJSONBodyDeviceConnectionTypeCELLULARUNKNOWN GetAuctionJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	GetAuctionJSONBodyDeviceConnectionTypeETHERNET        GetAuctionJSONBodyDeviceConnectionType = "ETHERNET"
	GetAuctionJSONBodyDeviceConnectionTypeWIFI            GetAuctionJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for GetAuctionJSONBodyDeviceType.
const (
	GetAuctionJSONBodyDeviceTypePHONE  GetAuctionJSONBodyDeviceType = "PHONE"
	GetAuctionJSONBodyDeviceTypeTABLET GetAuctionJSONBodyDeviceType = "TABLET"
)

// Defines values for PostClickParamsAdType.
const (
	PostClickParamsAdTypeBanner       PostClickParamsAdType = "banner"
	PostClickParamsAdTypeInterstitial PostClickParamsAdType = "interstitial"
	PostClickParamsAdTypeRewarded     PostClickParamsAdType = "rewarded"
)

// Defines values for PostClickJSONBodyBidBannerFormat.
const (
	PostClickJSONBodyBidBannerFormatADAPTIVE    PostClickJSONBodyBidBannerFormat = "ADAPTIVE"
	PostClickJSONBodyBidBannerFormatBANNER      PostClickJSONBodyBidBannerFormat = "BANNER"
	PostClickJSONBodyBidBannerFormatLEADERBOARD PostClickJSONBodyBidBannerFormat = "LEADERBOARD"
	PostClickJSONBodyBidBannerFormatMREC        PostClickJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostClickJSONBodyBidBidType.
const (
	PostClickJSONBodyBidBidTypeCPM PostClickJSONBodyBidBidType = "CPM"
	PostClickJSONBodyBidBidTypeRTB PostClickJSONBodyBidBidType = "RTB"
)

// Defines values for PostClickJSONBodyDeviceConnectionType.
const (
	PostClickJSONBodyDeviceConnectionTypeCELLULAR        PostClickJSONBodyDeviceConnectionType = "CELLULAR"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR2G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR3G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR4G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULAR5G      PostClickJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostClickJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostClickJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostClickJSONBodyDeviceConnectionTypeETHERNET        PostClickJSONBodyDeviceConnectionType = "ETHERNET"
	PostClickJSONBodyDeviceConnectionTypeWIFI            PostClickJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostClickJSONBodyDeviceType.
const (
	PostClickJSONBodyDeviceTypePHONE  PostClickJSONBodyDeviceType = "PHONE"
	PostClickJSONBodyDeviceTypeTABLET PostClickJSONBodyDeviceType = "TABLET"
)

// Defines values for PostClickJSONBodyShowBannerFormat.
const (
	PostClickJSONBodyShowBannerFormatADAPTIVE    PostClickJSONBodyShowBannerFormat = "ADAPTIVE"
	PostClickJSONBodyShowBannerFormatBANNER      PostClickJSONBodyShowBannerFormat = "BANNER"
	PostClickJSONBodyShowBannerFormatLEADERBOARD PostClickJSONBodyShowBannerFormat = "LEADERBOARD"
	PostClickJSONBodyShowBannerFormatMREC        PostClickJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostClickJSONBodyShowBidType.
const (
	PostClickJSONBodyShowBidTypeCPM PostClickJSONBodyShowBidType = "CPM"
	PostClickJSONBodyShowBidTypeRTB PostClickJSONBodyShowBidType = "RTB"
)

// Defines values for GetConfigJSONBodyDeviceConnectionType.
const (
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR        GetConfigJSONBodyDeviceConnectionType = "CELLULAR"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR2G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR3G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR4G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULAR5G      GetConfigJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	GetConfigJSONBodyDeviceConnectionTypeCELLULARUNKNOWN GetConfigJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	GetConfigJSONBodyDeviceConnectionTypeETHERNET        GetConfigJSONBodyDeviceConnectionType = "ETHERNET"
	GetConfigJSONBodyDeviceConnectionTypeWIFI            GetConfigJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for GetConfigJSONBodyDeviceType.
const (
	GetConfigJSONBodyDeviceTypePHONE  GetConfigJSONBodyDeviceType = "PHONE"
	GetConfigJSONBodyDeviceTypeTABLET GetConfigJSONBodyDeviceType = "TABLET"
)

// Defines values for PostLossParamsAdType.
const (
	PostLossParamsAdTypeBanner       PostLossParamsAdType = "banner"
	PostLossParamsAdTypeInterstitial PostLossParamsAdType = "interstitial"
	PostLossParamsAdTypeRewarded     PostLossParamsAdType = "rewarded"
)

// Defines values for PostLossJSONBodyBidBannerFormat.
const (
	PostLossJSONBodyBidBannerFormatADAPTIVE    PostLossJSONBodyBidBannerFormat = "ADAPTIVE"
	PostLossJSONBodyBidBannerFormatBANNER      PostLossJSONBodyBidBannerFormat = "BANNER"
	PostLossJSONBodyBidBannerFormatLEADERBOARD PostLossJSONBodyBidBannerFormat = "LEADERBOARD"
	PostLossJSONBodyBidBannerFormatMREC        PostLossJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostLossJSONBodyBidBidType.
const (
	PostLossJSONBodyBidBidTypeCPM PostLossJSONBodyBidBidType = "CPM"
	PostLossJSONBodyBidBidTypeRTB PostLossJSONBodyBidBidType = "RTB"
)

// Defines values for PostLossJSONBodyDeviceConnectionType.
const (
	PostLossJSONBodyDeviceConnectionTypeCELLULAR        PostLossJSONBodyDeviceConnectionType = "CELLULAR"
	PostLossJSONBodyDeviceConnectionTypeCELLULAR2G      PostLossJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostLossJSONBodyDeviceConnectionTypeCELLULAR3G      PostLossJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostLossJSONBodyDeviceConnectionTypeCELLULAR4G      PostLossJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostLossJSONBodyDeviceConnectionTypeCELLULAR5G      PostLossJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostLossJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostLossJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostLossJSONBodyDeviceConnectionTypeETHERNET        PostLossJSONBodyDeviceConnectionType = "ETHERNET"
	PostLossJSONBodyDeviceConnectionTypeWIFI            PostLossJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostLossJSONBodyDeviceType.
const (
	PostLossJSONBodyDeviceTypePHONE  PostLossJSONBodyDeviceType = "PHONE"
	PostLossJSONBodyDeviceTypeTABLET PostLossJSONBodyDeviceType = "TABLET"
)

// Defines values for PostLossJSONBodyShowBannerFormat.
const (
	PostLossJSONBodyShowBannerFormatADAPTIVE    PostLossJSONBodyShowBannerFormat = "ADAPTIVE"
	PostLossJSONBodyShowBannerFormatBANNER      PostLossJSONBodyShowBannerFormat = "BANNER"
	PostLossJSONBodyShowBannerFormatLEADERBOARD PostLossJSONBodyShowBannerFormat = "LEADERBOARD"
	PostLossJSONBodyShowBannerFormatMREC        PostLossJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostLossJSONBodyShowBidType.
const (
	PostLossJSONBodyShowBidTypeCPM PostLossJSONBodyShowBidType = "CPM"
	PostLossJSONBodyShowBidTypeRTB PostLossJSONBodyShowBidType = "RTB"
)

// Defines values for PostRewardParamsAdType.
const (
	PostRewardParamsAdTypeRewarded PostRewardParamsAdType = "rewarded"
)

// Defines values for PostRewardJSONBodyBidBannerFormat.
const (
	PostRewardJSONBodyBidBannerFormatADAPTIVE    PostRewardJSONBodyBidBannerFormat = "ADAPTIVE"
	PostRewardJSONBodyBidBannerFormatBANNER      PostRewardJSONBodyBidBannerFormat = "BANNER"
	PostRewardJSONBodyBidBannerFormatLEADERBOARD PostRewardJSONBodyBidBannerFormat = "LEADERBOARD"
	PostRewardJSONBodyBidBannerFormatMREC        PostRewardJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostRewardJSONBodyBidBidType.
const (
	PostRewardJSONBodyBidBidTypeCPM PostRewardJSONBodyBidBidType = "CPM"
	PostRewardJSONBodyBidBidTypeRTB PostRewardJSONBodyBidBidType = "RTB"
)

// Defines values for PostRewardJSONBodyDeviceConnectionType.
const (
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR        PostRewardJSONBodyDeviceConnectionType = "CELLULAR"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR2G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR3G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR4G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULAR5G      PostRewardJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostRewardJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostRewardJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostRewardJSONBodyDeviceConnectionTypeETHERNET        PostRewardJSONBodyDeviceConnectionType = "ETHERNET"
	PostRewardJSONBodyDeviceConnectionTypeWIFI            PostRewardJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostRewardJSONBodyDeviceType.
const (
	PostRewardJSONBodyDeviceTypePHONE  PostRewardJSONBodyDeviceType = "PHONE"
	PostRewardJSONBodyDeviceTypeTABLET PostRewardJSONBodyDeviceType = "TABLET"
)

// Defines values for PostRewardJSONBodyShowBannerFormat.
const (
	PostRewardJSONBodyShowBannerFormatADAPTIVE    PostRewardJSONBodyShowBannerFormat = "ADAPTIVE"
	PostRewardJSONBodyShowBannerFormatBANNER      PostRewardJSONBodyShowBannerFormat = "BANNER"
	PostRewardJSONBodyShowBannerFormatLEADERBOARD PostRewardJSONBodyShowBannerFormat = "LEADERBOARD"
	PostRewardJSONBodyShowBannerFormatMREC        PostRewardJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostRewardJSONBodyShowBidType.
const (
	PostRewardJSONBodyShowBidTypeCPM PostRewardJSONBodyShowBidType = "CPM"
	PostRewardJSONBodyShowBidTypeRTB PostRewardJSONBodyShowBidType = "RTB"
)

// Defines values for PostShowParamsAdType.
const (
	PostShowParamsAdTypeBanner       PostShowParamsAdType = "banner"
	PostShowParamsAdTypeInterstitial PostShowParamsAdType = "interstitial"
	PostShowParamsAdTypeRewarded     PostShowParamsAdType = "rewarded"
)

// Defines values for PostShowJSONBodyBidBannerFormat.
const (
	PostShowJSONBodyBidBannerFormatADAPTIVE    PostShowJSONBodyBidBannerFormat = "ADAPTIVE"
	PostShowJSONBodyBidBannerFormatBANNER      PostShowJSONBodyBidBannerFormat = "BANNER"
	PostShowJSONBodyBidBannerFormatLEADERBOARD PostShowJSONBodyBidBannerFormat = "LEADERBOARD"
	PostShowJSONBodyBidBannerFormatMREC        PostShowJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostShowJSONBodyBidBidType.
const (
	PostShowJSONBodyBidBidTypeCPM PostShowJSONBodyBidBidType = "CPM"
	PostShowJSONBodyBidBidTypeRTB PostShowJSONBodyBidBidType = "RTB"
)

// Defines values for PostShowJSONBodyDeviceConnectionType.
const (
	PostShowJSONBodyDeviceConnectionTypeCELLULAR        PostShowJSONBodyDeviceConnectionType = "CELLULAR"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR2G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR3G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR4G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULAR5G      PostShowJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostShowJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostShowJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostShowJSONBodyDeviceConnectionTypeETHERNET        PostShowJSONBodyDeviceConnectionType = "ETHERNET"
	PostShowJSONBodyDeviceConnectionTypeWIFI            PostShowJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostShowJSONBodyDeviceType.
const (
	PostShowJSONBodyDeviceTypePHONE  PostShowJSONBodyDeviceType = "PHONE"
	PostShowJSONBodyDeviceTypeTABLET PostShowJSONBodyDeviceType = "TABLET"
)

// Defines values for PostShowJSONBodyShowBannerFormat.
const (
	PostShowJSONBodyShowBannerFormatADAPTIVE    PostShowJSONBodyShowBannerFormat = "ADAPTIVE"
	PostShowJSONBodyShowBannerFormatBANNER      PostShowJSONBodyShowBannerFormat = "BANNER"
	PostShowJSONBodyShowBannerFormatLEADERBOARD PostShowJSONBodyShowBannerFormat = "LEADERBOARD"
	PostShowJSONBodyShowBannerFormatMREC        PostShowJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostShowJSONBodyShowBidType.
const (
	PostShowJSONBodyShowBidTypeCPM PostShowJSONBodyShowBidType = "CPM"
	PostShowJSONBodyShowBidTypeRTB PostShowJSONBodyShowBidType = "RTB"
)

// Defines values for PostStatsParamsAdType.
const (
	PostStatsParamsAdTypeBanner       PostStatsParamsAdType = "banner"
	PostStatsParamsAdTypeInterstitial PostStatsParamsAdType = "interstitial"
	PostStatsParamsAdTypeRewarded     PostStatsParamsAdType = "rewarded"
)

// Defines values for PostStatsJSONBodyDeviceConnectionType.
const (
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR        PostStatsJSONBodyDeviceConnectionType = "CELLULAR"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR2G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR3G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR4G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULAR5G      PostStatsJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostStatsJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostStatsJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostStatsJSONBodyDeviceConnectionTypeETHERNET        PostStatsJSONBodyDeviceConnectionType = "ETHERNET"
	PostStatsJSONBodyDeviceConnectionTypeWIFI            PostStatsJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostStatsJSONBodyDeviceType.
const (
	PostStatsJSONBodyDeviceTypePHONE  PostStatsJSONBodyDeviceType = "PHONE"
	PostStatsJSONBodyDeviceTypeTABLET PostStatsJSONBodyDeviceType = "TABLET"
)

// Defines values for PostStatsJSONBodyStatsAdUnitsStatus.
const (
	PostStatsJSONBodyStatsAdUnitsStatusEmpty   PostStatsJSONBodyStatsAdUnitsStatus = ""
	PostStatsJSONBodyStatsAdUnitsStatusFAIL    PostStatsJSONBodyStatsAdUnitsStatus = "FAIL"
	PostStatsJSONBodyStatsAdUnitsStatusPENDING PostStatsJSONBodyStatsAdUnitsStatus = "PENDING"
	PostStatsJSONBodyStatsAdUnitsStatusSUCCESS PostStatsJSONBodyStatsAdUnitsStatus = "SUCCESS"
)

// Defines values for PostStatsJSONBodyStatsResultBannerFormat.
const (
	PostStatsJSONBodyStatsResultBannerFormatADAPTIVE    PostStatsJSONBodyStatsResultBannerFormat = "ADAPTIVE"
	PostStatsJSONBodyStatsResultBannerFormatBANNER      PostStatsJSONBodyStatsResultBannerFormat = "BANNER"
	PostStatsJSONBodyStatsResultBannerFormatLEADERBOARD PostStatsJSONBodyStatsResultBannerFormat = "LEADERBOARD"
	PostStatsJSONBodyStatsResultBannerFormatMREC        PostStatsJSONBodyStatsResultBannerFormat = "MREC"
)

// Defines values for PostStatsJSONBodyStatsResultBidType.
const (
	PostStatsJSONBodyStatsResultBidTypeCPM PostStatsJSONBodyStatsResultBidType = "CPM"
	PostStatsJSONBodyStatsResultBidTypeRTB PostStatsJSONBodyStatsResultBidType = "RTB"
)

// Defines values for PostStatsJSONBodyStatsResultStatus.
const (
	PostStatsJSONBodyStatsResultStatusAUCTIONCANCELLED PostStatsJSONBodyStatsResultStatus = "AUCTION_CANCELLED"
	PostStatsJSONBodyStatsResultStatusFAIL             PostStatsJSONBodyStatsResultStatus = "FAIL"
	PostStatsJSONBodyStatsResultStatusSUCCESS          PostStatsJSONBodyStatsResultStatus = "SUCCESS"
)

// Defines values for PostWinParamsAdType.
const (
	PostWinParamsAdTypeBanner       PostWinParamsAdType = "banner"
	PostWinParamsAdTypeInterstitial PostWinParamsAdType = "interstitial"
	PostWinParamsAdTypeRewarded     PostWinParamsAdType = "rewarded"
)

// Defines values for PostWinJSONBodyBidBannerFormat.
const (
	PostWinJSONBodyBidBannerFormatADAPTIVE    PostWinJSONBodyBidBannerFormat = "ADAPTIVE"
	PostWinJSONBodyBidBannerFormatBANNER      PostWinJSONBodyBidBannerFormat = "BANNER"
	PostWinJSONBodyBidBannerFormatLEADERBOARD PostWinJSONBodyBidBannerFormat = "LEADERBOARD"
	PostWinJSONBodyBidBannerFormatMREC        PostWinJSONBodyBidBannerFormat = "MREC"
)

// Defines values for PostWinJSONBodyBidBidType.
const (
	PostWinJSONBodyBidBidTypeCPM PostWinJSONBodyBidBidType = "CPM"
	PostWinJSONBodyBidBidTypeRTB PostWinJSONBodyBidBidType = "RTB"
)

// Defines values for PostWinJSONBodyDeviceConnectionType.
const (
	PostWinJSONBodyDeviceConnectionTypeCELLULAR        PostWinJSONBodyDeviceConnectionType = "CELLULAR"
	PostWinJSONBodyDeviceConnectionTypeCELLULAR2G      PostWinJSONBodyDeviceConnectionType = "CELLULAR_2_G"
	PostWinJSONBodyDeviceConnectionTypeCELLULAR3G      PostWinJSONBodyDeviceConnectionType = "CELLULAR_3_G"
	PostWinJSONBodyDeviceConnectionTypeCELLULAR4G      PostWinJSONBodyDeviceConnectionType = "CELLULAR_4_G"
	PostWinJSONBodyDeviceConnectionTypeCELLULAR5G      PostWinJSONBodyDeviceConnectionType = "CELLULAR_5_G"
	PostWinJSONBodyDeviceConnectionTypeCELLULARUNKNOWN PostWinJSONBodyDeviceConnectionType = "CELLULAR_UNKNOWN"
	PostWinJSONBodyDeviceConnectionTypeETHERNET        PostWinJSONBodyDeviceConnectionType = "ETHERNET"
	PostWinJSONBodyDeviceConnectionTypeWIFI            PostWinJSONBodyDeviceConnectionType = "WIFI"
)

// Defines values for PostWinJSONBodyDeviceType.
const (
	PostWinJSONBodyDeviceTypePHONE  PostWinJSONBodyDeviceType = "PHONE"
	PostWinJSONBodyDeviceTypeTABLET PostWinJSONBodyDeviceType = "TABLET"
)

// Defines values for PostWinJSONBodyShowBannerFormat.
const (
	PostWinJSONBodyShowBannerFormatADAPTIVE    PostWinJSONBodyShowBannerFormat = "ADAPTIVE"
	PostWinJSONBodyShowBannerFormatBANNER      PostWinJSONBodyShowBannerFormat = "BANNER"
	PostWinJSONBodyShowBannerFormatLEADERBOARD PostWinJSONBodyShowBannerFormat = "LEADERBOARD"
	PostWinJSONBodyShowBannerFormatMREC        PostWinJSONBodyShowBannerFormat = "MREC"
)

// Defines values for PostWinJSONBodyShowBidType.
const (
	CPM PostWinJSONBodyShowBidType = "CPM"
	RTB PostWinJSONBodyShowBidType = "RTB"
)

// AdType defines model for AdType.
type AdType string

// XBidonVersion defines model for X-Bidon-Version.
type XBidonVersion = string

// GetAuctionJSONBody defines parameters for GetAuction.
type GetAuctionJSONBody struct {
	AdObject struct {
		// AuctionConfigurationId ID of the auction configuration
		AuctionConfigurationId *int64 `json:"auction_configuration_id,omitempty"`

		// AuctionConfigurationUid UID of the auction configuration
		AuctionConfigurationUid *string `json:"auction_configuration_uid,omitempty"`

		// AuctionId Unique identifier for the auction
		AuctionId *string `json:"auction_id,omitempty"`

		// AuctionKey Generated key for the auction request
		AuctionKey *string `json:"auction_key,omitempty"`

		// AuctionPricefloor PriceFloor for the auction
		AuctionPricefloor float32 `json:"auction_pricefloor"`
		Banner            *struct {
			// Format Format of the banner ad
			Format GetAuctionJSONBodyAdObjectBannerFormat `json:"format"`
		} `json:"banner,omitempty"`

		// Demands Map of demands
		Demands map[string]map[string]interface{} `json:"demands"`

		// Interstitial Empty schema for interstitial ad configuration
		Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

		// Orientation Orientation of the ad
		Orientation *GetAuctionJSONBodyAdObjectOrientation `json:"orientation,omitempty"`

		// Rewarded Empty schema for rewarded ad configuration
		Rewarded *map[string]interface{} `json:"rewarded,omitempty"`
	} `json:"ad_object"`
	Adapters map[string]struct {
		SdkVersion string `json:"sdk_version"`
		Version    string `json:"version"`
	} `json:"adapters"`
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType GetAuctionJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *GetAuctionJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`

	// Test Flag indicating that the request is a test
	Test *bool `json:"test,omitempty"`

	// Tmax Maximum response time for the server before timeout
	Tmax  *int64  `json:"tmax,omitempty"`
	Token *string `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// GetAuctionParams defines parameters for GetAuction.
type GetAuctionParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// GetAuctionParamsAdType defines parameters for GetAuction.
type GetAuctionParamsAdType string

// GetAuctionJSONBodyAdObjectBannerFormat defines parameters for GetAuction.
type GetAuctionJSONBodyAdObjectBannerFormat string

// GetAuctionJSONBodyAdObjectOrientation defines parameters for GetAuction.
type GetAuctionJSONBodyAdObjectOrientation string

// GetAuctionJSONBodyDeviceConnectionType defines parameters for GetAuction.
type GetAuctionJSONBodyDeviceConnectionType string

// GetAuctionJSONBodyDeviceType defines parameters for GetAuction.
type GetAuctionJSONBodyDeviceType string

// PostClickJSONBody defines parameters for PostClick.
type PostClickJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostClickJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostClickJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostClickJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostClickJSONBody_Show `json:"show,omitempty"`
	Token *string                 `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostClickParams defines parameters for PostClick.
type PostClickParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostClickParamsAdType defines parameters for PostClick.
type PostClickParamsAdType string

// PostClickJSONBodyBidBannerFormat defines parameters for PostClick.
type PostClickJSONBodyBidBannerFormat string

// PostClickJSONBodyBidBidType defines parameters for PostClick.
type PostClickJSONBodyBidBidType string

// PostClickJSONBodyBid0 defines parameters for PostClick.
type PostClickJSONBodyBid0 = interface{}

// PostClickJSONBodyBid1 defines parameters for PostClick.
type PostClickJSONBodyBid1 = interface{}

// PostClickJSONBody_Bid defines parameters for PostClick.
type PostClickJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostClickJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostClickJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostClickJSONBodyDeviceConnectionType defines parameters for PostClick.
type PostClickJSONBodyDeviceConnectionType string

// PostClickJSONBodyDeviceType defines parameters for PostClick.
type PostClickJSONBodyDeviceType string

// PostClickJSONBodyShowBannerFormat defines parameters for PostClick.
type PostClickJSONBodyShowBannerFormat string

// PostClickJSONBodyShowBidType defines parameters for PostClick.
type PostClickJSONBodyShowBidType string

// PostClickJSONBodyShow0 defines parameters for PostClick.
type PostClickJSONBodyShow0 = interface{}

// PostClickJSONBodyShow1 defines parameters for PostClick.
type PostClickJSONBodyShow1 = interface{}

// PostClickJSONBody_Show defines parameters for PostClick.
type PostClickJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostClickJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostClickJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostClickJSONBody0 defines parameters for PostClick.
type PostClickJSONBody0 = interface{}

// PostClickJSONBody1 defines parameters for PostClick.
type PostClickJSONBody1 = interface{}

// GetConfigJSONBody defines parameters for GetConfig.
type GetConfigJSONBody struct {
	Adapters *map[string]struct {
		SdkVersion string `json:"sdk_version"`
		Version    string `json:"version"`
	} `json:"adapters,omitempty"`
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType GetConfigJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *GetConfigJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Token *string `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// GetConfigParams defines parameters for GetConfig.
type GetConfigParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// GetConfigJSONBodyDeviceConnectionType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceConnectionType string

// GetConfigJSONBodyDeviceType defines parameters for GetConfig.
type GetConfigJSONBodyDeviceType string

// PostLossJSONBody defines parameters for PostLoss.
type PostLossJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostLossJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostLossJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostLossJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext            *string `json:"ext,omitempty"`
	ExternalWinner struct {
		// DemandId Identifier for the demand source of the external winner
		DemandId *string `json:"demand_id,omitempty"`

		// Price Effective cost per mille for the external winner
		Price float32 `json:"price"`
	} `json:"external_winner"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostLossJSONBody_Show `json:"show,omitempty"`
	Token *string                `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// PostLossParams defines parameters for PostLoss.
type PostLossParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostLossParamsAdType defines parameters for PostLoss.
type PostLossParamsAdType string

// PostLossJSONBodyBidBannerFormat defines parameters for PostLoss.
type PostLossJSONBodyBidBannerFormat string

// PostLossJSONBodyBidBidType defines parameters for PostLoss.
type PostLossJSONBodyBidBidType string

// PostLossJSONBodyBid0 defines parameters for PostLoss.
type PostLossJSONBodyBid0 = interface{}

// PostLossJSONBodyBid1 defines parameters for PostLoss.
type PostLossJSONBodyBid1 = interface{}

// PostLossJSONBody_Bid defines parameters for PostLoss.
type PostLossJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostLossJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostLossJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostLossJSONBodyDeviceConnectionType defines parameters for PostLoss.
type PostLossJSONBodyDeviceConnectionType string

// PostLossJSONBodyDeviceType defines parameters for PostLoss.
type PostLossJSONBodyDeviceType string

// PostLossJSONBodyShowBannerFormat defines parameters for PostLoss.
type PostLossJSONBodyShowBannerFormat string

// PostLossJSONBodyShowBidType defines parameters for PostLoss.
type PostLossJSONBodyShowBidType string

// PostLossJSONBodyShow0 defines parameters for PostLoss.
type PostLossJSONBodyShow0 = interface{}

// PostLossJSONBodyShow1 defines parameters for PostLoss.
type PostLossJSONBodyShow1 = interface{}

// PostLossJSONBody_Show defines parameters for PostLoss.
type PostLossJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostLossJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostLossJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostRewardJSONBody defines parameters for PostReward.
type PostRewardJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostRewardJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostRewardJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostRewardJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostRewardJSONBody_Show `json:"show,omitempty"`
	Token *string                  `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostRewardParams defines parameters for PostReward.
type PostRewardParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostRewardParamsAdType defines parameters for PostReward.
type PostRewardParamsAdType string

// PostRewardJSONBodyBidBannerFormat defines parameters for PostReward.
type PostRewardJSONBodyBidBannerFormat string

// PostRewardJSONBodyBidBidType defines parameters for PostReward.
type PostRewardJSONBodyBidBidType string

// PostRewardJSONBodyBid0 defines parameters for PostReward.
type PostRewardJSONBodyBid0 = interface{}

// PostRewardJSONBodyBid1 defines parameters for PostReward.
type PostRewardJSONBodyBid1 = interface{}

// PostRewardJSONBody_Bid defines parameters for PostReward.
type PostRewardJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostRewardJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostRewardJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostRewardJSONBodyDeviceConnectionType defines parameters for PostReward.
type PostRewardJSONBodyDeviceConnectionType string

// PostRewardJSONBodyDeviceType defines parameters for PostReward.
type PostRewardJSONBodyDeviceType string

// PostRewardJSONBodyShowBannerFormat defines parameters for PostReward.
type PostRewardJSONBodyShowBannerFormat string

// PostRewardJSONBodyShowBidType defines parameters for PostReward.
type PostRewardJSONBodyShowBidType string

// PostRewardJSONBodyShow0 defines parameters for PostReward.
type PostRewardJSONBodyShow0 = interface{}

// PostRewardJSONBodyShow1 defines parameters for PostReward.
type PostRewardJSONBodyShow1 = interface{}

// PostRewardJSONBody_Show defines parameters for PostReward.
type PostRewardJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostRewardJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostRewardJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostRewardJSONBody0 defines parameters for PostReward.
type PostRewardJSONBody0 = interface{}

// PostRewardJSONBody1 defines parameters for PostReward.
type PostRewardJSONBody1 = interface{}

// PostShowJSONBody defines parameters for PostShow.
type PostShowJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostShowJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostShowJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostShowJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostShowJSONBody_Show `json:"show,omitempty"`
	Token *string                `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostShowParams defines parameters for PostShow.
type PostShowParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostShowParamsAdType defines parameters for PostShow.
type PostShowParamsAdType string

// PostShowJSONBodyBidBannerFormat defines parameters for PostShow.
type PostShowJSONBodyBidBannerFormat string

// PostShowJSONBodyBidBidType defines parameters for PostShow.
type PostShowJSONBodyBidBidType string

// PostShowJSONBodyBid0 defines parameters for PostShow.
type PostShowJSONBodyBid0 = interface{}

// PostShowJSONBodyBid1 defines parameters for PostShow.
type PostShowJSONBodyBid1 = interface{}

// PostShowJSONBody_Bid defines parameters for PostShow.
type PostShowJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostShowJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostShowJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostShowJSONBodyDeviceConnectionType defines parameters for PostShow.
type PostShowJSONBodyDeviceConnectionType string

// PostShowJSONBodyDeviceType defines parameters for PostShow.
type PostShowJSONBodyDeviceType string

// PostShowJSONBodyShowBannerFormat defines parameters for PostShow.
type PostShowJSONBodyShowBannerFormat string

// PostShowJSONBodyShowBidType defines parameters for PostShow.
type PostShowJSONBodyShowBidType string

// PostShowJSONBodyShow0 defines parameters for PostShow.
type PostShowJSONBodyShow0 = interface{}

// PostShowJSONBodyShow1 defines parameters for PostShow.
type PostShowJSONBodyShow1 = interface{}

// PostShowJSONBody_Show defines parameters for PostShow.
type PostShowJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostShowJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostShowJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostShowJSONBody0 defines parameters for PostShow.
type PostShowJSONBody0 = interface{}

// PostShowJSONBody1 defines parameters for PostShow.
type PostShowJSONBody1 = interface{}

// PostStatsJSONBody defines parameters for PostStats.
type PostStatsJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostStatsJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostStatsJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Stats PostStatsJSONBody_Stats `json:"stats"`
	Token *string                 `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
}

// PostStatsParams defines parameters for PostStats.
type PostStatsParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostStatsParamsAdType defines parameters for PostStats.
type PostStatsParamsAdType string

// PostStatsJSONBodyDeviceConnectionType defines parameters for PostStats.
type PostStatsJSONBodyDeviceConnectionType string

// PostStatsJSONBodyDeviceType defines parameters for PostStats.
type PostStatsJSONBodyDeviceType string

// PostStatsJSONBodyStatsAdUnitsStatus defines parameters for PostStats.
type PostStatsJSONBodyStatsAdUnitsStatus string

// PostStatsJSONBodyStatsResultBannerFormat defines parameters for PostStats.
type PostStatsJSONBodyStatsResultBannerFormat string

// PostStatsJSONBodyStatsResultBidType defines parameters for PostStats.
type PostStatsJSONBodyStatsResultBidType string

// PostStatsJSONBodyStatsResultStatus defines parameters for PostStats.
type PostStatsJSONBodyStatsResultStatus string

// PostStatsJSONBodyStats0 defines parameters for PostStats.
type PostStatsJSONBodyStats0 = interface{}

// PostStatsJSONBodyStats1 defines parameters for PostStats.
type PostStatsJSONBodyStats1 = interface{}

// PostStatsJSONBody_Stats defines parameters for PostStats.
type PostStatsJSONBody_Stats struct {
	// AdUnits List of results for each ad unit in the auction
	AdUnits []struct {
		// AdUnitLabel Label of the ad unit
		AdUnitLabel *string `json:"ad_unit_label,omitempty"`

		// AdUnitUid UID of the ad unit
		AdUnitUid *string      `json:"ad_unit_uid,omitempty"`
		BidType   *interface{} `json:"bid_type,omitempty"`

		// DemandId ID of the demand source for the ad unit
		DemandId string `json:"demand_id"`

		// ErrorMessage Error message associated with the ad unit, if applicable
		ErrorMessage *string `json:"error_message,omitempty"`

		// FillFinishTs Timestamp when the ad fill finished
		FillFinishTs *int64 `json:"fill_finish_ts,omitempty"`

		// FillStartTs Timestamp when the ad fill started
		FillStartTs *int64 `json:"fill_start_ts,omitempty"`

		// Price Price associated with the ad unit
		Price *float32 `json:"price,omitempty"`

		// Status Status of the ad unit
		Status PostStatsJSONBodyStatsAdUnitsStatus `json:"status"`

		// TokenFinishTs Timestamp when the token process finished
		TokenFinishTs *int64 `json:"token_finish_ts,omitempty"`

		// TokenStartTs Timestamp when the token process started
		TokenStartTs *int64 `json:"token_start_ts,omitempty"`
	} `json:"ad_units"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Generated unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor PriceFloor for the auction
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Result            struct {
		// AuctionFinishTs Timestamp when the auction finished
		AuctionFinishTs *int64 `json:"auction_finish_ts,omitempty"`

		// AuctionStartTs Timestamp when the auction started
		AuctionStartTs *int64 `json:"auction_start_ts,omitempty"`
		Banner         *struct {
			// Format Format of the banner ad
			Format PostStatsJSONBodyStatsResultBannerFormat `json:"format"`
		} `json:"banner,omitempty"`

		// BidType Type of bid (RTB or CPM)
		BidType *PostStatsJSONBodyStatsResultBidType `json:"bid_type,omitempty"`

		// Interstitial Empty schema for interstitial ad configuration
		Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

		// Price Price of the winning bid
		Price *float32 `json:"price,omitempty"`

		// Rewarded Empty schema for rewarded ad configuration
		Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

		// Status Status of the auction
		Status PostStatsJSONBodyStatsResultStatus `json:"status"`

		// WinnerAdUnitLabel Label of the winning ad unit, if applicable
		WinnerAdUnitLabel *string `json:"winner_ad_unit_label,omitempty"`

		// WinnerAdUnitUid UID of the winning ad unit, if applicable
		WinnerAdUnitUid *string `json:"winner_ad_unit_uid,omitempty"`

		// WinnerDemandId ID of the winning demand source, if applicable
		WinnerDemandId *string `json:"winner_demand_id,omitempty"`
	} `json:"result"`
	union json.RawMessage
}

// PostWinJSONBody defines parameters for PostWin.
type PostWinJSONBody struct {
	App struct {
		// Bundle The bundle identifier of the application, typically in reverse domain name notation (e.g., com.example.myapp).
		Bundle string `json:"bundle"`

		// Framework The name of the framework used by the application (e.g., React Native, Flutter, etc.).
		Framework string `json:"framework"`

		// FrameworkVersion The version of the framework used by the application, specifying compatibility.
		FrameworkVersion *string `json:"framework_version,omitempty"`

		// Key A unique key or identifier for the application.
		Key string `json:"key"`

		// PluginVersion The version of the plugin integrated into the application
		PluginVersion *string `json:"plugin_version,omitempty"`

		// SdkVersion The version of the SDK used in the application.
		SdkVersion *string `json:"sdk_version,omitempty"`

		// Skadn An array of SKAdNetwork IDs for ad attribution, used primarily for iOS applications.
		Skadn *[]string `json:"skadn,omitempty"`

		// Version The version of the application, typically following semantic versioning (e.g., 1.0.0).
		Version string `json:"version"`
	} `json:"app"`
	Bid    *PostWinJSONBody_Bid `json:"bid,omitempty"`
	Device struct {
		// Carrier Carrier
		Carrier *string `json:"carrier,omitempty"`

		// ConnectionType Connection Type
		ConnectionType PostWinJSONBodyDeviceConnectionType `json:"connection_type"`
		Geo            *struct {
			// Accuracy Accuracy of the location data
			Accuracy *float32 `json:"accuracy,omitempty"`

			// City City name
			City *string `json:"city,omitempty"`

			// Country Country code or name
			Country *string `json:"country,omitempty"`

			// Lastfix Timestamp of the last location fix in seconds since epoch
			Lastfix *int `json:"lastfix,omitempty"`

			// Lat Latitude of the location
			Lat *float32 `json:"lat,omitempty"`

			// Lon Longitude of the location
			Lon *float32 `json:"lon,omitempty"`

			// Utcoffset UTC offset in minutes
			Utcoffset *int `json:"utcoffset,omitempty"`

			// Zip ZIP or postal code
			Zip *string `json:"zip,omitempty"`
		} `json:"geo,omitempty"`

		// H Height
		H int `json:"h"`

		// Hwv Hardware Version
		Hwv string `json:"hwv"`

		// Js JavaScript support
		Js int `json:"js"`

		// Language Language
		Language string `json:"language"`

		// Make Manufacturer
		Make string `json:"make"`

		// Mccmnc Mobile Country Code and Mobile Network Code
		Mccmnc *string `json:"mccmnc,omitempty"`

		// Model Model
		Model string `json:"model"`

		// Os Operating System
		Os string `json:"os"`

		// Osv Operating System Version
		Osv string `json:"osv"`

		// Ppi Pixels per Inch (PPI)
		Ppi int `json:"ppi"`

		// Pxratio Pixel Ratio
		Pxratio float32 `json:"pxratio"`

		// Type Device Type
		Type *PostWinJSONBodyDeviceType `json:"type,omitempty"`

		// Ua UserAgent
		Ua string `json:"ua"`

		// W Width
		W int `json:"w"`
	} `json:"device"`
	Ext *string `json:"ext,omitempty"`
	Geo *struct {
		// Accuracy Accuracy of the location data
		Accuracy *float32 `json:"accuracy,omitempty"`

		// City City name
		City *string `json:"city,omitempty"`

		// Country Country code or name
		Country *string `json:"country,omitempty"`

		// Lastfix Timestamp of the last location fix in seconds since epoch
		Lastfix *int `json:"lastfix,omitempty"`

		// Lat Latitude of the location
		Lat *float32 `json:"lat,omitempty"`

		// Lon Longitude of the location
		Lon *float32 `json:"lon,omitempty"`

		// Utcoffset UTC offset in minutes
		Utcoffset *int `json:"utcoffset,omitempty"`

		// Zip ZIP or postal code
		Zip *string `json:"zip,omitempty"`
	} `json:"geo,omitempty"`
	Regs *struct {
		// Coppa Indicates if COPPA regulations apply
		Coppa *bool `json:"coppa,omitempty"`

		// EuPrivacy EU privacy string indicating compliance
		EuPrivacy *string `json:"eu_privacy,omitempty"`

		// Gdpr Indicates if GDPR regulations apply
		Gdpr *bool `json:"gdpr,omitempty"`

		// Iab IAB-specific settings or values
		Iab *map[string]interface{} `json:"iab,omitempty"`

		// UsPrivacy US privacy string indicating compliance
		UsPrivacy *string `json:"us_privacy,omitempty"`
	} `json:"regs,omitempty"`
	Segment *struct {
		// Ext An extension field for additional information about the segment.
		Ext *string `json:"ext,omitempty"`
		Id  *string `json:"id,omitempty"`
		Uid *string `json:"uid,omitempty"`
	} `json:"segment,omitempty"`
	Session struct {
		// Battery Battery level percentage
		Battery float32 `json:"battery"`

		// CpuUsage CPU usage percentage
		CpuUsage float32 `json:"cpu_usage"`

		// Id Unique identifier for the session
		Id openapi_types.UUID `json:"id"`

		// LaunchMonotonicTs Monotonic timestamp of the session launch
		LaunchMonotonicTs int `json:"launch_monotonic_ts"`

		// LaunchTs Timestamp of the session launch
		LaunchTs int `json:"launch_ts"`

		// MemoryWarningsMonotonicTs Monotonic timestamps when memory warnings occurred
		MemoryWarningsMonotonicTs []int `json:"memory_warnings_monotonic_ts"`

		// MemoryWarningsTs Timestamps when memory warnings occurred
		MemoryWarningsTs []int `json:"memory_warnings_ts"`

		// MonotonicTs Current monotonic timestamp of the session
		MonotonicTs int `json:"monotonic_ts"`

		// RamSize Total size of RAM
		RamSize int `json:"ram_size"`

		// RamUsed Amount of RAM used
		RamUsed int `json:"ram_used"`

		// StartMonotonicTs Monotonic timestamp of the session start
		StartMonotonicTs int `json:"start_monotonic_ts"`

		// StartTs Timestamp of the session start
		StartTs int `json:"start_ts"`

		// StorageFree Free storage space available
		StorageFree *int `json:"storage_free,omitempty"`

		// StorageUsed Used storage space
		StorageUsed *int `json:"storage_used,omitempty"`

		// Ts Current timestamp of the session
		Ts int `json:"ts"`
	} `json:"session"`
	Show  *PostWinJSONBody_Show `json:"show,omitempty"`
	Token *string               `json:"token,omitempty"`
	User  struct {
		// Consent Consent settings or preferences
		Consent *map[string]interface{} `json:"consent,omitempty"`

		// Coppa Indicates if COPPA (Children's Online Privacy Protection Act) applies
		Coppa *bool `json:"coppa,omitempty"`

		// Idfa Identifier for Advertisers (IDFA)
		Idfa *openapi_types.UUID `json:"idfa,omitempty"`

		// Idfv Identifier for Vendors (IDFV)
		Idfv *openapi_types.UUID `json:"idfv,omitempty"`

		// Idg Generic identifier (IDG)
		Idg *openapi_types.UUID `json:"idg,omitempty"`

		// TrackingAuthorizationStatus Status of tracking authorization
		TrackingAuthorizationStatus string `json:"tracking_authorization_status"`
	} `json:"user"`
	union json.RawMessage
}

// PostWinParams defines parameters for PostWin.
type PostWinParams struct {
	// XBidonVersion Version of the Bidon SDK
	XBidonVersion XBidonVersion `json:"X-Bidon-Version"`
}

// PostWinParamsAdType defines parameters for PostWin.
type PostWinParamsAdType string

// PostWinJSONBodyBidBannerFormat defines parameters for PostWin.
type PostWinJSONBodyBidBannerFormat string

// PostWinJSONBodyBidBidType defines parameters for PostWin.
type PostWinJSONBodyBidBidType string

// PostWinJSONBodyBid0 defines parameters for PostWin.
type PostWinJSONBodyBid0 = interface{}

// PostWinJSONBodyBid1 defines parameters for PostWin.
type PostWinJSONBodyBid1 = interface{}

// PostWinJSONBody_Bid defines parameters for PostWin.
type PostWinJSONBody_Bid struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostWinJSONBodyBidBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostWinJSONBodyBidBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostWinJSONBodyDeviceConnectionType defines parameters for PostWin.
type PostWinJSONBodyDeviceConnectionType string

// PostWinJSONBodyDeviceType defines parameters for PostWin.
type PostWinJSONBodyDeviceType string

// PostWinJSONBodyShowBannerFormat defines parameters for PostWin.
type PostWinJSONBodyShowBannerFormat string

// PostWinJSONBodyShowBidType defines parameters for PostWin.
type PostWinJSONBodyShowBidType string

// PostWinJSONBodyShow0 defines parameters for PostWin.
type PostWinJSONBodyShow0 = interface{}

// PostWinJSONBodyShow1 defines parameters for PostWin.
type PostWinJSONBodyShow1 = interface{}

// PostWinJSONBody_Show defines parameters for PostWin.
type PostWinJSONBody_Show struct {
	// AdUnitId Deprecated: use ad_unit_uid instead
	AdUnitId *string `json:"ad_unit_id,omitempty"`

	// AdUnitLabel Label of the ad unit
	AdUnitLabel *string `json:"ad_unit_label,omitempty"`

	// AdUnitUid UID of the ad unit
	AdUnitUid *string `json:"ad_unit_uid,omitempty"`

	// AuctionConfigurationId ID of the auction configuration
	AuctionConfigurationId *int64 `json:"auction_configuration_id"`

	// AuctionConfigurationUid UID of the auction configuration
	AuctionConfigurationUid *string `json:"auction_configuration_uid"`

	// AuctionId Unique identifier for the auction
	AuctionId string `json:"auction_id"`

	// AuctionPricefloor Auction PriceFloor
	AuctionPricefloor *float32 `json:"auction_pricefloor,omitempty"`
	Banner            *struct {
		// Format Format of the banner ad
		Format PostWinJSONBodyShowBannerFormat `json:"format"`
	} `json:"banner,omitempty"`

	// BidType Type of bid (RTB or CPM)
	BidType *PostWinJSONBodyShowBidType `json:"bid_type,omitempty"`

	// DemandId ID of the demand source
	DemandId string `json:"demand_id"`

	// Ecpm Estimated cost per mille, deprecated: use price instead
	Ecpm *float32 `json:"ecpm"`

	// ImpId Impression ID
	ImpId *string `json:"imp_id,omitempty"`

	// Interstitial Empty schema for interstitial ad configuration
	Interstitial *map[string]interface{} `json:"interstitial,omitempty"`

	// LineItemUid Deprecated: use ad_unit_uid instead
	LineItemUid *string `json:"line_item_uid,omitempty"`

	// Price Price of the bid
	Price *float32 `json:"price"`

	// Rewarded Empty schema for rewarded ad configuration
	Rewarded *map[string]interface{} `json:"rewarded,omitempty"`

	// RoundId Round ID for the bidding process
	RoundId *string `json:"round_id,omitempty"`

	// RoundIdx Index of the round in the bidding process
	RoundIdx *int `json:"round_idx,omitempty"`
	union    json.RawMessage
}

// PostWinJSONBody0 defines parameters for PostWin.
type PostWinJSONBody0 = interface{}

// PostWinJSONBody1 defines parameters for PostWin.
type PostWinJSONBody1 = interface{}

// GetAuctionJSONRequestBody defines body for GetAuction for application/json ContentType.
type GetAuctionJSONRequestBody GetAuctionJSONBody

// PostClickJSONRequestBody defines body for PostClick for application/json ContentType.
type PostClickJSONRequestBody PostClickJSONBody

// GetConfigJSONRequestBody defines body for GetConfig for application/json ContentType.
type GetConfigJSONRequestBody GetConfigJSONBody

// PostLossJSONRequestBody defines body for PostLoss for application/json ContentType.
type PostLossJSONRequestBody PostLossJSONBody

// PostRewardJSONRequestBody defines body for PostReward for application/json ContentType.
type PostRewardJSONRequestBody PostRewardJSONBody

// PostShowJSONRequestBody defines body for PostShow for application/json ContentType.
type PostShowJSONRequestBody PostShowJSONBody

// PostStatsJSONRequestBody defines body for PostStats for application/json ContentType.
type PostStatsJSONRequestBody PostStatsJSONBody

// PostWinJSONRequestBody defines body for PostWin for application/json ContentType.
type PostWinJSONRequestBody PostWinJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get OpenAPI specification
	// (GET /openapi.json)
	GetOpenAPISpec(ctx echo.Context) error
	// Auction
	// (POST /v2/auction/{ad_type})
	GetAuction(ctx echo.Context, adType GetAuctionParamsAdType, params GetAuctionParams) error
	// Click
	// (POST /v2/click/{ad_type})
	PostClick(ctx echo.Context, adType PostClickParamsAdType, params PostClickParams) error
	// Get config
	// (POST /v2/config)
	GetConfig(ctx echo.Context, params GetConfigParams) error
	// Loss
	// (POST /v2/loss/{ad_type})
	PostLoss(ctx echo.Context, adType PostLossParamsAdType, params PostLossParams) error
	// Reward
	// (POST /v2/reward/{ad_type})
	PostReward(ctx echo.Context, adType PostRewardParamsAdType, params PostRewardParams) error
	// Show
	// (POST /v2/show/{ad_type})
	PostShow(ctx echo.Context, adType PostShowParamsAdType, params PostShowParams) error
	// Stats
	// (POST /v2/stats/{ad_type})
	PostStats(ctx echo.Context, adType PostStatsParamsAdType, params PostStatsParams) error
	// Win
	// (POST /v2/win/{ad_type})
	PostWin(ctx echo.Context, adType PostWinParamsAdType, params PostWinParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOpenAPISpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenAPISpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenAPISpec(ctx)
	return err
}

// GetAuction converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType GetAuctionParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuction(ctx, adType, params)
	return err
}

// PostClick converts echo context to params.
func (w *ServerInterfaceWrapper) PostClick(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostClickParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostClickParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostClick(ctx, adType, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx, params)
	return err
}

// PostLoss converts echo context to params.
func (w *ServerInterfaceWrapper) PostLoss(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostLossParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLossParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLoss(ctx, adType, params)
	return err
}

// PostReward converts echo context to params.
func (w *ServerInterfaceWrapper) PostReward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostRewardParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRewardParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReward(ctx, adType, params)
	return err
}

// PostShow converts echo context to params.
func (w *ServerInterfaceWrapper) PostShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostShowParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostShowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShow(ctx, adType, params)
	return err
}

// PostStats converts echo context to params.
func (w *ServerInterfaceWrapper) PostStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostStatsParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostStatsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStats(ctx, adType, params)
	return err
}

// PostWin converts echo context to params.
func (w *ServerInterfaceWrapper) PostWin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ad_type" -------------
	var adType PostWinParamsAdType

	err = runtime.BindStyledParameterWithOptions("simple", "ad_type", ctx.Param("ad_type"), &adType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ad_type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostWinParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bidon-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bidon-Version")]; found {
		var XBidonVersion XBidonVersion
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bidon-Version, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bidon-Version", valueList[0], &XBidonVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bidon-Version: %s", err))
		}

		params.XBidonVersion = XBidonVersion
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bidon-Version is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWin(ctx, adType, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/openapi.json", wrapper.GetOpenAPISpec)
	router.POST(baseURL+"/v2/auction/:ad_type", wrapper.GetAuction)
	router.POST(baseURL+"/v2/click/:ad_type", wrapper.PostClick)
	router.POST(baseURL+"/v2/config", wrapper.GetConfig)
	router.POST(baseURL+"/v2/loss/:ad_type", wrapper.PostLoss)
	router.POST(baseURL+"/v2/reward/:ad_type", wrapper.PostReward)
	router.POST(baseURL+"/v2/show/:ad_type", wrapper.PostShow)
	router.POST(baseURL+"/v2/stats/:ad_type", wrapper.PostStats)
	router.POST(baseURL+"/v2/win/:ad_type", wrapper.PostWin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rtVut9v9XwAAAP//3kAwWSluAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
