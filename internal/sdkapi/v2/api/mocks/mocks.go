// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bidon-io/bidon-backend/internal/sdkapi/v2/api"
	"github.com/labstack/echo/v4"
	"sync"
)

// Ensure, that HandlerMock does implement api.Handler.
// If this is not the case, regenerate this file with moq.
var _ api.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of api.Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked api.Handler
//		mockedHandler := &HandlerMock{
//			HandleFunc: func(c echo.Context) error {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedHandler in code that requires api.Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(c echo.Context) error {
	if mock.HandleFunc == nil {
		panic("HandlerMock.HandleFunc: method is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(c)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
