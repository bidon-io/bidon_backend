// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bidon-io/bidon-backend/internal/ad"
	"github.com/bidon-io/bidon-backend/internal/adapter"
	"github.com/bidon-io/bidon-backend/internal/auction"
	"github.com/bidon-io/bidon-backend/internal/auctionv2"
	"sync"
)

// Ensure, that ConfigFetcherMock does implement auctionv2.ConfigFetcher.
// If this is not the case, regenerate this file with moq.
var _ auctionv2.ConfigFetcher = &ConfigFetcherMock{}

// ConfigFetcherMock is a mock implementation of auctionv2.ConfigFetcher.
//
//	func TestSomethingThatUsesConfigFetcher(t *testing.T) {
//
//		// make and configure a mocked auctionv2.ConfigFetcher
//		mockedConfigFetcher := &ConfigFetcherMock{
//			FetchByUIDCachedFunc: func(ctx context.Context, appId int64, id string, uid string) *auction.Config {
//				panic("mock out the FetchByUIDCached method")
//			},
//			MatchFunc: func(ctx context.Context, appID int64, adType ad.Type, segmentID int64, version string) (*auction.Config, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedConfigFetcher in code that requires auctionv2.ConfigFetcher
//		// and then make assertions.
//
//	}
type ConfigFetcherMock struct {
	// FetchByUIDCachedFunc mocks the FetchByUIDCached method.
	FetchByUIDCachedFunc func(ctx context.Context, appId int64, id string, uid string) *auction.Config

	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, appID int64, adType ad.Type, segmentID int64, version string) (*auction.Config, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchByUIDCached holds details about calls to the FetchByUIDCached method.
		FetchByUIDCached []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppId is the appId argument value.
			AppId int64
			// ID is the id argument value.
			ID string
			// UID is the uid argument value.
			UID string
		}
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdType is the adType argument value.
			AdType ad.Type
			// SegmentID is the segmentID argument value.
			SegmentID int64
			// Version is the version argument value.
			Version string
		}
	}
	lockFetchByUIDCached sync.RWMutex
	lockMatch            sync.RWMutex
}

// FetchByUIDCached calls FetchByUIDCachedFunc.
func (mock *ConfigFetcherMock) FetchByUIDCached(ctx context.Context, appId int64, id string, uid string) *auction.Config {
	if mock.FetchByUIDCachedFunc == nil {
		panic("ConfigFetcherMock.FetchByUIDCachedFunc: method is nil but ConfigFetcher.FetchByUIDCached was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		AppId int64
		ID    string
		UID   string
	}{
		Ctx:   ctx,
		AppId: appId,
		ID:    id,
		UID:   uid,
	}
	mock.lockFetchByUIDCached.Lock()
	mock.calls.FetchByUIDCached = append(mock.calls.FetchByUIDCached, callInfo)
	mock.lockFetchByUIDCached.Unlock()
	return mock.FetchByUIDCachedFunc(ctx, appId, id, uid)
}

// FetchByUIDCachedCalls gets all the calls that were made to FetchByUIDCached.
// Check the length with:
//
//	len(mockedConfigFetcher.FetchByUIDCachedCalls())
func (mock *ConfigFetcherMock) FetchByUIDCachedCalls() []struct {
	Ctx   context.Context
	AppId int64
	ID    string
	UID   string
} {
	var calls []struct {
		Ctx   context.Context
		AppId int64
		ID    string
		UID   string
	}
	mock.lockFetchByUIDCached.RLock()
	calls = mock.calls.FetchByUIDCached
	mock.lockFetchByUIDCached.RUnlock()
	return calls
}

// Match calls MatchFunc.
func (mock *ConfigFetcherMock) Match(ctx context.Context, appID int64, adType ad.Type, segmentID int64, version string) (*auction.Config, error) {
	if mock.MatchFunc == nil {
		panic("ConfigFetcherMock.MatchFunc: method is nil but ConfigFetcher.Match was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
		Version   string
	}{
		Ctx:       ctx,
		AppID:     appID,
		AdType:    adType,
		SegmentID: segmentID,
		Version:   version,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(ctx, appID, adType, segmentID, version)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedConfigFetcher.MatchCalls())
func (mock *ConfigFetcherMock) MatchCalls() []struct {
	Ctx       context.Context
	AppID     int64
	AdType    ad.Type
	SegmentID int64
	Version   string
} {
	var calls []struct {
		Ctx       context.Context
		AppID     int64
		AdType    ad.Type
		SegmentID int64
		Version   string
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}

// Ensure, that AuctionBuilderMock does implement auctionv2.AuctionBuilder.
// If this is not the case, regenerate this file with moq.
var _ auctionv2.AuctionBuilder = &AuctionBuilderMock{}

// AuctionBuilderMock is a mock implementation of auctionv2.AuctionBuilder.
//
//	func TestSomethingThatUsesAuctionBuilder(t *testing.T) {
//
//		// make and configure a mocked auctionv2.AuctionBuilder
//		mockedAuctionBuilder := &AuctionBuilderMock{
//			BuildFunc: func(ctx context.Context, params *auctionv2.BuildParams) (*auctionv2.AuctionResult, error) {
//				panic("mock out the Build method")
//			},
//		}
//
//		// use mockedAuctionBuilder in code that requires auctionv2.AuctionBuilder
//		// and then make assertions.
//
//	}
type AuctionBuilderMock struct {
	// BuildFunc mocks the Build method.
	BuildFunc func(ctx context.Context, params *auctionv2.BuildParams) (*auctionv2.AuctionResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// Build holds details about calls to the Build method.
		Build []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *auctionv2.BuildParams
		}
	}
	lockBuild sync.RWMutex
}

// Build calls BuildFunc.
func (mock *AuctionBuilderMock) Build(ctx context.Context, params *auctionv2.BuildParams) (*auctionv2.AuctionResult, error) {
	if mock.BuildFunc == nil {
		panic("AuctionBuilderMock.BuildFunc: method is nil but AuctionBuilder.Build was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *auctionv2.BuildParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockBuild.Lock()
	mock.calls.Build = append(mock.calls.Build, callInfo)
	mock.lockBuild.Unlock()
	return mock.BuildFunc(ctx, params)
}

// BuildCalls gets all the calls that were made to Build.
// Check the length with:
//
//	len(mockedAuctionBuilder.BuildCalls())
func (mock *AuctionBuilderMock) BuildCalls() []struct {
	Ctx    context.Context
	Params *auctionv2.BuildParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *auctionv2.BuildParams
	}
	mock.lockBuild.RLock()
	calls = mock.calls.Build
	mock.lockBuild.RUnlock()
	return calls
}

// Ensure, that AdapterKeysFetcherMock does implement auctionv2.AdapterKeysFetcher.
// If this is not the case, regenerate this file with moq.
var _ auctionv2.AdapterKeysFetcher = &AdapterKeysFetcherMock{}

// AdapterKeysFetcherMock is a mock implementation of auctionv2.AdapterKeysFetcher.
//
//	func TestSomethingThatUsesAdapterKeysFetcher(t *testing.T) {
//
//		// make and configure a mocked auctionv2.AdapterKeysFetcher
//		mockedAdapterKeysFetcher := &AdapterKeysFetcherMock{
//			FetchEnabledAdapterKeysFunc: func(ctx context.Context, appID int64, adapterKeys []adapter.Key) ([]adapter.Key, error) {
//				panic("mock out the FetchEnabledAdapterKeys method")
//			},
//		}
//
//		// use mockedAdapterKeysFetcher in code that requires auctionv2.AdapterKeysFetcher
//		// and then make assertions.
//
//	}
type AdapterKeysFetcherMock struct {
	// FetchEnabledAdapterKeysFunc mocks the FetchEnabledAdapterKeys method.
	FetchEnabledAdapterKeysFunc func(ctx context.Context, appID int64, adapterKeys []adapter.Key) ([]adapter.Key, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchEnabledAdapterKeys holds details about calls to the FetchEnabledAdapterKeys method.
		FetchEnabledAdapterKeys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AppID is the appID argument value.
			AppID int64
			// AdapterKeys is the adapterKeys argument value.
			AdapterKeys []adapter.Key
		}
	}
	lockFetchEnabledAdapterKeys sync.RWMutex
}

// FetchEnabledAdapterKeys calls FetchEnabledAdapterKeysFunc.
func (mock *AdapterKeysFetcherMock) FetchEnabledAdapterKeys(ctx context.Context, appID int64, adapterKeys []adapter.Key) ([]adapter.Key, error) {
	if mock.FetchEnabledAdapterKeysFunc == nil {
		panic("AdapterKeysFetcherMock.FetchEnabledAdapterKeysFunc: method is nil but AdapterKeysFetcher.FetchEnabledAdapterKeys was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
	}{
		Ctx:         ctx,
		AppID:       appID,
		AdapterKeys: adapterKeys,
	}
	mock.lockFetchEnabledAdapterKeys.Lock()
	mock.calls.FetchEnabledAdapterKeys = append(mock.calls.FetchEnabledAdapterKeys, callInfo)
	mock.lockFetchEnabledAdapterKeys.Unlock()
	return mock.FetchEnabledAdapterKeysFunc(ctx, appID, adapterKeys)
}

// FetchEnabledAdapterKeysCalls gets all the calls that were made to FetchEnabledAdapterKeys.
// Check the length with:
//
//	len(mockedAdapterKeysFetcher.FetchEnabledAdapterKeysCalls())
func (mock *AdapterKeysFetcherMock) FetchEnabledAdapterKeysCalls() []struct {
	Ctx         context.Context
	AppID       int64
	AdapterKeys []adapter.Key
} {
	var calls []struct {
		Ctx         context.Context
		AppID       int64
		AdapterKeys []adapter.Key
	}
	mock.lockFetchEnabledAdapterKeys.RLock()
	calls = mock.calls.FetchEnabledAdapterKeys
	mock.lockFetchEnabledAdapterKeys.RUnlock()
	return calls
}
