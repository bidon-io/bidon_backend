//*
// The Placement group includes objects that define the set of allowed ads for a given impression.
// This can include mechanical information (e.g., sizes, supported mime types and other rendering
// options), placement details and positioning, various restrictions lists (e.g., advertiser
// domains, content categories), and more.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: com/iabtechlab/adcom/v1/placement/placement.proto

package placement

import (
	_ "github.com/bidon-io/bidon-backend/pkg/proto/com/iabtechlab/adcom/v1/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// This object represents the properties of a placement and the characteristics of ads permitted to
// be rendering within them. Placements of all types begin with this object as their root. It
// contains one or more subtype objects (i.e., "display", "video", "audio") that define the kinds of
// media permitted as well as media specific placement behaviors.
//
// The other attributes in this object apply to all aspects and substructures of the placement
// (i.e., the same block lists, language, secure status, etc. apply to all media types and native
// assets as applicable).
type Placement struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Identifier for specific ad placement or ad tag; unique within a distribution channel.
	Tagid *string `protobuf:"bytes,1,opt,name=tagid" json:"tagid,omitempty"`
	// Indicates if server-side ad insertion (e.g., stitching an ad into an audio or video stream) is
	// in use and the impact of this on asset and tracker retrieval, where 1 = all client-side,
	// 2 = assets stitched server-side but tracking pixels fired client-side, 3 = all server-side.
	// Default = 0.
	Ssai *int32 `protobuf:"varint,2,opt,name=ssai" json:"ssai,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible for rendering ad (typically
	// video, audio, or mobile); used by some ad servers to customize ad code by partner.
	Sdk *string `protobuf:"bytes,3,opt,name=sdk" json:"sdk,omitempty"`
	// Version of the SDK specified in the "sdk" attribute.
	Sdkver *string `protobuf:"bytes,4,opt,name=sdkver" json:"sdkver,omitempty"`
	// Indicates if this is a rewarded placement, where 0 = no, 1 = yes. Default = 0.
	Reward *bool `protobuf:"varint,5,opt,name=reward" json:"reward,omitempty"`
	// Allowlist of permitted languages of the creative using ISO-639-1-alpha-2. In practice,
	// vendors using this object may elect an alternate standard (e.g., BCP-47) in which case
	// this must be communicated a priori. Omission of this attribute indicates there are no
	// restrictions.
	Wlang []string `protobuf:"bytes,6,rep,name=wlang" json:"wlang,omitempty"`
	// Flag to indicate if the creative is secure (i.e., uses HTTPS for all assets and markup),
	// where 0 = no, 1 = yes. There is no default and thus if omitted, the secure state is
	// unknown. However, as a practical matter, the safe assumption is to treat unknown as non-secure.
	Secure *int32 `protobuf:"varint,7,opt,name=secure" json:"secure,omitempty"`
	// Indicates if including markup is supported (i.e., the various "ad" attributes throughout the
	// "Placement" structure), where 0 = no, 1 = yes.
	Admx *int32 `protobuf:"varint,8,opt,name=admx" json:"admx,omitempty"`
	// Indicates if retrieving markup via URL reference is supported (i.e., the various "curl"
	// attributes throughout the "placement" structure), where 0 = no, 1 = yes.
	Curlx *int32 `protobuf:"varint,9,opt,name=curlx" json:"curlx,omitempty"`
	// Placement Subtype Object that indicates that this may be a display placement and provides
	// additional detail related thereto.
	// Refer to Object: DisplayPlacement.
	// * At least one placement subtype is required.
	Display *Placement_DisplayPlacement `protobuf:"bytes,10,opt,name=display" json:"display,omitempty"`
	// Placement Subtype Object that indicates that this may be a video placement and provides
	// additional detail related thereto.
	// Refer to Object: VideoPlacement.
	// * At least one placement subtype is required.
	Video *Placement_VideoPlacement `protobuf:"bytes,11,opt,name=video" json:"video,omitempty"`
	// Placement Subtype Object that indicates that this may be an audio placement and provides
	// additional detail related thereto.
	// Refer to Object: AudioPlacement.
	// * At least one placement subtype is required.
	Audio *Placement_AudioPlacement `protobuf:"bytes,12,opt,name=audio" json:"audio,omitempty"`
}

func (x *Placement) Reset() {
	*x = Placement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement) ProtoMessage() {}

func (x *Placement) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement.ProtoReflect.Descriptor instead.
func (*Placement) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0}
}

func (x *Placement) GetTagid() string {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return ""
}

func (x *Placement) GetSsai() int32 {
	if x != nil && x.Ssai != nil {
		return *x.Ssai
	}
	return 0
}

func (x *Placement) GetSdk() string {
	if x != nil && x.Sdk != nil {
		return *x.Sdk
	}
	return ""
}

func (x *Placement) GetSdkver() string {
	if x != nil && x.Sdkver != nil {
		return *x.Sdkver
	}
	return ""
}

func (x *Placement) GetReward() bool {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return false
}

func (x *Placement) GetWlang() []string {
	if x != nil {
		return x.Wlang
	}
	return nil
}

func (x *Placement) GetSecure() int32 {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return 0
}

func (x *Placement) GetAdmx() int32 {
	if x != nil && x.Admx != nil {
		return *x.Admx
	}
	return 0
}

func (x *Placement) GetCurlx() int32 {
	if x != nil && x.Curlx != nil {
		return *x.Curlx
	}
	return 0
}

func (x *Placement) GetDisplay() *Placement_DisplayPlacement {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Placement) GetVideo() *Placement_VideoPlacement {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Placement) GetAudio() *Placement_AudioPlacement {
	if x != nil {
		return x.Audio
	}
	return nil
}

// *
// This object signals that the placement may be a display placement. It provides additional
// detail about permitted display ads including simple banners, AMPHTML (i.e., Accelerated Mobile
// Pages), and native.
type Placement_DisplayPlacement struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Placement position on screen.
	// Refer to List: com.iabtechlab.adcom.v1.enums.PlacementPosition.
	Pos *int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	// Inidicates if this is an interstitial placement, where 0 = no, 1 = yes. Default 0.
	Instl *int32 `protobuf:"varint,2,opt,name=instl" json:"instl,omitempty"`
	// Indicates if the placement will be loaded into an iframe or not, where 0 = unfriendly iframe
	// or unknown, 1 = top frame, friendly iframe, or SafeFrame. A value of "1" can be understood to
	// mean that expandable ads are technically capable of being delivered.
	Topframe *int32 `protobuf:"varint,3,opt,name=topframe" json:"topframe,omitempty"`
	// Array of iframe busters supported by this placement. The meaning of strings in this attribute
	// must be coordinated a priori among vendors.
	Ifrbust []string `protobuf:"bytes,4,rep,name=ifrbust" json:"ifrbust,omitempty"`
	// Indicates the click type of this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.ClickType.
	Clktype *int32 `protobuf:"varint,5,opt,name=clktype" json:"clktype,omitempty"`
	// AMPHTML rendering treatment for AMP ads in this placement, where 1 = early loading,
	// 2 = standard loading.
	Ampren *int32 `protobuf:"varint,6,opt,name=ampren" json:"ampren,omitempty"`
	// Recommended. The display placement type.
	// Refer to List: com.iabtechlab.adcom.v1.enums.DisplayPlacementType.
	Ptype *int32 `protobuf:"varint,7,opt,name=ptype" json:"ptype,omitempty"`
	// Recommended. The context of the placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.DisplayContextType.
	Context *int32 `protobuf:"varint,8,opt,name=context" json:"context,omitempty"`
	// Array of supported mime types (e.g., "image/jpeg", "image/gif"). If omitted, all types are
	// assumed.
	Mime []string `protobuf:"bytes,9,rep,name=mime" json:"mime,omitempty"`
	// List of supported APIs. If an API is not explicitly listed, it is assumed to be unsupported.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,10,rep,name=api" json:"api,omitempty"`
	// Creative subtypes permitted.
	// Refer to List: com.iabtechlab.adcom.v1.enums.Creative.DisplayType.
	Ctype []int32 `protobuf:"varint,11,rep,name=ctype" json:"ctype,omitempty"`
	// Width of the placement in units specified by "unit". Note that this size applies to the
	// placement itself; permitted creative sizes are specified elsewhere (e.g. "DisplayFormat",
	// "ImageAssetFormat", etc.).
	W *int32 `protobuf:"varint,12,opt,name=w" json:"w,omitempty"`
	// Width of the placement in units specified by "unit". Note that this size applies to the
	// placement itself; permitted creative sizes are specified elsewhere (e.g., "DisplayFormat",
	// "ImageAssetFormat", etc.).
	H *int32 `protobuf:"varint,13,opt,name=h" json:"h,omitempty"`
	// Unit of size used for placement size (i.e., "w" and "h" attributes). Default = 1.
	// Refer to List: com.iabtechlab.adcom.v1.enums.SizeUnit.
	Unit *int32 `protobuf:"varint,14,opt,name=unit,def=1" json:"unit,omitempty"`
	// Indicator of whether or not the placement supports a buyer-specific privacy notice URL,
	// where false = no, true = yes. Default is false.
	Priv *bool `protobuf:"varint,15,opt,name=priv" json:"priv,omitempty"`
	// Array of objects that govern the attributes (e.g., sizes) of a banner display placement.
	// Note that including both "displayfmt" and "nativefmt" is not recommended.
	// Refer to Object: DisplayFormat.
	Displayfmt []*Placement_DisplayPlacement_DisplayFormat `protobuf:"bytes,16,rep,name=displayfmt" json:"displayfmt,omitempty"`
	// This object specified the required and permitted assets and attributes of a native display
	// placement. Note that including both "displayfmt" and "nativefmt" is not recommended.
	// Refer to Object: NativeFormat.
	Nativefmt *Placement_DisplayPlacement_NativeFormat `protobuf:"bytes,17,opt,name=nativefmt" json:"nativefmt,omitempty"`
	// Array of supported ad tracking events.
	// Refer to Object: EventSpec
	Event []*Placement_DisplayPlacement_EventSpec `protobuf:"bytes,18,rep,name=event" json:"event,omitempty"`
}

// Default values for Placement_DisplayPlacement fields.
const (
	Default_Placement_DisplayPlacement_Unit = int32(1)
)

func (x *Placement_DisplayPlacement) Reset() {
	*x = Placement_DisplayPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement) ProtoMessage() {}

func (x *Placement_DisplayPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Placement_DisplayPlacement) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetInstl() int32 {
	if x != nil && x.Instl != nil {
		return *x.Instl
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetTopframe() int32 {
	if x != nil && x.Topframe != nil {
		return *x.Topframe
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetIfrbust() []string {
	if x != nil {
		return x.Ifrbust
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetClktype() int32 {
	if x != nil && x.Clktype != nil {
		return *x.Clktype
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetAmpren() int32 {
	if x != nil && x.Ampren != nil {
		return *x.Ampren
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetPtype() int32 {
	if x != nil && x.Ptype != nil {
		return *x.Ptype
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetContext() int32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Placement_DisplayPlacement) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return Default_Placement_DisplayPlacement_Unit
}

func (x *Placement_DisplayPlacement) GetPriv() bool {
	if x != nil && x.Priv != nil {
		return *x.Priv
	}
	return false
}

func (x *Placement_DisplayPlacement) GetDisplayfmt() []*Placement_DisplayPlacement_DisplayFormat {
	if x != nil {
		return x.Displayfmt
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetNativefmt() *Placement_DisplayPlacement_NativeFormat {
	if x != nil {
		return x.Nativefmt
	}
	return nil
}

func (x *Placement_DisplayPlacement) GetEvent() []*Placement_DisplayPlacement_EventSpec {
	if x != nil {
		return x.Event
	}
	return nil
}

// *
// This object signals that the placement may be a video placement and provides additional detail
// about permitted video ads (e.g., VAST).
type Placement_VideoPlacement struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Placement subtype.
	// Refer to List: com.iabtechlab.adcom.v1.enums.VideoPlacementSubtype.
	Ptype *int32 `protobuf:"varint,1,opt,name=ptype" json:"ptype,omitempty"`
	// Placement position on screen. Refer to List: com.iabtechlab.adcom.v1.enums.PlacementPosition.
	Pos *int32 `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll placements. For
	// additional generic values, refer to List: Start Delay Modes.
	Delay *int32 `protobuf:"varint,3,opt,name=delay" json:"delay,omitempty"`
	// Indicates if the placement imposes ad skippability, where false = no, true = yes.
	Skip *bool `protobuf:"varint,4,opt,name=skip" json:"skip,omitempty"`
	// The placement allows creatives of total duration greater than this number of seconds to be
	// skipped; only applicable if the ad is skippable.
	// Default = 0.
	Skipmin *int32 `protobuf:"varint,5,opt,name=skipmin" json:"skipmin,omitempty"`
	// Number of seconds a creative must play before the placement enables skipping; only
	// applicable if the ad is skippable.
	// Default = 0.
	Skipafter *int32 `protobuf:"varint,6,opt,name=skipafter" json:"skipafter,omitempty"`
	// Playback method in use for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.PlaybackMethod.
	Playmethod *int32 `protobuf:"varint,7,opt,name=playmethod" json:"playmethod,omitempty"`
	// The event that causes playback to end for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.PlaybackCessationMode.
	Playend *int32 `protobuf:"varint,8,opt,name=playend" json:"playend,omitempty"`
	// Indicates the click type of the placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.ClickType.
	Clktype *int32 `protobuf:"varint,9,opt,name=clktype" json:"clktype,omitempty"`
	// Array of supported mime types (e.g., "video/mp4"). If omitted, all types are assumed.
	// Required.
	Mime []string `protobuf:"bytes,10,rep,name=mime" json:"mime,omitempty"`
	// List of supported APIs for this placement. If an API is not explicitly listed, it is
	// assumed to be unsupported.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,11,rep,name=api" json:"api,omitempty"`
	// Creative subtypes permitted for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.Creative.AudioVideoType.
	Ctype []int32 `protobuf:"varint,12,rep,name=ctype" json:"ctype,omitempty"`
	// Width of the creative in units specified by "unit".
	W *int32 `protobuf:"varint,13,opt,name=w" json:"w,omitempty"`
	// Height of the creative in units spcified by "unit".
	H *int32 `protobuf:"varint,14,opt,name=h" json:"h,omitempty"`
	// Units of size used for "w" and "h" attributes.
	// Refer to List: com.iabtechlab.adcom.v1.enums.SizeUnit.
	// Default = 1.
	Unit *int32 `protobuf:"varint,15,opt,name=unit,def=1" json:"unit,omitempty"`
	// Minimum creative duration in seconds.
	Mindur *int32 `protobuf:"varint,16,opt,name=mindur" json:"mindur,omitempty"`
	// Maximum creative duration in seconds.
	Maxdur *int32 `protobuf:"varint,17,opt,name=maxdur" json:"maxdur,omitempty"`
	// Maximum extended creative duration if extension is allowed. If 0, extension is not allowed.
	// If -1, extension is allowed and there is no time limit imposed. If greater than 0, then the
	// value represents the number of seconds of extended play supported beyond the "maxdur" value.
	// Default = 0.
	Maxext *int32 `protobuf:"varint,18,opt,name=maxext" json:"maxext,omitempty"`
	// Minimum bit rate of the creative in Kbps.
	Minbitr *int32 `protobuf:"varint,19,opt,name=minbitr" json:"minbitr,omitempty"`
	// Maximum bit rate of the creative in Kbps.
	Maxbitr *int32 `protobuf:"varint,20,opt,name=maxbitr" json:"maxbitr,omitempty"`
	// Array of supported creative delivery methods. If omitted, all can be assumed.
	// Refer to List: com.iabtechlab.adcom.v1.enums.DeliveryMethod.
	Delivery []int32 `protobuf:"varint,21,rep,name=delivery" json:"delivery,omitempty"`
	// The maximum number of ads that can be played in an ad pod.
	Maxseq *int32 `protobuf:"varint,22,opt,name=maxseq" json:"maxseq,omitempty"`
	// Indicates if the creative must be linear, nonlinear, etc. If none specified, no restrictions
	// are assumed.
	// Refer to List: com.iabtechlab.adcom.v1.enums.LinearityMode.
	Linear *int32 `protobuf:"varint,23,opt,name=linear" json:"linear,omitempty"`
	// Indicates if letterboxing of 4:3 creatives into a 16:9 window is allowed, where false = no,
	// true = yes.
	// Default = true.
	Boxing *bool `protobuf:"varint,24,opt,name=boxing,def=1" json:"boxing,omitempty"`
	// Array of objects indicating that companion ads are available and providing the
	// specifications thereof.
	// Refer to Object: Companion.
	Comp []*Placement_Companion `protobuf:"bytes,25,rep,name=comp" json:"comp,omitempty"`
	// Supported companion ad types; recommended if companion ads are specified in "comp".
	// Refer to List: com.iabtechlab.adcom.v1.enums.CompanionType.
	Comptype []int32 `protobuf:"varint,26,rep,name=comptype" json:"comptype,omitempty"`
}

// Default values for Placement_VideoPlacement fields.
const (
	Default_Placement_VideoPlacement_Unit   = int32(1)
	Default_Placement_VideoPlacement_Boxing = bool(true)
)

func (x *Placement_VideoPlacement) Reset() {
	*x = Placement_VideoPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_VideoPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_VideoPlacement) ProtoMessage() {}

func (x *Placement_VideoPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_VideoPlacement.ProtoReflect.Descriptor instead.
func (*Placement_VideoPlacement) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Placement_VideoPlacement) GetPtype() int32 {
	if x != nil && x.Ptype != nil {
		return *x.Ptype
	}
	return 0
}

func (x *Placement_VideoPlacement) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Placement_VideoPlacement) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *Placement_VideoPlacement) GetSkip() bool {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return false
}

func (x *Placement_VideoPlacement) GetSkipmin() int32 {
	if x != nil && x.Skipmin != nil {
		return *x.Skipmin
	}
	return 0
}

func (x *Placement_VideoPlacement) GetSkipafter() int32 {
	if x != nil && x.Skipafter != nil {
		return *x.Skipafter
	}
	return 0
}

func (x *Placement_VideoPlacement) GetPlaymethod() int32 {
	if x != nil && x.Playmethod != nil {
		return *x.Playmethod
	}
	return 0
}

func (x *Placement_VideoPlacement) GetPlayend() int32 {
	if x != nil && x.Playend != nil {
		return *x.Playend
	}
	return 0
}

func (x *Placement_VideoPlacement) GetClktype() int32 {
	if x != nil && x.Clktype != nil {
		return *x.Clktype
	}
	return 0
}

func (x *Placement_VideoPlacement) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Placement_VideoPlacement) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Placement_VideoPlacement) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Placement_VideoPlacement) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Placement_VideoPlacement) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Placement_VideoPlacement) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return Default_Placement_VideoPlacement_Unit
}

func (x *Placement_VideoPlacement) GetMindur() int32 {
	if x != nil && x.Mindur != nil {
		return *x.Mindur
	}
	return 0
}

func (x *Placement_VideoPlacement) GetMaxdur() int32 {
	if x != nil && x.Maxdur != nil {
		return *x.Maxdur
	}
	return 0
}

func (x *Placement_VideoPlacement) GetMaxext() int32 {
	if x != nil && x.Maxext != nil {
		return *x.Maxext
	}
	return 0
}

func (x *Placement_VideoPlacement) GetMinbitr() int32 {
	if x != nil && x.Minbitr != nil {
		return *x.Minbitr
	}
	return 0
}

func (x *Placement_VideoPlacement) GetMaxbitr() int32 {
	if x != nil && x.Maxbitr != nil {
		return *x.Maxbitr
	}
	return 0
}

func (x *Placement_VideoPlacement) GetDelivery() []int32 {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *Placement_VideoPlacement) GetMaxseq() int32 {
	if x != nil && x.Maxseq != nil {
		return *x.Maxseq
	}
	return 0
}

func (x *Placement_VideoPlacement) GetLinear() int32 {
	if x != nil && x.Linear != nil {
		return *x.Linear
	}
	return 0
}

func (x *Placement_VideoPlacement) GetBoxing() bool {
	if x != nil && x.Boxing != nil {
		return *x.Boxing
	}
	return Default_Placement_VideoPlacement_Boxing
}

func (x *Placement_VideoPlacement) GetComp() []*Placement_Companion {
	if x != nil {
		return x.Comp
	}
	return nil
}

func (x *Placement_VideoPlacement) GetComptype() []int32 {
	if x != nil {
		return x.Comptype
	}
	return nil
}

// *
// This object signals that the placement may be an audio placement and provides additional
// detail about permitted audio ads (e.g., DAAST).
type Placement_AudioPlacement struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll placements.
	// For additional generic values, refer to List: Start Delay Modes.
	Delay *int32 `protobuf:"varint,1,opt,name=delay" json:"delay,omitempty"`
	// Indicates if the placement imposes ad skippability, where false = no, true = yes.
	Skip *bool `protobuf:"varint,2,opt,name=skip" json:"skip,omitempty"`
	// The placement allows creatives of total duration greater than this number of seconds to be
	// skipped; only applicable if the ad is skippable.
	// Default 0.
	Skipmin *int32 `protobuf:"varint,3,opt,name=skipmin" json:"skipmin,omitempty"`
	// Number of seconds a creative must play before the placement enables skipping; only
	// applicable if the ad is skippable.
	Skipafter *int32 `protobuf:"varint,4,opt,name=skipafter" json:"skipafter,omitempty"`
	// Playback method in use for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.PlaybackMethod.
	Playmethod *int32 `protobuf:"varint,5,opt,name=playmethod" json:"playmethod,omitempty"`
	// The event that causes playback to end for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.PlaybackCessationMode.
	Playend *int32 `protobuf:"varint,6,opt,name=playend" json:"playend,omitempty"`
	// Type of audio feed for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.FeedType.
	Feed *int32 `protobuf:"varint,7,opt,name=feed" json:"feed,omitempty"`
	// Volume normalization mode of this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.VolumeNormalizationMode.
	Nvol *int32 `protobuf:"varint,8,opt,name=nvol" json:"nvol,omitempty"`
	// Array of supported mime types (e.g., "audio/mp4"). If omitted, all types are assumed.
	// Required.
	Mime []string `protobuf:"bytes,9,rep,name=mime" json:"mime,omitempty"`
	// List of supported APIs for this placement. If an API is not explicitly listed, it is assumed
	// to be unsupported.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,10,rep,name=api" json:"api,omitempty"`
	// Creative subtypes permitted for this placement.
	// Refer to List: com.iabtechlab.adcom.v1.enums.Creative.AudioVideoType.
	Ctype []int32 `protobuf:"varint,11,rep,name=ctype" json:"ctype,omitempty"`
	// Minimum creative duration in seconds.
	Mindur *int32 `protobuf:"varint,12,opt,name=mindur" json:"mindur,omitempty"`
	// Maximum creative duration in seconds.
	Maxdur *int32 `protobuf:"varint,13,opt,name=maxdur" json:"maxdur,omitempty"`
	// Maximum extended creative duration if extension is allowed. If 0, extension is not allowed.
	// If -1, extension is allowed and there is no time limit imposed. If greater than 0, then the
	// value represents the number of seconds of extended play supported beyond the "maxdur" value.
	Maxext *int32 `protobuf:"varint,14,opt,name=maxext" json:"maxext,omitempty"`
	// Minimum bit rate of the creative in Kbps.
	Minbitr *int32 `protobuf:"varint,15,opt,name=minbitr" json:"minbitr,omitempty"`
	// Maximum bit rate of the creative in Kbps.
	Maxbitr *int32 `protobuf:"varint,16,opt,name=maxbitr" json:"maxbitr,omitempty"`
	// Array of supported creative delivery methods. If omitted, all can be assumed.
	// Refer to List: com.iabtechlab.adcom.v1.enums.DeliveryMethod.
	Delivery []int32 `protobuf:"varint,17,rep,name=delivery" json:"delivery,omitempty"`
	// The maximum number of  ads that can be played in a pod.
	Maxseq *int32 `protobuf:"varint,18,opt,name=maxseq" json:"maxseq,omitempty"`
	// Array of objects indicating that companion ads are available and providing the
	// specifications thereof.
	// Refer to Object: Companion.
	Comp []*Placement_Companion `protobuf:"bytes,19,rep,name=comp" json:"comp,omitempty"`
	// Supported companion ad types; recommended if companion ads are specified in "comp".
	// Refer to List: com.iabtechlab.adcom.v1.enums.CompanionType.
	Comptype []int32 `protobuf:"varint,20,rep,name=comptype" json:"comptype,omitempty"`
}

func (x *Placement_AudioPlacement) Reset() {
	*x = Placement_AudioPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_AudioPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_AudioPlacement) ProtoMessage() {}

func (x *Placement_AudioPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_AudioPlacement.ProtoReflect.Descriptor instead.
func (*Placement_AudioPlacement) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Placement_AudioPlacement) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *Placement_AudioPlacement) GetSkip() bool {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return false
}

func (x *Placement_AudioPlacement) GetSkipmin() int32 {
	if x != nil && x.Skipmin != nil {
		return *x.Skipmin
	}
	return 0
}

func (x *Placement_AudioPlacement) GetSkipafter() int32 {
	if x != nil && x.Skipafter != nil {
		return *x.Skipafter
	}
	return 0
}

func (x *Placement_AudioPlacement) GetPlaymethod() int32 {
	if x != nil && x.Playmethod != nil {
		return *x.Playmethod
	}
	return 0
}

func (x *Placement_AudioPlacement) GetPlayend() int32 {
	if x != nil && x.Playend != nil {
		return *x.Playend
	}
	return 0
}

func (x *Placement_AudioPlacement) GetFeed() int32 {
	if x != nil && x.Feed != nil {
		return *x.Feed
	}
	return 0
}

func (x *Placement_AudioPlacement) GetNvol() int32 {
	if x != nil && x.Nvol != nil {
		return *x.Nvol
	}
	return 0
}

func (x *Placement_AudioPlacement) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Placement_AudioPlacement) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Placement_AudioPlacement) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Placement_AudioPlacement) GetMindur() int32 {
	if x != nil && x.Mindur != nil {
		return *x.Mindur
	}
	return 0
}

func (x *Placement_AudioPlacement) GetMaxdur() int32 {
	if x != nil && x.Maxdur != nil {
		return *x.Maxdur
	}
	return 0
}

func (x *Placement_AudioPlacement) GetMaxext() int32 {
	if x != nil && x.Maxext != nil {
		return *x.Maxext
	}
	return 0
}

func (x *Placement_AudioPlacement) GetMinbitr() int32 {
	if x != nil && x.Minbitr != nil {
		return *x.Minbitr
	}
	return 0
}

func (x *Placement_AudioPlacement) GetMaxbitr() int32 {
	if x != nil && x.Maxbitr != nil {
		return *x.Maxbitr
	}
	return 0
}

func (x *Placement_AudioPlacement) GetDelivery() []int32 {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *Placement_AudioPlacement) GetMaxseq() int32 {
	if x != nil && x.Maxseq != nil {
		return *x.Maxseq
	}
	return 0
}

func (x *Placement_AudioPlacement) GetComp() []*Placement_Companion {
	if x != nil {
		return x.Comp
	}
	return nil
}

func (x *Placement_AudioPlacement) GetComptype() []int32 {
	if x != nil {
		return x.Comptype
	}
	return nil
}

// *
// This object is used in video and audio placements to specify an associated or so-called
// companion display ad. Video and audio placements can specify an array of companion ads.
type Placement_Companion struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Identifier of the companion ad; unique within this placement.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Indicates the companion ad rendering mode relative to the associated video or audio ad,
	// where 0 = concurrent, 1 = end card. For a given placement, typically only one companion
	// at most should be designated as an end card.
	Vcm *int32 `protobuf:"varint,2,opt,name=vcm" json:"vcm,omitempty"`
	// Display specification object representing the companion ad.
	// Refer to Object: DisplayPlacement.
	Display *Placement_DisplayPlacement `protobuf:"bytes,3,opt,name=display" json:"display,omitempty"`
}

func (x *Placement_Companion) Reset() {
	*x = Placement_Companion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_Companion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_Companion) ProtoMessage() {}

func (x *Placement_Companion) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_Companion.ProtoReflect.Descriptor instead.
func (*Placement_Companion) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Placement_Companion) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Placement_Companion) GetVcm() int32 {
	if x != nil && x.Vcm != nil {
		return *x.Vcm
	}
	return 0
}

func (x *Placement_Companion) GetDisplay() *Placement_DisplayPlacement {
	if x != nil {
		return x.Display
	}
	return nil
}

// *
// This object represents an allowed set of parameters for a banner display ad and often appears
// as an array when multiple sizes are permitted.
type Placement_DisplayPlacement_DisplayFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Absolute width of the creative in units specified by "DisplayPlacement.unit".
	// Note that mixing absolute and relative sizes is not recommended.
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Absolute hight of the creative in units specified by "DisplayPlacement.unit".
	// Note that mixing absolute and relative sizes is not recommended.
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Relative width of the creative when expressing size as a ratio.
	// Note that mixing absolute and relative sizes is not recommended.
	Wratio *int32 `protobuf:"varint,3,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height of the creative when expressing size as a ratio.
	// Note that mixing absolute and relative sizes is not recommended.
	Hratio *int32 `protobuf:"varint,4,opt,name=hratio" json:"hratio,omitempty"`
	// Directions in which the creative is permitted to expand.
	// Refer to List: com.iabtechlab.adcom.v1.enums.ExpandableDirection.
	Expdir []int32 `protobuf:"varint,5,rep,name=expdir" json:"expdir,omitempty"`
}

func (x *Placement_DisplayPlacement_DisplayFormat) Reset() {
	*x = Placement_DisplayPlacement_DisplayFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_DisplayFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_DisplayFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_DisplayFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_DisplayFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_DisplayFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Placement_DisplayPlacement_DisplayFormat) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Placement_DisplayPlacement_DisplayFormat) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Placement_DisplayPlacement_DisplayFormat) GetWratio() int32 {
	if x != nil && x.Wratio != nil {
		return *x.Wratio
	}
	return 0
}

func (x *Placement_DisplayPlacement_DisplayFormat) GetHratio() int32 {
	if x != nil && x.Hratio != nil {
		return *x.Hratio
	}
	return 0
}

func (x *Placement_DisplayPlacement_DisplayFormat) GetExpdir() []int32 {
	if x != nil {
		return x.Expdir
	}
	return nil
}

// *
// This object refines a display placement to be specifically a native display placement. It
// serves as the root of a structure that includes the specifications for each of the assets
// that comprise the native placement.
type Placement_DisplayPlacement_NativeFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Array of objects that specify the set of native assets and their permitted formats.
	// Refer to Object: AssetFormat.
	Asset []*Placement_DisplayPlacement_NativeFormat_AssetFormat `protobuf:"bytes,1,rep,name=asset" json:"asset,omitempty"`
}

func (x *Placement_DisplayPlacement_NativeFormat) Reset() {
	*x = Placement_DisplayPlacement_NativeFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_NativeFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_NativeFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_NativeFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_NativeFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_NativeFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Placement_DisplayPlacement_NativeFormat) GetAsset() []*Placement_DisplayPlacement_NativeFormat_AssetFormat {
	if x != nil {
		return x.Asset
	}
	return nil
}

// *
// This object specifies a type of ad tracking event and which methods of tracking are available
// for it. This object may appear as an array for a given placement indicating various types
// of available tracking events.
type Placement_DisplayPlacement_EventSpec struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. Type of supported ad tracking event.
	// Refer to List: com.iabtechlab.adcom.v1.enums.EventType.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Array of supported event tracking methods for this event type.
	// Refer to List: com.iabtechlab.adcom.v1.enums.EventTrackingMethod.
	Method []int32 `protobuf:"varint,2,rep,name=method" json:"method,omitempty"`
	// Event tracking APIs available for us; only relevant for JavaScript method trackers.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,3,rep,name=api" json:"api,omitempty"`
	// Array of domains, top two levels only (e.g., "tracker.com"), that constitutes a restriction
	// list of JavaScript trackers. The sense of restrictions is determined by "wjs".
	Jstrk []string `protobuf:"bytes,4,rep,name=jstrk" json:"jstrk,omitempty"`
	// Sense of the "jstrk" restriction list, where false = blocklist, true = allowlist.
	// Default = true.
	Wjs *bool `protobuf:"varint,5,opt,name=wjs,def=1" json:"wjs,omitempty"`
	// Array of domains, top two levels only (e.g., "tracker.com"), that constitute a restriction
	// list of pixel image trackers. The sense of the restrictions is determined by "wpx".
	Pxtrk []string `protobuf:"bytes,6,rep,name=pxtrk" json:"pxtrk,omitempty"`
	// Sense of the "pxtrk" restriction list, where false = blocklist, true = allowlist.
	// Default = true.
	Wpx *bool `protobuf:"varint,7,opt,name=wpx,def=1" json:"wpx,omitempty"`
}

// Default values for Placement_DisplayPlacement_EventSpec fields.
const (
	Default_Placement_DisplayPlacement_EventSpec_Wjs = bool(true)
	Default_Placement_DisplayPlacement_EventSpec_Wpx = bool(true)
)

func (x *Placement_DisplayPlacement_EventSpec) Reset() {
	*x = Placement_DisplayPlacement_EventSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_EventSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_EventSpec) ProtoMessage() {}

func (x *Placement_DisplayPlacement_EventSpec) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_EventSpec.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_EventSpec) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Placement_DisplayPlacement_EventSpec) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Placement_DisplayPlacement_EventSpec) GetMethod() []int32 {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Placement_DisplayPlacement_EventSpec) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Placement_DisplayPlacement_EventSpec) GetJstrk() []string {
	if x != nil {
		return x.Jstrk
	}
	return nil
}

func (x *Placement_DisplayPlacement_EventSpec) GetWjs() bool {
	if x != nil && x.Wjs != nil {
		return *x.Wjs
	}
	return Default_Placement_DisplayPlacement_EventSpec_Wjs
}

func (x *Placement_DisplayPlacement_EventSpec) GetPxtrk() []string {
	if x != nil {
		return x.Pxtrk
	}
	return nil
}

func (x *Placement_DisplayPlacement_EventSpec) GetWpx() bool {
	if x != nil && x.Wpx != nil {
		return *x.Wpx
	}
	return Default_Placement_DisplayPlacement_EventSpec_Wpx
}

// *
// This object represents the permitted specifications of a single asset of a native ad.
// Along with its own attributes, exactly one of the asset subtype objects must be included.
// All others must be omitted.
type Placement_DisplayPlacement_NativeFormat_AssetFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Asset ID, unique within the scope of this placement specification.
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Indicator of whether or not this asset is required.
	Req *bool `protobuf:"varint,2,opt,name=req" json:"req,omitempty"`
	// The specific asset format that provides additional asset forma detail.
	//
	// Types that are assignable to AssetOneof:
	//
	//	*Placement_DisplayPlacement_NativeFormat_AssetFormat_Title
	//	*Placement_DisplayPlacement_NativeFormat_AssetFormat_Img
	//	*Placement_DisplayPlacement_NativeFormat_AssetFormat_Video
	//	*Placement_DisplayPlacement_NativeFormat_AssetFormat_Data
	AssetOneof isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof `protobuf_oneof:"asset_oneof"`
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) Reset() {
	*x = Placement_DisplayPlacement_NativeFormat_AssetFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_NativeFormat_AssetFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_NativeFormat_AssetFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetReq() bool {
	if x != nil && x.Req != nil {
		return *x.Req
	}
	return false
}

func (m *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetAssetOneof() isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetTitle() *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat {
	if x, ok := x.GetAssetOneof().(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Title); ok {
		return x.Title
	}
	return nil
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetImg() *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat {
	if x, ok := x.GetAssetOneof().(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Img); ok {
		return x.Img
	}
	return nil
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetVideo() *Placement_VideoPlacement {
	if x, ok := x.GetAssetOneof().(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Video); ok {
		return x.Video
	}
	return nil
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat) GetData() *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat {
	if x, ok := x.GetAssetOneof().(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Data); ok {
		return x.Data
	}
	return nil
}

type isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof interface {
	isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof()
}

type Placement_DisplayPlacement_NativeFormat_AssetFormat_Title struct {
	Title *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat `protobuf:"bytes,3,opt,name=title,oneof"`
}

type Placement_DisplayPlacement_NativeFormat_AssetFormat_Img struct {
	Img *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat `protobuf:"bytes,4,opt,name=img,oneof"`
}

type Placement_DisplayPlacement_NativeFormat_AssetFormat_Video struct {
	Video *Placement_VideoPlacement `protobuf:"bytes,5,opt,name=video,oneof"`
}

type Placement_DisplayPlacement_NativeFormat_AssetFormat_Data struct {
	Data *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_Title) isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof() {
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_Img) isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof() {
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_Video) isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof() {
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_Data) isPlacement_DisplayPlacement_NativeFormat_AssetFormat_AssetOneof() {
}

// *
// This object is used to provide native asset format specifications for a title element.
// Title elements are simple strings.
type Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. The maximum allowed length of the title value. Recommended lengths are 25,
	// 90, or 140.
	Len *int32 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) Reset() {
	*x = Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

// *
// This object is used to provide native asset format specifications for an image element.
// Image elements are typically used for actual creative image and icons.
type Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The type of image asset supported.
	// Refer to List: com.iabtechlab.adcom.v1.enums.NativeImageAssetType.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Array of supported mime types (e.g., "image/jpeg", "image/gif"). If omitted, all types
	// are assumed.
	Mime []string `protobuf:"bytes,2,rep,name=mime" json:"mime,omitempty"`
	// Absolute width of the image asset in device independent pixels (DIPS).
	// Note that mixing absolute and relative sizes is not recommended.
	W *int32 `protobuf:"varint,3,opt,name=w" json:"w,omitempty"`
	// Absolute height of the image asset in device independent pixels (DIPS).
	// Note that mixing absolute and relative sizes is not recommended.
	H *int32 `protobuf:"varint,4,opt,name=h" json:"h,omitempty"`
	// The minimum requested absolute width of the image in device independent pixels (DIPS).
	// This option should be used for any scaling of the images by the client.
	Wmin *int32 `protobuf:"varint,5,opt,name=wmin" json:"wmin,omitempty"`
	// The minimum requested absolute height of the image in device independent pixels (DIPS).
	// This option should be used for any scaling of the images by the client.
	Hmin *int32 `protobuf:"varint,6,opt,name=hmin" json:"hmin,omitempty"`
	// Relative width of the image asset when expressing size as a ratio.
	// Note that mixing absolute and relative sizes is not recommended.
	Wratio *int32 `protobuf:"varint,7,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height of the image asset when expressing size as a ratio.
	// Note that mixing absolute and relative sizes is not recommended.
	Hratio *int32 `protobuf:"varint,8,opt,name=hratio" json:"hratio,omitempty"`
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) Reset() {
	*x = Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetHmin() int32 {
	if x != nil && x.Hmin != nil {
		return *x.Hmin
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetWratio() int32 {
	if x != nil && x.Wratio != nil {
		return *x.Wratio
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat) GetHratio() int32 {
	if x != nil && x.Hratio != nil {
		return *x.Hratio
	}
	return 0
}

// *
// This object is used to provide native asset format specifications for a data element. A
// data asset is used for all miscellaneous elements such as brand name, ratings, stars,
// review count, downloads, prices, etc. It is purposefully generic to support native
// elements not currently contemplated by this specification.
type Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The type of data asset supported.
	// Refer to List: com.iabtechlab.adcom.v1.enums.NativeDataAssetType.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// The maximum allowed length of the data value.
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) Reset() {
	*x = Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) ProtoMessage() {}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat.ProtoReflect.Descriptor instead.
func (*Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2}
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

var File_com_iabtechlab_adcom_v1_placement_placement_proto protoreflect.FileDescriptor

var file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61,
	0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x1d, 0x0a,
	0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x73, 0x61, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x64, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x64, 0x6b, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x6b, 0x76, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x6d, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x61, 0x64, 0x6d, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x6c,
	0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x75, 0x72, 0x6c, 0x78, 0x12, 0x57,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x51, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x81, 0x0f,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f,
	0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x72, 0x62, 0x75, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x72, 0x62, 0x75, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6c, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x70, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x70, 0x72,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x15, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x70, 0x72, 0x69, 0x76, 0x12, 0x6b, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x66, 0x6d, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x66,
	0x6d, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x66, 0x6d, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x66, 0x6d, 0x74, 0x12, 0x5d, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x7a, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x64,
	0x69, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x64, 0x69, 0x72,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xc1, 0x07, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6c, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x1a, 0xbb, 0x06, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x7f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x7b, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x7c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x2b, 0x0a, 0x10, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xb5, 0x01, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x69, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77,
	0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x3e,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xac, 0x01, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x73, 0x74, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x73, 0x74, 0x72, 0x6b, 0x12, 0x16, 0x0a,
	0x03, 0x77, 0x6a, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x03, 0x77, 0x6a, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x78, 0x74, 0x72, 0x6b, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x78, 0x74, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x03, 0x77,
	0x70, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x03,
	0x77, 0x70, 0x78, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90,
	0x4e, 0x1a, 0xb2, 0x05, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6b, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x6b, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x15, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x64, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x64, 0x75,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x62, 0x69, 0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x62,
	0x69, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x73, 0x65, 0x71, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x62, 0x6f, 0x78,
	0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x06, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xaf, 0x04, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x76, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x76, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x64, 0x75, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x64, 0x75,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x62, 0x69, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x65, 0x71, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x6f, 0x6d,
	0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x8d, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x63, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x63, 0x6d, 0x12, 0x57, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42,
	0xb0, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x69, 0x6f,
	0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x05, 0x43, 0x49, 0x41,
	0x56, 0x50, 0xaa, 0x02, 0x21, 0x43, 0x6f, 0x6d, 0x2e, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x21, 0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31,
	0x5c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x2d, 0x43, 0x6f, 0x6d,
	0x5c, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41, 0x64, 0x63, 0x6f,
	0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x43, 0x6f, 0x6d,
	0x3a, 0x3a, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x41, 0x64,
	0x63, 0x6f, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74,
}

var (
	file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescOnce sync.Once
	file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescData = file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDesc
)

func file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescGZIP() []byte {
	file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescOnce.Do(func() {
		file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescData)
	})
	return file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDescData
}

var file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_iabtechlab_adcom_v1_placement_placement_proto_goTypes = []any{
	(*Placement)(nil),                                                            // 0: com.iabtechlab.adcom.v1.placement.Placement
	(*Placement_DisplayPlacement)(nil),                                           // 1: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement
	(*Placement_VideoPlacement)(nil),                                             // 2: com.iabtechlab.adcom.v1.placement.Placement.VideoPlacement
	(*Placement_AudioPlacement)(nil),                                             // 3: com.iabtechlab.adcom.v1.placement.Placement.AudioPlacement
	(*Placement_Companion)(nil),                                                  // 4: com.iabtechlab.adcom.v1.placement.Placement.Companion
	(*Placement_DisplayPlacement_DisplayFormat)(nil),                             // 5: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.DisplayFormat
	(*Placement_DisplayPlacement_NativeFormat)(nil),                              // 6: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat
	(*Placement_DisplayPlacement_EventSpec)(nil),                                 // 7: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.EventSpec
	(*Placement_DisplayPlacement_NativeFormat_AssetFormat)(nil),                  // 8: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat
	(*Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat)(nil), // 9: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.TitleAssetFormat
	(*Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat)(nil), // 10: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.ImageAssetFormat
	(*Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat)(nil),  // 11: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.DataAssetFormat
}
var file_com_iabtechlab_adcom_v1_placement_placement_proto_depIdxs = []int32{
	1,  // 0: com.iabtechlab.adcom.v1.placement.Placement.display:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement
	2,  // 1: com.iabtechlab.adcom.v1.placement.Placement.video:type_name -> com.iabtechlab.adcom.v1.placement.Placement.VideoPlacement
	3,  // 2: com.iabtechlab.adcom.v1.placement.Placement.audio:type_name -> com.iabtechlab.adcom.v1.placement.Placement.AudioPlacement
	5,  // 3: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.displayfmt:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.DisplayFormat
	6,  // 4: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.nativefmt:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat
	7,  // 5: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.event:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.EventSpec
	4,  // 6: com.iabtechlab.adcom.v1.placement.Placement.VideoPlacement.comp:type_name -> com.iabtechlab.adcom.v1.placement.Placement.Companion
	4,  // 7: com.iabtechlab.adcom.v1.placement.Placement.AudioPlacement.comp:type_name -> com.iabtechlab.adcom.v1.placement.Placement.Companion
	1,  // 8: com.iabtechlab.adcom.v1.placement.Placement.Companion.display:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement
	8,  // 9: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.asset:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat
	9,  // 10: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.title:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.TitleAssetFormat
	10, // 11: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.img:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.ImageAssetFormat
	2,  // 12: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.video:type_name -> com.iabtechlab.adcom.v1.placement.Placement.VideoPlacement
	11, // 13: com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.data:type_name -> com.iabtechlab.adcom.v1.placement.Placement.DisplayPlacement.NativeFormat.AssetFormat.DataAssetFormat
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_com_iabtechlab_adcom_v1_placement_placement_proto_init() }
func file_com_iabtechlab_adcom_v1_placement_placement_proto_init() {
	if File_com_iabtechlab_adcom_v1_placement_placement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Placement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_VideoPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_AudioPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_Companion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_DisplayFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_NativeFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_EventSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_NativeFormat_AssetFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_NativeFormat_AssetFormat_TitleAssetFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_NativeFormat_AssetFormat_ImageAssetFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Placement_DisplayPlacement_NativeFormat_AssetFormat_DataAssetFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes[8].OneofWrappers = []any{
		(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Title)(nil),
		(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Img)(nil),
		(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Video)(nil),
		(*Placement_DisplayPlacement_NativeFormat_AssetFormat_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_iabtechlab_adcom_v1_placement_placement_proto_goTypes,
		DependencyIndexes: file_com_iabtechlab_adcom_v1_placement_placement_proto_depIdxs,
		MessageInfos:      file_com_iabtechlab_adcom_v1_placement_placement_proto_msgTypes,
	}.Build()
	File_com_iabtechlab_adcom_v1_placement_placement_proto = out.File
	file_com_iabtechlab_adcom_v1_placement_placement_proto_rawDesc = nil
	file_com_iabtechlab_adcom_v1_placement_placement_proto_goTypes = nil
	file_com_iabtechlab_adcom_v1_placement_placement_proto_depIdxs = nil
}
