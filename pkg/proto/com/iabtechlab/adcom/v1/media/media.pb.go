//*
// The Media group of objects defines an actual ad including reference to its creative and metadata
// to enable proper rendering, restrictions compliance, event tracking, and quality auditing. The
// following figure presents the objects and interrelationships in this group. The objects are
// defined in the subsections thereafter.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: com/iabtechlab/adcom/v1/media/media.proto

package media

import (
	_ "github.com/bidon-io/bidon-backend/pkg/proto/com/iabtechlab/adcom/v1/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// This object is the root of a structure that defines in instance of advertising media. It includes
// metadata about the ad overall and sub-objects that provide additional detail specific to the type
// of media comprising the creative.
type Ad struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. ID of the creative; unique at least throughout the scope of a vendor (e.g., an
	// exchange or buying platform). Note that multiple instances of the same ad when used in
	// transactions must have the same ID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Recommended. Advertiser domain; top two levels only (e.g., "ford.com"). This can be an array
	// for the case of rotating creatives.
	Adomain []string `protobuf:"bytes,2,rep,name=adomain" json:"adomain,omitempty"`
	// When the product of the ad is an app, the unique ID of that app as a bundle or package name
	// (e.g., "com.foo.mygame"). This should NOT be an app store ID (e.g., no iTunes store IDs). This
	// can be an array of for the case of rotating creatives.
	Bundle []string `protobuf:"bytes,3,rep,name=bundle" json:"bundle,omitempty"`
	// URL without cache-busting to an image that is representative of the ad content for cursory
	// level ad quality checking.
	Iurl *string `protobuf:"bytes,4,opt,name=iurl" json:"iurl,omitempty"`
	// Array of content categories describing the ad using IDs from the taxonomy indicated in "cattax".
	Cat []string `protobuf:"bytes,5,rep,name=cat" json:"cat,omitempty"`
	// The taxonomy in use for the "cat" attribute. Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	// The default value is 2.
	Cattax *int32 `protobuf:"varint,6,opt,name=cattax,def=2" json:"cattax,omitempty"`
	// Language of the creative using ISO-639-1-alpha-2. In practice, vendors using this object may
	// elect an alternate standard (e.g., BCP-47) in which case this must be communicated a priori.
	// The non-standard code "xx" may also be used if the creative has no linguistic content (e.g.,
	// a banner with just a company logo).
	Lang *string `protobuf:"bytes,7,opt,name=lang" json:"lang,omitempty"`
	// Set of attributes describing the creative. Refer to List: com.iabtechlab.adcom.v1.enums.Creative.Attribute.
	Attr *int32 `protobuf:"varint,8,opt,name=attr" json:"attr,omitempty"`
	// Flag to indicate if the creative is secure (i.e., uses HTTPS for all assets and markup), where
	// 0 = no, 1 = yes. There is no default and thus if omitted, the secure state is unknown. However,
	// as a practical matter, the safe  assumption is to treat unknown as non-secure.
	Secure *bool `protobuf:"varint,9,opt,name=secure" json:"secure,omitempty"`
	// Media rating per IQG guidelines. Refer to List: com.iabtechlab.adcom.v1.enums.MediaRating.
	Mrating *int32 `protobuf:"varint,10,opt,name=mrating" json:"mrating,omitempty"`
	// Date/time of the original instantiation of this ad (i.e., this object or any of its children)
	// in the format of ISO-8601; W3C profile. Refer to www.w3.org/TR/NOTE-datetime.
	Init *string `protobuf:"bytes,11,opt,name=init" json:"init,omitempty"`
	// Date/time of most recent modification to this ad (i.e., this object or any of its children) in
	// the format of ISO-8601; W3C profile. Refer to www.w3.org/TR/NOTE-datetime.
	Lastmod *string `protobuf:"bytes,12,opt,name=lastmod" json:"lastmod,omitempty"`
	// Identifies a Media Subtype Object that indicates the type of ad and provides additional
	// details.
	// As enforced by the protocol buffer definition, one of these must be set.
	//
	// Types that are assignable to TypeOneof:
	//
	//	*Ad_Display_
	//	*Ad_Video_
	//	*Ad_Audio_
	TypeOneof isAd_TypeOneof `protobuf_oneof:"type_oneof"`
	// An object depicting the audit status of the ad; typically part of a quality/safety review
	// process.
	// Refer to Object: Audit.
	Audit *Ad_Audit `protobuf:"bytes,30,opt,name=audit" json:"audit,omitempty"`
}

// Default values for Ad fields.
const (
	Default_Ad_Cattax = int32(2)
)

func (x *Ad) Reset() {
	*x = Ad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad) ProtoMessage() {}

func (x *Ad) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad.ProtoReflect.Descriptor instead.
func (*Ad) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0}
}

func (x *Ad) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Ad) GetAdomain() []string {
	if x != nil {
		return x.Adomain
	}
	return nil
}

func (x *Ad) GetBundle() []string {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *Ad) GetIurl() string {
	if x != nil && x.Iurl != nil {
		return *x.Iurl
	}
	return ""
}

func (x *Ad) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Ad) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return Default_Ad_Cattax
}

func (x *Ad) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *Ad) GetAttr() int32 {
	if x != nil && x.Attr != nil {
		return *x.Attr
	}
	return 0
}

func (x *Ad) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *Ad) GetMrating() int32 {
	if x != nil && x.Mrating != nil {
		return *x.Mrating
	}
	return 0
}

func (x *Ad) GetInit() string {
	if x != nil && x.Init != nil {
		return *x.Init
	}
	return ""
}

func (x *Ad) GetLastmod() string {
	if x != nil && x.Lastmod != nil {
		return *x.Lastmod
	}
	return ""
}

func (m *Ad) GetTypeOneof() isAd_TypeOneof {
	if m != nil {
		return m.TypeOneof
	}
	return nil
}

func (x *Ad) GetDisplay() *Ad_Display {
	if x, ok := x.GetTypeOneof().(*Ad_Display_); ok {
		return x.Display
	}
	return nil
}

func (x *Ad) GetVideo() *Ad_Video {
	if x, ok := x.GetTypeOneof().(*Ad_Video_); ok {
		return x.Video
	}
	return nil
}

func (x *Ad) GetAudio() *Ad_Audio {
	if x, ok := x.GetTypeOneof().(*Ad_Audio_); ok {
		return x.Audio
	}
	return nil
}

func (x *Ad) GetAudit() *Ad_Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type isAd_TypeOneof interface {
	isAd_TypeOneof()
}

type Ad_Display_ struct {
	// If set, indicates this is a display ad and provides additional detail as such.
	// Refer to Object: Display.
	Display *Ad_Display `protobuf:"bytes,13,opt,name=display,oneof"`
}

type Ad_Video_ struct {
	// If set, indicates this is a video ad and provides additional detail as such.
	// Refer to Object: Video.
	Video *Ad_Video `protobuf:"bytes,14,opt,name=video,oneof"`
}

type Ad_Audio_ struct {
	// If set, indicates this is an audio ad and provides additional detail as such.
	// Refer to Object: Audio.
	Audio *Ad_Audio `protobuf:"bytes,15,opt,name=audio,oneof"`
}

func (*Ad_Display_) isAd_TypeOneof() {}

func (*Ad_Video_) isAd_TypeOneof() {}

func (*Ad_Audio_) isAd_TypeOneof() {}

// *
// This object provides additional detail about an ad specifically for display ads. There are
// multiple attributes for specifying creative details: "banner" for simple banner images "native"
// for native ads, "ad" for including general markup, and "curl" for referencing general markup via
// URL. In any given "Display" object, only one of these attributes should be used to avoid
// confusion. To the extent feasible, structured objects should be favored over general markup for
// quality and safety issues.
type Ad_Display struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Mime type of the ad (e.g., "image/jpeg").
	Mime *string `protobuf:"bytes,1,opt,name=mime" json:"mime,omitempty"`
	// API required by the ad if applicable. Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api *int32 `protobuf:"varint,2,opt,name=api" json:"api,omitempty"`
	// Subtype of display creative. Refer to List: com.iabtechlab.adcom.v1.enums.Creative.DisplayType.
	Ctype []int32 `protobuf:"varint,3,rep,name=ctype" json:"ctype,omitempty"`
	// Absolute width of the creative in device independent pixels (DIPS), typically for non-native
	// ads.
	// Note that mixing absolute and relative sizes is not recommended.
	W *int32 `protobuf:"varint,4,opt,name=w" json:"w,omitempty"`
	// Absolute height of the creative in device independent pixels (DIPS), typically for non-native
	// ads.
	// Note that mixing absolute and relative sizes is not recommended.
	H *int32 `protobuf:"varint,5,opt,name=h" json:"h,omitempty"`
	// Relative width of the creative when expressing size as a ratio, typically for non-native ads.
	// Note that mixing absolute and relative sizes is not recommended.
	Wratio *int32 `protobuf:"varint,6,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height of the creative when expressing size as a ratio, typically for non-native ads.
	// Note that mixing absolute and relative sizes is not recommended.
	Hratio *int32 `protobuf:"varint,7,opt,name=hratio" json:"hratio,omitempty"`
	// URL of a page informing the user about a buyer's targeting activity.
	Priv *string `protobuf:"bytes,8,opt,name=priv" json:"priv,omitempty"`
	// Represents one of the four ways of making creative markup available.
	//
	// Types that are assignable to CreativeOneof:
	//
	//	*Ad_Display_Adm
	//	*Ad_Display_Curl
	//	*Ad_Display_Banner_
	//	*Ad_Display_Native_
	CreativeOneof isAd_Display_CreativeOneof `protobuf_oneof:"creative_oneof"`
	// Array of events that the advertiser or buying platform wants to track.
	// Refer to Object: Event.
	Event []*Ad_Display_Event `protobuf:"bytes,30,rep,name=event" json:"event,omitempty"`
}

func (x *Ad_Display) Reset() {
	*x = Ad_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display) ProtoMessage() {}

func (x *Ad_Display) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display.ProtoReflect.Descriptor instead.
func (*Ad_Display) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ad_Display) GetMime() string {
	if x != nil && x.Mime != nil {
		return *x.Mime
	}
	return ""
}

func (x *Ad_Display) GetApi() int32 {
	if x != nil && x.Api != nil {
		return *x.Api
	}
	return 0
}

func (x *Ad_Display) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Ad_Display) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Ad_Display) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Ad_Display) GetWratio() int32 {
	if x != nil && x.Wratio != nil {
		return *x.Wratio
	}
	return 0
}

func (x *Ad_Display) GetHratio() int32 {
	if x != nil && x.Hratio != nil {
		return *x.Hratio
	}
	return 0
}

func (x *Ad_Display) GetPriv() string {
	if x != nil && x.Priv != nil {
		return *x.Priv
	}
	return ""
}

func (m *Ad_Display) GetCreativeOneof() isAd_Display_CreativeOneof {
	if m != nil {
		return m.CreativeOneof
	}
	return nil
}

func (x *Ad_Display) GetAdm() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Adm); ok {
		return x.Adm
	}
	return ""
}

func (x *Ad_Display) GetCurl() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Curl); ok {
		return x.Curl
	}
	return ""
}

func (x *Ad_Display) GetBanner() *Ad_Display_Banner {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Banner_); ok {
		return x.Banner
	}
	return nil
}

func (x *Ad_Display) GetNative() *Ad_Display_Native {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Native_); ok {
		return x.Native
	}
	return nil
}

func (x *Ad_Display) GetEvent() []*Ad_Display_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type isAd_Display_CreativeOneof interface {
	isAd_Display_CreativeOneof()
}

type Ad_Display_Adm struct {
	// General display markup (e.g., HTML, AMPHTML) if not using a structured alternative
	// (e.g., "banner", "native").
	Adm string `protobuf:"bytes,20,opt,name=adm,oneof"`
}

type Ad_Display_Curl struct {
	// Optional means of retrieving display markup by reference; a URL that can return HTML,
	// AMPHTML, or a collection native "Asset" object and their subordinates). If this ad is matched
	// to a Placement specification, the "Placement.ref" attribute indicates if this markup
	// retrieval option is supported.
	Curl string `protobuf:"bytes,21,opt,name=curl,oneof"`
}

type Ad_Display_Banner_ struct {
	// Structured banner image object, recommended for simple banner creatives.
	// Refer to Object: Banner.
	Banner *Ad_Display_Banner `protobuf:"bytes,22,opt,name=banner,oneof"`
}

type Ad_Display_Native_ struct {
	// Structured native object, recommended for native ads.
	// Refer to Object: Native.
	Native *Ad_Display_Native `protobuf:"bytes,23,opt,name=native,oneof"`
}

func (*Ad_Display_Adm) isAd_Display_CreativeOneof() {}

func (*Ad_Display_Curl) isAd_Display_CreativeOneof() {}

func (*Ad_Display_Banner_) isAd_Display_CreativeOneof() {}

func (*Ad_Display_Native_) isAd_Display_CreativeOneof() {}

// *
// This object provides additional detail about an ad specifically for video ads.
type Ad_Video struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Mime type(s) of the ad creative(s) (e.g., "video/mp4").
	Mime []string `protobuf:"bytes,1,rep,name=mime" json:"mime,omitempty"`
	// API required by the ad if applicable.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,2,rep,name=api" json:"api,omitempty"`
	// Subtype of video creative.
	// Refer to List: com.iabtechlab.adcom.v1.enums.Creative.AudioVideoType.
	Ctype []int32 `protobuf:"varint,3,rep,name=ctype" json:"ctype,omitempty"`
	// Duration of the video creative in seconds.
	Dur *int32 `protobuf:"varint,4,opt,name=dur" json:"dur,omitempty"`
	// Video markup (e.g., VAST).
	//
	// Types that are assignable to CreativeOneof:
	//
	//	*Ad_Video_Adm
	//	*Ad_Video_Curl
	CreativeOneof isAd_Video_CreativeOneof `protobuf_oneof:"creative_oneof"`
}

func (x *Ad_Video) Reset() {
	*x = Ad_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Video) ProtoMessage() {}

func (x *Ad_Video) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Video.ProtoReflect.Descriptor instead.
func (*Ad_Video) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ad_Video) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Ad_Video) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Ad_Video) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Ad_Video) GetDur() int32 {
	if x != nil && x.Dur != nil {
		return *x.Dur
	}
	return 0
}

func (m *Ad_Video) GetCreativeOneof() isAd_Video_CreativeOneof {
	if m != nil {
		return m.CreativeOneof
	}
	return nil
}

func (x *Ad_Video) GetAdm() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Video_Adm); ok {
		return x.Adm
	}
	return ""
}

func (x *Ad_Video) GetCurl() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Video_Curl); ok {
		return x.Curl
	}
	return ""
}

type isAd_Video_CreativeOneof interface {
	isAd_Video_CreativeOneof()
}

type Ad_Video_Adm struct {
	// Video markup (e.g., VAST document) for the asset.
	Adm string `protobuf:"bytes,5,opt,name=adm,oneof"`
}

type Ad_Video_Curl struct {
	// A URL that returns the video markup (e.g., VAST document) for the asset. If this ad
	// is matched to a placement specification, the "Placement.ref" attribute indicates if
	// this markup retrieval option is supported.
	Curl string `protobuf:"bytes,6,opt,name=curl,oneof"`
}

func (*Ad_Video_Adm) isAd_Video_CreativeOneof() {}

func (*Ad_Video_Curl) isAd_Video_CreativeOneof() {}

// *
// This object provides additional detail about an ad specifically for audio ads.
type Ad_Audio struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Mime type(s) of the ad creative(s) (e.g., "audio/mp4").
	Mime []string `protobuf:"bytes,1,rep,name=mime" json:"mime,omitempty"`
	// API required by the ad if applicable.
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,2,rep,name=api" json:"api,omitempty"`
	// Subtype of audio creative.
	// Refer to List: com.iabtechlab.adcom.v1.enums.Creative.AudioVideoType.
	Ctype []int32 `protobuf:"varint,3,rep,name=ctype" json:"ctype,omitempty"`
	// Duration of the audio creative in seconds.
	Dur *int32 `protobuf:"varint,4,opt,name=dur" json:"dur,omitempty"`
	// Audio markup (e.g., DAAST).
	//
	// Types that are assignable to CreativeOneof:
	//
	//	*Ad_Audio_Adm
	//	*Ad_Audio_Curl
	CreativeOneof isAd_Audio_CreativeOneof `protobuf_oneof:"creative_oneof"`
}

func (x *Ad_Audio) Reset() {
	*x = Ad_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Audio) ProtoMessage() {}

func (x *Ad_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Audio.ProtoReflect.Descriptor instead.
func (*Ad_Audio) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ad_Audio) GetMime() []string {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *Ad_Audio) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Ad_Audio) GetCtype() []int32 {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *Ad_Audio) GetDur() int32 {
	if x != nil && x.Dur != nil {
		return *x.Dur
	}
	return 0
}

func (m *Ad_Audio) GetCreativeOneof() isAd_Audio_CreativeOneof {
	if m != nil {
		return m.CreativeOneof
	}
	return nil
}

func (x *Ad_Audio) GetAdm() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Audio_Adm); ok {
		return x.Adm
	}
	return ""
}

func (x *Ad_Audio) GetCurl() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Audio_Curl); ok {
		return x.Curl
	}
	return ""
}

type isAd_Audio_CreativeOneof interface {
	isAd_Audio_CreativeOneof()
}

type Ad_Audio_Adm struct {
	// Audio markup (e.g., DAAST document) for the asset.
	Adm string `protobuf:"bytes,5,opt,name=adm,oneof"`
}

type Ad_Audio_Curl struct {
	// A URL that returns the audio markup (e.g., DAAST document) for the asset. If this ad
	// is matched to a placement specification, the "Placement.ref" attribute indicates if
	// this markup retrieval option is supported.
	Curl string `protobuf:"bytes,6,opt,name=curl,oneof"`
}

func (*Ad_Audio_Adm) isAd_Audio_CreativeOneof() {}

func (*Ad_Audio_Curl) isAd_Audio_CreativeOneof() {}

// *
// This objects represents the outcome of some form of review of the ad. This is typical, for
// example, when scanning for malware or otherwise performing ad quality reviews.
type Ad_Audit struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The audit status of the ad. Refer to List: com.iabtechlab.adcom.v1.enums.AuditStatusCode.
	Status *int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// One or more human-readable explanations as to reasons for rejection or any changes to fields
	// for ad quality reasons (e.g., "adomain", "cat", "attr", etc.)
	Feedback []string `protobuf:"bytes,2,rep,name=feedback" json:"feedback,omitempty"`
	// Date/time of the original instantiation of this object in the format of ISO-8601; W3C
	// profile. Refer to www.w3.org/TR/NOTE-datetime.
	Init *string `protobuf:"bytes,3,opt,name=init" json:"init,omitempty"`
	// Date/time of the original instantiation of this object in the format of ISO-8601; W3C
	// profile. Refer to www.w3.org/TR/NOTE-datetime.
	Lastmod *string `protobuf:"bytes,4,opt,name=lastmod" json:"lastmod,omitempty"`
	// Correction object wherein the auditor can specify changes to attributes of the "Ad" object or
	// its children they believe to be proper. For example, if the original "Ad" indicated a
	// category of "IAB3", but the auditor deems the correct category to be "IAB13", then "corr"
	// could include a sparse "Ad" object including just the "cat" array indicating "IAB13".
	Corr []byte `protobuf:"bytes,5,opt,name=corr" json:"corr,omitempty"`
}

func (x *Ad_Audit) Reset() {
	*x = Ad_Audit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Audit) ProtoMessage() {}

func (x *Ad_Audit) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Audit.ProtoReflect.Descriptor instead.
func (*Ad_Audit) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ad_Audit) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Ad_Audit) GetFeedback() []string {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *Ad_Audit) GetInit() string {
	if x != nil && x.Init != nil {
		return *x.Init
	}
	return ""
}

func (x *Ad_Audit) GetLastmod() string {
	if x != nil && x.Lastmod != nil {
		return *x.Lastmod
	}
	return ""
}

func (x *Ad_Audit) GetCorr() []byte {
	if x != nil {
		return x.Corr
	}
	return nil
}

// *
// This object describes a basic banner creative. It is intended for display scenarios that
// require a simple, structured image/link pair and is more secure than allowing arbitrary HTML
// or JavaScript code.
type Ad_Display_Banner struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// A URL that will return the image.
	Img *string `protobuf:"bytes,1,opt,name=img" json:"img,omitempty"`
	// Destination URL if the image is activated (e.g., clicked). The attribute is not applicable
	// in some contexts (e.g., DOOH) and its inclusion does not guarantee it will be supported.
	Link *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
}

func (x *Ad_Display_Banner) Reset() {
	*x = Ad_Display_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Banner) ProtoMessage() {}

func (x *Ad_Display_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Banner.ProtoReflect.Descriptor instead.
func (*Ad_Display_Banner) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Ad_Display_Banner) GetImg() string {
	if x != nil && x.Img != nil {
		return *x.Img
	}
	return ""
}

func (x *Ad_Display_Banner) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

// *
// This object is the root of a structure that defines a native display ad.
type Ad_Display_Native struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Default destination link for the native ad overall; used if an asset is activated (e.g.,
	// clicked) that does not specify it's own destination link.
	// Refer to Object: LinkAsset.
	Link *Ad_Display_Native_Asset_LinkAsset `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	// Array of assets that comprise the native ad.
	// Refer to Object: Asset.
	Asset []*Ad_Display_Native_Asset `protobuf:"bytes,2,rep,name=asset" json:"asset,omitempty"`
}

func (x *Ad_Display_Native) Reset() {
	*x = Ad_Display_Native{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native) ProtoMessage() {}

func (x *Ad_Display_Native) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Ad_Display_Native) GetLink() *Ad_Display_Native_Asset_LinkAsset {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Ad_Display_Native) GetAsset() []*Ad_Display_Native_Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// *
// This object specifies a type of event that the advertiser or buying platform wants to track
// along with the information required to do so.
type Ad_Display_Event struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. Type of event to track.
	// Refer to List: com.iabtechlab.adcom.v1.enums.EventType.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Required. Method of tracking requested.
	// Refer to List: com.iabtechlab.adcom.v1.enums.EventTrackingMethod.
	Method *int32 `protobuf:"varint,2,opt,name=method" json:"method,omitempty"`
	// The APIs being used by the tracker; only relevant when the tracking method is JavaScript
	// Refer to List: com.iabtechlab.adcom.v1.enums.APIFramework.
	Api []int32 `protobuf:"varint,3,rep,name=api" json:"api,omitempty"`
	// The URL of the tracking pixel or JavaScript tag, respectively.
	// Required for Image-Pixel or JavaScript methods.
	Url *string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	// An array of key-value pairs to support vendor-specific data required for custom tracking.
	// For example, the account number of a buyer with a tracking company might be reprsented as:
	// {"acct": "123"}.
	Cdata map[string]string `protobuf:"bytes,5,rep,name=cdata" json:"cdata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Ad_Display_Event) Reset() {
	*x = Ad_Display_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Event) ProtoMessage() {}

func (x *Ad_Display_Event) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Event.ProtoReflect.Descriptor instead.
func (*Ad_Display_Event) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Ad_Display_Event) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Ad_Display_Event) GetMethod() int32 {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return 0
}

func (x *Ad_Display_Event) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Ad_Display_Event) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Ad_Display_Event) GetCdata() map[string]string {
	if x != nil {
		return x.Cdata
	}
	return nil
}

// *
// This object is the container for each asset comprising a native ad. Each asset is of a
// specific type and to reflect this, one and only one of the subtype objects (i.e., "title",
// "img", "video", "data") must be present; all others should be omitted.
type Ad_Display_Native_Asset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The value of "AssetFormat.id" if this ad references a specific native placement defined
	// by a "Placement" object and its structure.
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Indicates if the asset is required to be displayed, where 0 = no, 1 = yes.
	// Default is 0.
	Req *int32 `protobuf:"varint,2,opt,name=req" json:"req,omitempty"`
	// The specific asset type suboject that provides additional asset detail.
	//
	// Types that are assignable to AssetOneof:
	//
	//	*Ad_Display_Native_Asset_Title
	//	*Ad_Display_Native_Asset_Image
	//	*Ad_Display_Native_Asset_Video
	//	*Ad_Display_Native_Asset_Data
	//	*Ad_Display_Native_Asset_Link
	AssetOneof isAd_Display_Native_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
}

func (x *Ad_Display_Native_Asset) Reset() {
	*x = Ad_Display_Native_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Ad_Display_Native_Asset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ad_Display_Native_Asset) GetReq() int32 {
	if x != nil && x.Req != nil {
		return *x.Req
	}
	return 0
}

func (m *Ad_Display_Native_Asset) GetAssetOneof() isAd_Display_Native_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (x *Ad_Display_Native_Asset) GetTitle() *Ad_Display_Native_Asset_TitleAsset {
	if x, ok := x.GetAssetOneof().(*Ad_Display_Native_Asset_Title); ok {
		return x.Title
	}
	return nil
}

func (x *Ad_Display_Native_Asset) GetImage() *Ad_Display_Native_Asset_ImageAsset {
	if x, ok := x.GetAssetOneof().(*Ad_Display_Native_Asset_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Ad_Display_Native_Asset) GetVideo() *Ad_Display_Native_Asset_VideoAsset {
	if x, ok := x.GetAssetOneof().(*Ad_Display_Native_Asset_Video); ok {
		return x.Video
	}
	return nil
}

func (x *Ad_Display_Native_Asset) GetData() *Ad_Display_Native_Asset_DataAsset {
	if x, ok := x.GetAssetOneof().(*Ad_Display_Native_Asset_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Ad_Display_Native_Asset) GetLink() *Ad_Display_Native_Asset_LinkAsset {
	if x, ok := x.GetAssetOneof().(*Ad_Display_Native_Asset_Link); ok {
		return x.Link
	}
	return nil
}

type isAd_Display_Native_Asset_AssetOneof interface {
	isAd_Display_Native_Asset_AssetOneof()
}

type Ad_Display_Native_Asset_Title struct {
	Title *Ad_Display_Native_Asset_TitleAsset `protobuf:"bytes,3,opt,name=title,oneof"`
}

type Ad_Display_Native_Asset_Image struct {
	Image *Ad_Display_Native_Asset_ImageAsset `protobuf:"bytes,4,opt,name=image,oneof"`
}

type Ad_Display_Native_Asset_Video struct {
	Video *Ad_Display_Native_Asset_VideoAsset `protobuf:"bytes,5,opt,name=video,oneof"`
}

type Ad_Display_Native_Asset_Data struct {
	Data *Ad_Display_Native_Asset_DataAsset `protobuf:"bytes,6,opt,name=data,oneof"`
}

type Ad_Display_Native_Asset_Link struct {
	Link *Ad_Display_Native_Asset_LinkAsset `protobuf:"bytes,7,opt,name=link,oneof"`
}

func (*Ad_Display_Native_Asset_Title) isAd_Display_Native_Asset_AssetOneof() {}

func (*Ad_Display_Native_Asset_Image) isAd_Display_Native_Asset_AssetOneof() {}

func (*Ad_Display_Native_Asset_Video) isAd_Display_Native_Asset_AssetOneof() {}

func (*Ad_Display_Native_Asset_Data) isAd_Display_Native_Asset_AssetOneof() {}

func (*Ad_Display_Native_Asset_Link) isAd_Display_Native_Asset_AssetOneof() {}

// *
// This object identifies the native asset as a link asset and is used to define navigation
// for call-to-action or other activations (i.e., clicks). A link asset can be independent
// or associated with the overall native ad (i.e., a default for all assets).
type Ad_Display_Native_Asset_LinkAsset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. Landing URL of the clickable link.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Fallback URL for deep-link to be used if the URL specified in "url" is not supported by
	// the device.
	Urlfb *string `protobuf:"bytes,2,opt,name=urlfb" json:"urlfb,omitempty"`
	// List of third-party tracker URLs to be fired on click.
	Trkr []string `protobuf:"bytes,3,rep,name=trkr" json:"trkr,omitempty"`
}

func (x *Ad_Display_Native_Asset_LinkAsset) Reset() {
	*x = Ad_Display_Native_Asset_LinkAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset_LinkAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset_LinkAsset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset_LinkAsset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset_LinkAsset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset_LinkAsset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Ad_Display_Native_Asset_LinkAsset) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Ad_Display_Native_Asset_LinkAsset) GetUrlfb() string {
	if x != nil && x.Urlfb != nil {
		return *x.Urlfb
	}
	return ""
}

func (x *Ad_Display_Native_Asset_LinkAsset) GetTrkr() []string {
	if x != nil {
		return x.Trkr
	}
	return nil
}

// *
// This object identifies the native asset as a title asset, which is essentially just a
// plain text string with specified length.
type Ad_Display_Native_Asset_TitleAsset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. The text content of the text element.
	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// The length of the contents of the "text" attribute.
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *Ad_Display_Native_Asset_TitleAsset) Reset() {
	*x = Ad_Display_Native_Asset_TitleAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset_TitleAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset_TitleAsset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset_TitleAsset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset_TitleAsset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset_TitleAsset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *Ad_Display_Native_Asset_TitleAsset) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Ad_Display_Native_Asset_TitleAsset) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

// *
// This object identifies the native asset as a image asset. Image assets are use for such
// elements as the actual creative images and icons.
type Ad_Display_Native_Asset_ImageAsset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. A URL that returns the image for the asset.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Recommended. Width of the image asset in device independent pixels (DIPS).
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Recommended. Height of the image asset in device independent pixels (DIPS).
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	// The type of image represented by this asset. Refer to List: com.iabtechlab.adcom.v1.enums.NativeImageAssetType.
	Type *int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
}

func (x *Ad_Display_Native_Asset_ImageAsset) Reset() {
	*x = Ad_Display_Native_Asset_ImageAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset_ImageAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset_ImageAsset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset_ImageAsset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset_ImageAsset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset_ImageAsset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0, 2}
}

func (x *Ad_Display_Native_Asset_ImageAsset) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Ad_Display_Native_Asset_ImageAsset) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Ad_Display_Native_Asset_ImageAsset) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Ad_Display_Native_Asset_ImageAsset) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

// *
// This object identifies the native asset as a video asset. Video markup (e.g., VAST) must
// be either included or referenced.
type Ad_Display_Native_Asset_VideoAsset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. Represents one of the two ways of making video markup available.
	//
	// Types that are assignable to CreativeOneof:
	//
	//	*Ad_Display_Native_Asset_VideoAsset_Adm
	//	*Ad_Display_Native_Asset_VideoAsset_Curl
	CreativeOneof isAd_Display_Native_Asset_VideoAsset_CreativeOneof `protobuf_oneof:"creative_oneof"`
}

func (x *Ad_Display_Native_Asset_VideoAsset) Reset() {
	*x = Ad_Display_Native_Asset_VideoAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset_VideoAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset_VideoAsset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset_VideoAsset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset_VideoAsset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset_VideoAsset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0, 3}
}

func (m *Ad_Display_Native_Asset_VideoAsset) GetCreativeOneof() isAd_Display_Native_Asset_VideoAsset_CreativeOneof {
	if m != nil {
		return m.CreativeOneof
	}
	return nil
}

func (x *Ad_Display_Native_Asset_VideoAsset) GetAdm() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Native_Asset_VideoAsset_Adm); ok {
		return x.Adm
	}
	return ""
}

func (x *Ad_Display_Native_Asset_VideoAsset) GetCurl() string {
	if x, ok := x.GetCreativeOneof().(*Ad_Display_Native_Asset_VideoAsset_Curl); ok {
		return x.Curl
	}
	return ""
}

type isAd_Display_Native_Asset_VideoAsset_CreativeOneof interface {
	isAd_Display_Native_Asset_VideoAsset_CreativeOneof()
}

type Ad_Display_Native_Asset_VideoAsset_Adm struct {
	// Video markup (e.g., VAST document) for the asset.
	Adm string `protobuf:"bytes,1,opt,name=adm,oneof"`
}

type Ad_Display_Native_Asset_VideoAsset_Curl struct {
	// A URL that returns the video markup (e.g., VAST document) for the asset. If this ad
	// is matched to a placement specification, the "Placement.ref" attribute indicates if
	// this markup retrieval option is supported.
	Curl string `protobuf:"bytes,2,opt,name=curl,oneof"`
}

func (*Ad_Display_Native_Asset_VideoAsset_Adm) isAd_Display_Native_Asset_VideoAsset_CreativeOneof() {}

func (*Ad_Display_Native_Asset_VideoAsset_Curl) isAd_Display_Native_Asset_VideoAsset_CreativeOneof() {
}

// *
// This object identifies the native asset as a data asset. A data asset is used for all
// miscellaneous elements such as brand name, ratings, stars, review count, downloads,
// price, counts, etc. It is purposefully generic to support native elements not currently
// contemplated by this specification.
type Ad_Display_Native_Asset_DataAsset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required. A formatted string of data to be displayed (e.g., "5 stars", "3.4 stars out
	// of 5", "$10", etc.).
	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// The length of the "value" contents. This length should conform to recommendations
	// provided in List: Native Data Asset Types, where applicable.
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	// The type of data represented by this asset. Refer to List: com.iabtechlab.adcom.v1.enums.NativeDataAssetType.
	Type *int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (x *Ad_Display_Native_Asset_DataAsset) Reset() {
	*x = Ad_Display_Native_Asset_DataAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad_Display_Native_Asset_DataAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad_Display_Native_Asset_DataAsset) ProtoMessage() {}

func (x *Ad_Display_Native_Asset_DataAsset) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad_Display_Native_Asset_DataAsset.ProtoReflect.Descriptor instead.
func (*Ad_Display_Native_Asset_DataAsset) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP(), []int{0, 0, 1, 0, 4}
}

func (x *Ad_Display_Native_Asset_DataAsset) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Ad_Display_Native_Asset_DataAsset) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ad_Display_Native_Asset_DataAsset) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

var File_com_iabtechlab_adcom_v1_media_media_proto protoreflect.FileDescriptor

var file_com_iabtechlab_adcom_v1_media_media_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x93, 0x16, 0x0a, 0x02, 0x41, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12,
	0x19, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x32, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x6d, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x6d,
	0x6f, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63,
	0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x3d, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a, 0xa7, 0x0e, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77,
	0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x72, 0x69, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72,
	0x69, 0x76, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x64, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x64, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x06,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63,
	0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x35, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x2a, 0x05, 0x08, 0x64, 0x10,
	0x90, 0x4e, 0x1a, 0xb9, 0x08, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x54, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x4c, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x1a, 0x83, 0x07, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x59, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x56,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x4e,
	0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x72, 0x6c, 0x66, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x72,
	0x6c, 0x66, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x6b, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x72, 0x6b, 0x72, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x39,
	0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c,
	0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x55, 0x0a, 0x0a, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e,
	0x1a, 0x4f, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x03, 0x61, 0x64, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x64, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42,
	0x10, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x1a, 0x4e, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90,
	0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xea,
	0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x50, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10,
	0x90, 0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x75,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x03,
	0x61, 0x64, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x6d,
	0x12, 0x14, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x75, 0x72, 0x6c, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x10, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x1a,
	0x98, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x64, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x64, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x63,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x75, 0x72,
	0x6c, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x84, 0x01, 0x0a, 0x05, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x72, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90,
	0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x94, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x0a, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2f,
	0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0xa2, 0x02, 0x05, 0x43, 0x49, 0x41, 0x56, 0x4d, 0xaa, 0x02, 0x1d,
	0x43, 0x6f, 0x6d, 0x2e, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xca, 0x02, 0x1d,
	0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xe2, 0x02, 0x29,
	0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x43, 0x6f, 0x6d, 0x3a,
	0x3a, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x41, 0x64, 0x63,
	0x6f, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x4d, 0x65, 0x64, 0x69, 0x61,
}

var (
	file_com_iabtechlab_adcom_v1_media_media_proto_rawDescOnce sync.Once
	file_com_iabtechlab_adcom_v1_media_media_proto_rawDescData = file_com_iabtechlab_adcom_v1_media_media_proto_rawDesc
)

func file_com_iabtechlab_adcom_v1_media_media_proto_rawDescGZIP() []byte {
	file_com_iabtechlab_adcom_v1_media_media_proto_rawDescOnce.Do(func() {
		file_com_iabtechlab_adcom_v1_media_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_iabtechlab_adcom_v1_media_media_proto_rawDescData)
	})
	return file_com_iabtechlab_adcom_v1_media_media_proto_rawDescData
}

var file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_iabtechlab_adcom_v1_media_media_proto_goTypes = []any{
	(*Ad)(nil),                                 // 0: com.iabtechlab.adcom.v1.media.Ad
	(*Ad_Display)(nil),                         // 1: com.iabtechlab.adcom.v1.media.Ad.Display
	(*Ad_Video)(nil),                           // 2: com.iabtechlab.adcom.v1.media.Ad.Video
	(*Ad_Audio)(nil),                           // 3: com.iabtechlab.adcom.v1.media.Ad.Audio
	(*Ad_Audit)(nil),                           // 4: com.iabtechlab.adcom.v1.media.Ad.Audit
	(*Ad_Display_Banner)(nil),                  // 5: com.iabtechlab.adcom.v1.media.Ad.Display.Banner
	(*Ad_Display_Native)(nil),                  // 6: com.iabtechlab.adcom.v1.media.Ad.Display.Native
	(*Ad_Display_Event)(nil),                   // 7: com.iabtechlab.adcom.v1.media.Ad.Display.Event
	(*Ad_Display_Native_Asset)(nil),            // 8: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset
	(*Ad_Display_Native_Asset_LinkAsset)(nil),  // 9: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.LinkAsset
	(*Ad_Display_Native_Asset_TitleAsset)(nil), // 10: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.TitleAsset
	(*Ad_Display_Native_Asset_ImageAsset)(nil), // 11: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.ImageAsset
	(*Ad_Display_Native_Asset_VideoAsset)(nil), // 12: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.VideoAsset
	(*Ad_Display_Native_Asset_DataAsset)(nil),  // 13: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.DataAsset
	nil, // 14: com.iabtechlab.adcom.v1.media.Ad.Display.Event.CdataEntry
}
var file_com_iabtechlab_adcom_v1_media_media_proto_depIdxs = []int32{
	1,  // 0: com.iabtechlab.adcom.v1.media.Ad.display:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display
	2,  // 1: com.iabtechlab.adcom.v1.media.Ad.video:type_name -> com.iabtechlab.adcom.v1.media.Ad.Video
	3,  // 2: com.iabtechlab.adcom.v1.media.Ad.audio:type_name -> com.iabtechlab.adcom.v1.media.Ad.Audio
	4,  // 3: com.iabtechlab.adcom.v1.media.Ad.audit:type_name -> com.iabtechlab.adcom.v1.media.Ad.Audit
	5,  // 4: com.iabtechlab.adcom.v1.media.Ad.Display.banner:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Banner
	6,  // 5: com.iabtechlab.adcom.v1.media.Ad.Display.native:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native
	7,  // 6: com.iabtechlab.adcom.v1.media.Ad.Display.event:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Event
	9,  // 7: com.iabtechlab.adcom.v1.media.Ad.Display.Native.link:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.LinkAsset
	8,  // 8: com.iabtechlab.adcom.v1.media.Ad.Display.Native.asset:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset
	14, // 9: com.iabtechlab.adcom.v1.media.Ad.Display.Event.cdata:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Event.CdataEntry
	10, // 10: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.title:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.TitleAsset
	11, // 11: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.image:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.ImageAsset
	12, // 12: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.video:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.VideoAsset
	13, // 13: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.data:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.DataAsset
	9,  // 14: com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.link:type_name -> com.iabtechlab.adcom.v1.media.Ad.Display.Native.Asset.LinkAsset
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_com_iabtechlab_adcom_v1_media_media_proto_init() }
func file_com_iabtechlab_adcom_v1_media_media_proto_init() {
	if File_com_iabtechlab_adcom_v1_media_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Ad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Audit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset_LinkAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset_TitleAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset_ImageAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset_VideoAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Ad_Display_Native_Asset_DataAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[0].OneofWrappers = []any{
		(*Ad_Display_)(nil),
		(*Ad_Video_)(nil),
		(*Ad_Audio_)(nil),
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[1].OneofWrappers = []any{
		(*Ad_Display_Adm)(nil),
		(*Ad_Display_Curl)(nil),
		(*Ad_Display_Banner_)(nil),
		(*Ad_Display_Native_)(nil),
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[2].OneofWrappers = []any{
		(*Ad_Video_Adm)(nil),
		(*Ad_Video_Curl)(nil),
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[3].OneofWrappers = []any{
		(*Ad_Audio_Adm)(nil),
		(*Ad_Audio_Curl)(nil),
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[8].OneofWrappers = []any{
		(*Ad_Display_Native_Asset_Title)(nil),
		(*Ad_Display_Native_Asset_Image)(nil),
		(*Ad_Display_Native_Asset_Video)(nil),
		(*Ad_Display_Native_Asset_Data)(nil),
		(*Ad_Display_Native_Asset_Link)(nil),
	}
	file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes[12].OneofWrappers = []any{
		(*Ad_Display_Native_Asset_VideoAsset_Adm)(nil),
		(*Ad_Display_Native_Asset_VideoAsset_Curl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_iabtechlab_adcom_v1_media_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_iabtechlab_adcom_v1_media_media_proto_goTypes,
		DependencyIndexes: file_com_iabtechlab_adcom_v1_media_media_proto_depIdxs,
		MessageInfos:      file_com_iabtechlab_adcom_v1_media_media_proto_msgTypes,
	}.Build()
	File_com_iabtechlab_adcom_v1_media_media_proto = out.File
	file_com_iabtechlab_adcom_v1_media_media_proto_rawDesc = nil
	file_com_iabtechlab_adcom_v1_media_media_proto_goTypes = nil
	file_com_iabtechlab_adcom_v1_media_media_proto_depIdxs = nil
}
