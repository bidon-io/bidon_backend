//*
// The following enumerations are referenced by attributes in AdCOM objects.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: com/iabtechlab/adcom/v1/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// This list identifies the user agent types a user identifier is from.
type AgentType int32

const (
	AgentType_AgentType_UNKNOWN AgentType = 0
	AgentType_WEB               AgentType = 1
	AgentType_APP               AgentType = 2
	AgentType_PERSON_BASED      AgentType = 3
)

// Enum value maps for AgentType.
var (
	AgentType_name = map[int32]string{
		0: "AgentType_UNKNOWN",
		1: "WEB",
		2: "APP",
		3: "PERSON_BASED",
	}
	AgentType_value = map[string]int32{
		"AgentType_UNKNOWN": 0,
		"WEB":               1,
		"APP":               2,
		"PERSON_BASED":      3,
	}
)

func (x AgentType) Enum() *AgentType {
	p := new(AgentType)
	*p = x
	return p
}

func (x AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[0].Descriptor()
}

func (AgentType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[0]
}

func (x AgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentType(num)
	return nil
}

// Deprecated: Use AgentType.Descriptor instead.
func (AgentType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{0}
}

// *
// The following enum is a list of API frameworks either supported by a placement or required
// by an ad.
type APIFramework int32

const (
	APIFramework_APIFramework_UNKNOWN APIFramework = 0 // Equivalent to an unset value.
	APIFramework_VPAID_1_0            APIFramework = 1 // VPAID 1.0
	APIFramework_VPAID_2_0            APIFramework = 2 // VPAID 2.0
	APIFramework_MRAID_1_0            APIFramework = 3 // MRAID 1.0
	APIFramework_ORMMA                APIFramework = 4 // ORMMA
	APIFramework_MRAID_2_0            APIFramework = 5 // MRAID 2.0
	APIFramework_MRAID_3_0            APIFramework = 6 // MRAID 3.0
	APIFramework_OMID_1_0             APIFramework = 7 // OMID 1.0
	APIFramework_SIMID_1_0            APIFramework = 8 // SIMID 1.0
	APIFramework_SIMID_1_1            APIFramework = 9 // SIMID 1.1
)

// Enum value maps for APIFramework.
var (
	APIFramework_name = map[int32]string{
		0: "APIFramework_UNKNOWN",
		1: "VPAID_1_0",
		2: "VPAID_2_0",
		3: "MRAID_1_0",
		4: "ORMMA",
		5: "MRAID_2_0",
		6: "MRAID_3_0",
		7: "OMID_1_0",
		8: "SIMID_1_0",
		9: "SIMID_1_1",
	}
	APIFramework_value = map[string]int32{
		"APIFramework_UNKNOWN": 0,
		"VPAID_1_0":            1,
		"VPAID_2_0":            2,
		"MRAID_1_0":            3,
		"ORMMA":                4,
		"MRAID_2_0":            5,
		"MRAID_3_0":            6,
		"OMID_1_0":             7,
		"SIMID_1_0":            8,
		"SIMID_1_1":            9,
	}
)

func (x APIFramework) Enum() *APIFramework {
	p := new(APIFramework)
	*p = x
	return p
}

func (x APIFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[1].Descriptor()
}

func (APIFramework) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[1]
}

func (x APIFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *APIFramework) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = APIFramework(num)
	return nil
}

// Deprecated: Use APIFramework.Descriptor instead.
func (APIFramework) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{1}
}

// *
// The following enum lists the codes used in "Audit" objects to reflect status or workflow state.
type AuditStatusCode int32

const (
	// Equivalent to an unset value.
	AuditStatusCode_AuditStatusCode_UNKNOWN AuditStatusCode = 0
	// Pending Audit: An audit has not yet been completed on this ad. A recommendation cannot be made
	// to use this ad, but vendors' policies may override.
	AuditStatusCode_PENDING_AUDIT AuditStatusCode = 1
	// Pre-Approved: An audit has not yet been completed on this ad. Subject to vendors' policies, it
	// can be recommended for use. However, once the audit has been completed, its status will change
	// and it may or may not be approved for continued use.
	AuditStatusCode_PREAPPROVED AuditStatusCode = 2
	// Approved: The audit is complete and the ad is approved for use. Note, however, that some
	// attributes (e.g., "adomain", "cat", "attr", etc.) may have been changed in the process by the
	// auditor.
	AuditStatusCode_APPROVED AuditStatusCode = 3
	// Denied: The audit is complete, but the ad has been found unacceptable in some material aspect
	// and is disapproved for use.
	AuditStatusCode_DENIED AuditStatusCode = 4
	// Changed; Resubmission Requested: A version of the ad has been detected in use that is
	// materially different from the version that was previously audited, which may result in
	// rejection during use until the ad is resubmitted for audit and approved. Vendors need to
	// communicate offline as to the criteria that constitutes a material change.
	AuditStatusCode_CHANGE_RESUBMIT AuditStatusCode = 5
)

// Enum value maps for AuditStatusCode.
var (
	AuditStatusCode_name = map[int32]string{
		0: "AuditStatusCode_UNKNOWN",
		1: "PENDING_AUDIT",
		2: "PREAPPROVED",
		3: "APPROVED",
		4: "DENIED",
		5: "CHANGE_RESUBMIT",
	}
	AuditStatusCode_value = map[string]int32{
		"AuditStatusCode_UNKNOWN": 0,
		"PENDING_AUDIT":           1,
		"PREAPPROVED":             2,
		"APPROVED":                3,
		"DENIED":                  4,
		"CHANGE_RESUBMIT":         5,
	}
)

func (x AuditStatusCode) Enum() *AuditStatusCode {
	p := new(AuditStatusCode)
	*p = x
	return p
}

func (x AuditStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[2].Descriptor()
}

func (AuditStatusCode) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[2]
}

func (x AuditStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuditStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuditStatusCode(num)
	return nil
}

// Deprecated: Use AuditStatusCode.Descriptor instead.
func (AuditStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{2}
}

// *
// This enum lists the options for taxonomies that can be used to describe content, audience, and
// ad creative categories.
// http://www.iab.com/guidelines/taxonomy
type CategoryTaxonomy int32

const (
	CategoryTaxonomy_CategoryTaxonomy_UNKNOWN CategoryTaxonomy = 0 // Equivalent to an unset value.
	CategoryTaxonomy_IAB_CONTENT_CAT_TAX_1_0  CategoryTaxonomy = 1 // IAB Tech Lab Content Category Taxonomy 1.0 - Deprecated, and recommend NOT be used since it does not have SCD flags.
	CategoryTaxonomy_IAB_CONTENT_CAT_TAX_2_0  CategoryTaxonomy = 2 // IAB Tech Lab Content Category Taxonomy 2.0 - Deprecated, and recommend NOT be used since it does not have SCD flags.
	CategoryTaxonomy_IAB_AD_PROD_TAX_1_0      CategoryTaxonomy = 3 // IAB Tech Lab Ad Product Taxonomy 1.0 - See https://iabtechlab.com/wp-content/uploads/2020/10/IABTL-Ad-Product-Taxonomy-1.0-Final.xlsx
	CategoryTaxonomy_IAB_AUDIENCE_TAX_1_1     CategoryTaxonomy = 4 // IAB Tech Lab Audience Taxonomy 1.1 - See https://iabtechlab.com/standards/audience-taxonomy/
	CategoryTaxonomy_IAB_CONTENT_CAT_TAX_2_1  CategoryTaxonomy = 5 // IAB Tech Lab Content Category Taxonomy 1.1 - See https://iabtechlab.com/standards/content-taxonomy/
	CategoryTaxonomy_IAB_CONTENT_CAT_TAX_2_2  CategoryTaxonomy = 6 // IAB Tech Lab Content Category Taxonomy 2.2 - See https://iabtechlab.com/standards/content-taxonomy/
)

// Enum value maps for CategoryTaxonomy.
var (
	CategoryTaxonomy_name = map[int32]string{
		0: "CategoryTaxonomy_UNKNOWN",
		1: "IAB_CONTENT_CAT_TAX_1_0",
		2: "IAB_CONTENT_CAT_TAX_2_0",
		3: "IAB_AD_PROD_TAX_1_0",
		4: "IAB_AUDIENCE_TAX_1_1",
		5: "IAB_CONTENT_CAT_TAX_2_1",
		6: "IAB_CONTENT_CAT_TAX_2_2",
	}
	CategoryTaxonomy_value = map[string]int32{
		"CategoryTaxonomy_UNKNOWN": 0,
		"IAB_CONTENT_CAT_TAX_1_0":  1,
		"IAB_CONTENT_CAT_TAX_2_0":  2,
		"IAB_AD_PROD_TAX_1_0":      3,
		"IAB_AUDIENCE_TAX_1_1":     4,
		"IAB_CONTENT_CAT_TAX_2_1":  5,
		"IAB_CONTENT_CAT_TAX_2_2":  6,
	}
)

func (x CategoryTaxonomy) Enum() *CategoryTaxonomy {
	p := new(CategoryTaxonomy)
	*p = x
	return p
}

func (x CategoryTaxonomy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryTaxonomy) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[3].Descriptor()
}

func (CategoryTaxonomy) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[3]
}

func (x CategoryTaxonomy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CategoryTaxonomy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CategoryTaxonomy(num)
	return nil
}

// Deprecated: Use CategoryTaxonomy.Descriptor instead.
func (CategoryTaxonomy) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{3}
}

// *
// The following enum defines the types of creative action (i.e., click) behavior types.
type ClickType int32

const (
	ClickType_NON_CLICKABLE      ClickType = 0 // Non-Clickable
	ClickType_CLICKABLE_UNKNOWN  ClickType = 1 // Details Unknown
	ClickType_CLICKABLE_EMBEDDED ClickType = 2 // Embedded Browser/Webview
	ClickType_CLICKABLE_NATIVE   ClickType = 3 // Native Browser
)

// Enum value maps for ClickType.
var (
	ClickType_name = map[int32]string{
		0: "NON_CLICKABLE",
		1: "CLICKABLE_UNKNOWN",
		2: "CLICKABLE_EMBEDDED",
		3: "CLICKABLE_NATIVE",
	}
	ClickType_value = map[string]int32{
		"NON_CLICKABLE":      0,
		"CLICKABLE_UNKNOWN":  1,
		"CLICKABLE_EMBEDDED": 2,
		"CLICKABLE_NATIVE":   3,
	}
)

func (x ClickType) Enum() *ClickType {
	p := new(ClickType)
	*p = x
	return p
}

func (x ClickType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[4].Descriptor()
}

func (ClickType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[4]
}

func (x ClickType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClickType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClickType(num)
	return nil
}

// Deprecated: Use ClickType.Descriptor instead.
func (ClickType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{4}
}

// *
// The following enum defines the options to indicate markup types allowed for companion ads that
// apply to video and audio ads. This enum is derived from VAST 2.0+ and DAAST 1.0+ specifications.
type CompanionType int32

const (
	CompanionType_CompanionType_UNKNOWN CompanionType = 0 // Equivalent to an unset value.
	CompanionType_STATIC_RSRC           CompanionType = 1 // Static resource.
	CompanionType_HTML_RSRC             CompanionType = 2 // HTML resource.
	CompanionType_IFRAME_RSRC           CompanionType = 3 // Iframe resource.
)

// Enum value maps for CompanionType.
var (
	CompanionType_name = map[int32]string{
		0: "CompanionType_UNKNOWN",
		1: "STATIC_RSRC",
		2: "HTML_RSRC",
		3: "IFRAME_RSRC",
	}
	CompanionType_value = map[string]int32{
		"CompanionType_UNKNOWN": 0,
		"STATIC_RSRC":           1,
		"HTML_RSRC":             2,
		"IFRAME_RSRC":           3,
	}
)

func (x CompanionType) Enum() *CompanionType {
	p := new(CompanionType)
	*p = x
	return p
}

func (x CompanionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[5].Descriptor()
}

func (CompanionType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[5]
}

func (x CompanionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompanionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompanionType(num)
	return nil
}

// Deprecated: Use CompanionType.Descriptor instead.
func (CompanionType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{5}
}

// *
// The following enum defines the options for the type of device connectivity.
type ConnectionType int32

const (
	ConnectionType_ConnectionType_UNKNOWN ConnectionType = 0 // Equivalent to an unset value.
	ConnectionType_WIRED                  ConnectionType = 1 // Wired ethernet connection.
	ConnectionType_WIFI                   ConnectionType = 2 // WIFI.
	ConnectionType_CELL_UNKNOWN           ConnectionType = 3 // Cellular Network - unknown generation.
	ConnectionType_CELL_2G                ConnectionType = 4 // Cellular Network - 2g.
	ConnectionType_CELL_3G                ConnectionType = 5 // Cellular Network - 3g.
	ConnectionType_CELL_4G                ConnectionType = 6 // Cellular Network - 4g.
	ConnectionType_CELL_5G                ConnectionType = 7 // Cellular Network - 5g.
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "ConnectionType_UNKNOWN",
		1: "WIRED",
		2: "WIFI",
		3: "CELL_UNKNOWN",
		4: "CELL_2G",
		5: "CELL_3G",
		6: "CELL_4G",
		7: "CELL_5G",
	}
	ConnectionType_value = map[string]int32{
		"ConnectionType_UNKNOWN": 0,
		"WIRED":                  1,
		"WIFI":                   2,
		"CELL_UNKNOWN":           3,
		"CELL_2G":                4,
		"CELL_3G":                5,
		"CELL_4G":                6,
		"CELL_5G":                7,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[6].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[6]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionType(num)
	return nil
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{6}
}

// *
// The following enum defines the various options for indicating the type of content being used or
// consumed by the user in which ads may appear. This enum has values derived from the TAG
// Inventory Quality Guidelines (IQG).
type ContentContext int32

const (
	ContentContext_ContentContext_UNKNOWN ContentContext = 0 // Equivalent to an unset value.
	ContentContext_VIDEO                  ContentContext = 1 // Video (i.e., video file or stream such as Internet TV broadcasts).
	ContentContext_GAME                   ContentContext = 2 // Game (i.e., an interactive software game).
	ContentContext_MUSIC                  ContentContext = 3 // Music (i.e., audio file or stream such as Internet radio broadcasts).
	ContentContext_APPLICATION            ContentContext = 4 // Application (i.e., an interactive software application).
	ContentContext_TEXT                   ContentContext = 5 // Text (i.e., primarily textual document such as a web page, eBook, or news article).
	ContentContext_OTHER                  ContentContext = 6 // Other (i.e., none of the other categories applies).
	ContentContext_NOTKNOWN               ContentContext = 7 // Unknown content context.
)

// Enum value maps for ContentContext.
var (
	ContentContext_name = map[int32]string{
		0: "ContentContext_UNKNOWN",
		1: "VIDEO",
		2: "GAME",
		3: "MUSIC",
		4: "APPLICATION",
		5: "TEXT",
		6: "OTHER",
		7: "NOTKNOWN",
	}
	ContentContext_value = map[string]int32{
		"ContentContext_UNKNOWN": 0,
		"VIDEO":                  1,
		"GAME":                   2,
		"MUSIC":                  3,
		"APPLICATION":            4,
		"TEXT":                   5,
		"OTHER":                  6,
		"NOTKNOWN":               7,
	}
)

func (x ContentContext) Enum() *ContentContext {
	p := new(ContentContext)
	*p = x
	return p
}

func (x ContentContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentContext) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[7].Descriptor()
}

func (ContentContext) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[7]
}

func (x ContentContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentContext) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentContext(num)
	return nil
}

// Deprecated: Use ContentContext.Descriptor instead.
func (ContentContext) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{7}
}

// *
// The following enum defines the various options for the delivery of video or audio content.
type DeliveryMethod int32

const (
	DeliveryMethod_DeliveryMethod_UNKNOWN DeliveryMethod = 0 // Equivalent to an unset value.
	DeliveryMethod_STREAMING              DeliveryMethod = 1 // Streaming video or audio.
	DeliveryMethod_PROGRESSIVE            DeliveryMethod = 2 // Progressive video or audio.
	DeliveryMethod_DOWNLOAD               DeliveryMethod = 3 // Downloadable video or audio.
)

// Enum value maps for DeliveryMethod.
var (
	DeliveryMethod_name = map[int32]string{
		0: "DeliveryMethod_UNKNOWN",
		1: "STREAMING",
		2: "PROGRESSIVE",
		3: "DOWNLOAD",
	}
	DeliveryMethod_value = map[string]int32{
		"DeliveryMethod_UNKNOWN": 0,
		"STREAMING":              1,
		"PROGRESSIVE":            2,
		"DOWNLOAD":               3,
	}
)

func (x DeliveryMethod) Enum() *DeliveryMethod {
	p := new(DeliveryMethod)
	*p = x
	return p
}

func (x DeliveryMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[8].Descriptor()
}

func (DeliveryMethod) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[8]
}

func (x DeliveryMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeliveryMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeliveryMethod(num)
	return nil
}

// Deprecated: Use DeliveryMethod.Descriptor instead.
func (DeliveryMethod) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{8}
}

// *
// The following enum defines the types of devies. This enum has values derived from the TAG
// Inventory Quality Guidelines (IQG).
type DeviceType int32

const (
	DeviceType_DeviceType_UNKNOWN DeviceType = 0 // Equivalent to an unset value.
	DeviceType_MOBILE_TABLET      DeviceType = 1 // Mobile/Tablet - General.
	DeviceType_PC                 DeviceType = 2 // Personal Computer.
	DeviceType_CONNECTED_TV       DeviceType = 3 // Connected TV.
	DeviceType_PHONE              DeviceType = 4 // Smart Phone.
	DeviceType_TABLET             DeviceType = 5 // Tablet.
	DeviceType_CONNECTED_DEV      DeviceType = 6 // Connected Device.
	DeviceType_SET_TOP_BOX        DeviceType = 7 // Set Top Box.
	DeviceType_OOH_DEVICE         DeviceType = 8 // Digital Out of Home.
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DeviceType_UNKNOWN",
		1: "MOBILE_TABLET",
		2: "PC",
		3: "CONNECTED_TV",
		4: "PHONE",
		5: "TABLET",
		6: "CONNECTED_DEV",
		7: "SET_TOP_BOX",
		8: "OOH_DEVICE",
	}
	DeviceType_value = map[string]int32{
		"DeviceType_UNKNOWN": 0,
		"MOBILE_TABLET":      1,
		"PC":                 2,
		"CONNECTED_TV":       3,
		"PHONE":              4,
		"TABLET":             5,
		"CONNECTED_DEV":      6,
		"SET_TOP_BOX":        7,
		"OOH_DEVICE":         8,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[9].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[9]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceType(num)
	return nil
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{9}
}

// *
// The following enum defines the types of context in which a native ad may appear (i.e., the type
// of content surrounding the ad on the page). This is intended to denote primary content although
// other content may also appear on the page. Note that there are two levels of detail grouped by
// 10s (i.e., 12 is a refined case of 100).
type DisplayContextType int32

const (
	DisplayContextType_DisplayContextType_UNKNOWN DisplayContextType = 0  // Equivalent to an unset value.
	DisplayContextType_CONTENT_CENTRIC            DisplayContextType = 10 // Content-centric context (e.g., newsfeed, article, image gallery, video gallery, etc.).
	DisplayContextType_ARTICLE                    DisplayContextType = 11 // Primarily article content, which could include images, etc. as part of the article.
	DisplayContextType_VIDEO_X                    DisplayContextType = 12 // Primarily video content.
	DisplayContextType_AUDIO                      DisplayContextType = 13 // Primarily audio content.
	DisplayContextType_IMAGE                      DisplayContextType = 14 // Primarily image content.
	DisplayContextType_USER_GENERATED             DisplayContextType = 15 // User generated content (e.g., forums, comments, etc).
	DisplayContextType_SOCIAL                     DisplayContextType = 20 // Social-centric context (e.g., social network feed, email, chat, etc).
	DisplayContextType_EMAIL                      DisplayContextType = 21 // Primarily email content.
	DisplayContextType_CHAT                       DisplayContextType = 22 // Primarily chat/IM content.
	DisplayContextType_PRODUCT                    DisplayContextType = 30 // Product context (e.g., product listings, details, recommendations, reviews, etc.).
	DisplayContextType_APP_STORE                  DisplayContextType = 31 // App store/marketplace.
	DisplayContextType_PRODUCT_REVIEWS            DisplayContextType = 32 // Product reviews site primarily, which may sell product secondarily.
)

// Enum value maps for DisplayContextType.
var (
	DisplayContextType_name = map[int32]string{
		0:  "DisplayContextType_UNKNOWN",
		10: "CONTENT_CENTRIC",
		11: "ARTICLE",
		12: "VIDEO_X",
		13: "AUDIO",
		14: "IMAGE",
		15: "USER_GENERATED",
		20: "SOCIAL",
		21: "EMAIL",
		22: "CHAT",
		30: "PRODUCT",
		31: "APP_STORE",
		32: "PRODUCT_REVIEWS",
	}
	DisplayContextType_value = map[string]int32{
		"DisplayContextType_UNKNOWN": 0,
		"CONTENT_CENTRIC":            10,
		"ARTICLE":                    11,
		"VIDEO_X":                    12,
		"AUDIO":                      13,
		"IMAGE":                      14,
		"USER_GENERATED":             15,
		"SOCIAL":                     20,
		"EMAIL":                      21,
		"CHAT":                       22,
		"PRODUCT":                    30,
		"APP_STORE":                  31,
		"PRODUCT_REVIEWS":            32,
	}
)

func (x DisplayContextType) Enum() *DisplayContextType {
	p := new(DisplayContextType)
	*p = x
	return p
}

func (x DisplayContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[10].Descriptor()
}

func (DisplayContextType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[10]
}

func (x DisplayContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisplayContextType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisplayContextType(num)
	return nil
}

// Deprecated: Use DisplayContextType.Descriptor instead.
func (DisplayContextType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{10}
}

// *
// The following enum defines the general types of display placements; the locations where a
// native ad may be shown in relationship to the surrounding content.
type DisplayPlacementType int32

const (
	DisplayPlacementType_DisplayPlacementType_UNKNOWN DisplayPlacementType = 0 // Equivalent to an unset value.
	DisplayPlacementType_FEED_CONTENT                 DisplayPlacementType = 1 // In the feed of content (e.g., as an item inside the organic feed, grid,
	// listing carousel, etc.).
	DisplayPlacementType_ATOMIC_CONTENT  DisplayPlacementType = 2 // In the atomic unit of the content (e.g., in the article page or single image page).
	DisplayPlacementType_OUTSIDE_CONTENT DisplayPlacementType = 3 // Outside the core content (.e.g, in the ads section on the right rail, as a banner
	// style placement near the content, etc.).
	DisplayPlacementType_RECOMMENDATION DisplayPlacementType = 4 // Recommendation widget; most commonly presented below article content.
)

// Enum value maps for DisplayPlacementType.
var (
	DisplayPlacementType_name = map[int32]string{
		0: "DisplayPlacementType_UNKNOWN",
		1: "FEED_CONTENT",
		2: "ATOMIC_CONTENT",
		3: "OUTSIDE_CONTENT",
		4: "RECOMMENDATION",
	}
	DisplayPlacementType_value = map[string]int32{
		"DisplayPlacementType_UNKNOWN": 0,
		"FEED_CONTENT":                 1,
		"ATOMIC_CONTENT":               2,
		"OUTSIDE_CONTENT":              3,
		"RECOMMENDATION":               4,
	}
)

func (x DisplayPlacementType) Enum() *DisplayPlacementType {
	p := new(DisplayPlacementType)
	*p = x
	return p
}

func (x DisplayPlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayPlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[11].Descriptor()
}

func (DisplayPlacementType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[11]
}

func (x DisplayPlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisplayPlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisplayPlacementType(num)
	return nil
}

// Deprecated: Use DisplayPlacementType.Descriptor instead.
func (DisplayPlacementType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{11}
}

// *
// This enum presents the digital out-of-home venue types and is derived from the DPAA Programmatic
// Standards.
type DOOHVenueType int32

const (
	DOOHVenueType_DOOHVenueType_UNKNOWN DOOHVenueType = 0  // Equivalent to an unset value.
	DOOHVenueType_AIRBORNE              DOOHVenueType = 1  // Airborne.
	DOOHVenueType_AIRPORT_GENERAL       DOOHVenueType = 2  // Airports - General.
	DOOHVenueType_AIRPORT_BAG_CLAIM     DOOHVenueType = 3  // Airports - Baggage Claim.
	DOOHVenueType_AIRPORT_TERMINAL      DOOHVenueType = 4  // Airports - Terminal
	DOOHVenueType_AIRPORT_LOUNGE        DOOHVenueType = 5  // Airports - Lounges.
	DOOHVenueType_ATM                   DOOHVenueType = 6  // ATMs.
	DOOHVenueType_BACKLIGHT             DOOHVenueType = 7  // Backlights.
	DOOHVenueType_BAR                   DOOHVenueType = 8  // Bars.
	DOOHVenueType_BENCH                 DOOHVenueType = 9  // Benches.
	DOOHVenueType_BIKE_RACK             DOOHVenueType = 10 // Bike rack.
	DOOHVenueType_BULLETIN              DOOHVenueType = 11 // Bulletins.
	DOOHVenueType_BUS                   DOOHVenueType = 12 // Buses.
	DOOHVenueType_CAFE                  DOOHVenueType = 13 // Cafes.
	DOOHVenueType_CASUAL_DINING         DOOHVenueType = 14 // Casual Dining Restaurants.
	DOOHVenueType_CHILD_CARE            DOOHVenueType = 15 // Child Care.
	DOOHVenueType_CINEMA                DOOHVenueType = 16 // Cinema.
	DOOHVenueType_CITY_INFO_PANEL       DOOHVenueType = 17 // City Information Panels.
	DOOHVenueType_CONVENIENCE_STORE     DOOHVenueType = 18 // Convenience Stores.
	DOOHVenueType_DED_WILD_POSTING      DOOHVenueType = 19 // Dedicated Wild Posting.
	DOOHVenueType_DOC_OFFICE_GEN        DOOHVenueType = 20 // Doctors Offices - General.
	DOOHVenueType_DOC_OFFICE_OB         DOOHVenueType = 21 // Doctors Offices - Obstetrics.
	DOOHVenueType_DOC_OFFICE_PEDS       DOOHVenueType = 22 // Doctors Offices - Pediatrics.
	DOOHVenueType_FAMILY_ENT            DOOHVenueType = 23 // Family entertainment.
	DOOHVenueType_FERRY                 DOOHVenueType = 24 // Ferries.
	DOOHVenueType_FINANCIAL_SERVICE     DOOHVenueType = 25 // Financial Services.
	DOOHVenueType_GAS_STATION           DOOHVenueType = 26 // Gas Stations.
	DOOHVenueType_GOLF_COURSE           DOOHVenueType = 27 // Golf Courses.
	DOOHVenueType_GYM                   DOOHVenueType = 28 // Gyms.
	DOOHVenueType_HOSPITAL              DOOHVenueType = 29 // Hospitals.
	DOOHVenueType_HOTEL                 DOOHVenueType = 30 // Hotels.
	DOOHVenueType_JR_POSTER             DOOHVenueType = 31 // Junior Posters.
	DOOHVenueType_KIOSK                 DOOHVenueType = 32 // Kiosks.
	DOOHVenueType_MALL_GENERAL          DOOHVenueType = 33 // Malls - General.
	DOOHVenueType_MALL_FOOD_COURT       DOOHVenueType = 34 // Malls - Food Courts.
	DOOHVenueType_MARINE                DOOHVenueType = 35 // Marine.
	DOOHVenueType_MOBILE_BILLBOARD      DOOHVenueType = 36 // Mobile Billboards.
	DOOHVenueType_MOVIE_THEATER_LOB     DOOHVenueType = 37 // Movie Theater Lobbies.
	DOOHVenueType_NEWSSTAND             DOOHVenueType = 38 // Newsstands.
	DOOHVenueType_OFFICE_BUILDING       DOOHVenueType = 39 // Office Buildings.
	DOOHVenueType_PHONE_KIOSK           DOOHVenueType = 40 // Phone Kiosks.
	DOOHVenueType_POSTER                DOOHVenueType = 41 // Posters.
	DOOHVenueType_QSR                   DOOHVenueType = 42 // QSR.
	DOOHVenueType_RAIL                  DOOHVenueType = 43 // Rail.
	DOOHVenueType_RECEPTACLE            DOOHVenueType = 44 // Receptacles.
	DOOHVenueType_RESORT                DOOHVenueType = 45 // Resorts / Leisure.
	DOOHVenueType_RETAIL                DOOHVenueType = 46 // Retail.
	DOOHVenueType_SALON                 DOOHVenueType = 47 // Salons.
	DOOHVenueType_SHELTER               DOOHVenueType = 48 // Shelters.
	DOOHVenueType_SPORTS_ARENA          DOOHVenueType = 49 // Sports Arenas.
	DOOHVenueType_SUBWAY                DOOHVenueType = 50 // Subway.
	DOOHVenueType_TAXI_WRAP_VEHICLE     DOOHVenueType = 51 // Taxis / Wrapped vehicles.
	DOOHVenueType_TRUCKSIDE             DOOHVenueType = 52 // Truckside.
	DOOHVenueType_UNIVERSITY            DOOHVenueType = 53 // Universities.
	DOOHVenueType_URBAN_PANEL           DOOHVenueType = 54 // Urban Panels.
	DOOHVenueType_VET_OFFICE            DOOHVenueType = 55 // Veterinarian Offices.
	DOOHVenueType_WALL_SPECTACULAR      DOOHVenueType = 56 // Walls / Spectaculars.
	DOOHVenueType_OTHER_X               DOOHVenueType = 57 // Other.
)

// Enum value maps for DOOHVenueType.
var (
	DOOHVenueType_name = map[int32]string{
		0:  "DOOHVenueType_UNKNOWN",
		1:  "AIRBORNE",
		2:  "AIRPORT_GENERAL",
		3:  "AIRPORT_BAG_CLAIM",
		4:  "AIRPORT_TERMINAL",
		5:  "AIRPORT_LOUNGE",
		6:  "ATM",
		7:  "BACKLIGHT",
		8:  "BAR",
		9:  "BENCH",
		10: "BIKE_RACK",
		11: "BULLETIN",
		12: "BUS",
		13: "CAFE",
		14: "CASUAL_DINING",
		15: "CHILD_CARE",
		16: "CINEMA",
		17: "CITY_INFO_PANEL",
		18: "CONVENIENCE_STORE",
		19: "DED_WILD_POSTING",
		20: "DOC_OFFICE_GEN",
		21: "DOC_OFFICE_OB",
		22: "DOC_OFFICE_PEDS",
		23: "FAMILY_ENT",
		24: "FERRY",
		25: "FINANCIAL_SERVICE",
		26: "GAS_STATION",
		27: "GOLF_COURSE",
		28: "GYM",
		29: "HOSPITAL",
		30: "HOTEL",
		31: "JR_POSTER",
		32: "KIOSK",
		33: "MALL_GENERAL",
		34: "MALL_FOOD_COURT",
		35: "MARINE",
		36: "MOBILE_BILLBOARD",
		37: "MOVIE_THEATER_LOB",
		38: "NEWSSTAND",
		39: "OFFICE_BUILDING",
		40: "PHONE_KIOSK",
		41: "POSTER",
		42: "QSR",
		43: "RAIL",
		44: "RECEPTACLE",
		45: "RESORT",
		46: "RETAIL",
		47: "SALON",
		48: "SHELTER",
		49: "SPORTS_ARENA",
		50: "SUBWAY",
		51: "TAXI_WRAP_VEHICLE",
		52: "TRUCKSIDE",
		53: "UNIVERSITY",
		54: "URBAN_PANEL",
		55: "VET_OFFICE",
		56: "WALL_SPECTACULAR",
		57: "OTHER_X",
	}
	DOOHVenueType_value = map[string]int32{
		"DOOHVenueType_UNKNOWN": 0,
		"AIRBORNE":              1,
		"AIRPORT_GENERAL":       2,
		"AIRPORT_BAG_CLAIM":     3,
		"AIRPORT_TERMINAL":      4,
		"AIRPORT_LOUNGE":        5,
		"ATM":                   6,
		"BACKLIGHT":             7,
		"BAR":                   8,
		"BENCH":                 9,
		"BIKE_RACK":             10,
		"BULLETIN":              11,
		"BUS":                   12,
		"CAFE":                  13,
		"CASUAL_DINING":         14,
		"CHILD_CARE":            15,
		"CINEMA":                16,
		"CITY_INFO_PANEL":       17,
		"CONVENIENCE_STORE":     18,
		"DED_WILD_POSTING":      19,
		"DOC_OFFICE_GEN":        20,
		"DOC_OFFICE_OB":         21,
		"DOC_OFFICE_PEDS":       22,
		"FAMILY_ENT":            23,
		"FERRY":                 24,
		"FINANCIAL_SERVICE":     25,
		"GAS_STATION":           26,
		"GOLF_COURSE":           27,
		"GYM":                   28,
		"HOSPITAL":              29,
		"HOTEL":                 30,
		"JR_POSTER":             31,
		"KIOSK":                 32,
		"MALL_GENERAL":          33,
		"MALL_FOOD_COURT":       34,
		"MARINE":                35,
		"MOBILE_BILLBOARD":      36,
		"MOVIE_THEATER_LOB":     37,
		"NEWSSTAND":             38,
		"OFFICE_BUILDING":       39,
		"PHONE_KIOSK":           40,
		"POSTER":                41,
		"QSR":                   42,
		"RAIL":                  43,
		"RECEPTACLE":            44,
		"RESORT":                45,
		"RETAIL":                46,
		"SALON":                 47,
		"SHELTER":               48,
		"SPORTS_ARENA":          49,
		"SUBWAY":                50,
		"TAXI_WRAP_VEHICLE":     51,
		"TRUCKSIDE":             52,
		"UNIVERSITY":            53,
		"URBAN_PANEL":           54,
		"VET_OFFICE":            55,
		"WALL_SPECTACULAR":      56,
		"OTHER_X":               57,
	}
)

func (x DOOHVenueType) Enum() *DOOHVenueType {
	p := new(DOOHVenueType)
	*p = x
	return p
}

func (x DOOHVenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOOHVenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[12].Descriptor()
}

func (DOOHVenueType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[12]
}

func (x DOOHVenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOOHVenueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOOHVenueType(num)
	return nil
}

// Deprecated: Use DOOHVenueType.Descriptor instead.
func (DOOHVenueType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{12}
}

// *
// This enum lists the available methods of tracking of ad events. Vendor specific codes may
// include custom measurement companies (e.g., Moat, Doubleverify, IAS, etc.).
type EventTrackingMethod int32

const (
	EventTrackingMethod_EventTrackingMethod_UNKNOWN EventTrackingMethod = 0 // Equivalent to an unset value.
	EventTrackingMethod_IMAGE_PIXEL                 EventTrackingMethod = 1 // Image-Pixel: URL provided will be inserted as a 1x1 pixel at time of the event.
	EventTrackingMethod_JAVASCRIPT                  EventTrackingMethod = 2 // JavaScript : URL provided will be inserted as a JavaScript tag at time of the event.
)

// Enum value maps for EventTrackingMethod.
var (
	EventTrackingMethod_name = map[int32]string{
		0: "EventTrackingMethod_UNKNOWN",
		1: "IMAGE_PIXEL",
		2: "JAVASCRIPT",
	}
	EventTrackingMethod_value = map[string]int32{
		"EventTrackingMethod_UNKNOWN": 0,
		"IMAGE_PIXEL":                 1,
		"JAVASCRIPT":                  2,
	}
)

func (x EventTrackingMethod) Enum() *EventTrackingMethod {
	p := new(EventTrackingMethod)
	*p = x
	return p
}

func (x EventTrackingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTrackingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[13].Descriptor()
}

func (EventTrackingMethod) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[13]
}

func (x EventTrackingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventTrackingMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventTrackingMethod(num)
	return nil
}

// Deprecated: Use EventTrackingMethod.Descriptor instead.
func (EventTrackingMethod) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{13}
}

// *
// The following enum defines the types of ad events available for tracking. These types refer to
// the actual event, timing, etc.; not the method of firing. Scripts that are performing
// measurement should be deployed at the "loaded" event.
type EventType int32

const (
	EventType_EventType_UNKNOWN EventType = 0 // Equivalent to an unset value.
	EventType_LOADED            EventType = 1 // loaded: Delivered as a part of the creative markup. Creative may be pre-cached or pre-loaded; prior to initial rendering.
	EventType_IMPRESSION        EventType = 2 // impression: Ad impression per https://www.iab.com/guidelines/iab-measurement-guidelines/.
	EventType_VIEWABLE_MRC50    EventType = 3 // viewable-mrc50: Visible impression using MRC definition of 50% in view for 1 second.
	EventType_VIEWABLE_MRC100   EventType = 4 // viewable-mrc100: 100% in view for 1 second (i.e., the GroupM standard).
	EventType_VIEWABLE_VIDEO50  EventType = 5 // viewable-video50: Visible impression for video using MRC definition of 50% in view for 2 seconds.
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EventType_UNKNOWN",
		1: "LOADED",
		2: "IMPRESSION",
		3: "VIEWABLE_MRC50",
		4: "VIEWABLE_MRC100",
		5: "VIEWABLE_VIDEO50",
	}
	EventType_value = map[string]int32{
		"EventType_UNKNOWN": 0,
		"LOADED":            1,
		"IMPRESSION":        2,
		"VIEWABLE_MRC50":    3,
		"VIEWABLE_MRC100":   4,
		"VIEWABLE_VIDEO50":  5,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[14].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[14]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{14}
}

// *
// The following enum defines the directions in which an expandable ad may expand, given the
// positioning of the ad unit on the page and constraints imposed by the content.
type ExpandableDirection int32

const (
	ExpandableDirection_ExpandableDirection_UNKNOWN ExpandableDirection = 0 // Equivalent to an unset value.
	ExpandableDirection_LEFT                        ExpandableDirection = 1
	ExpandableDirection_RIGHT                       ExpandableDirection = 2
	ExpandableDirection_UP                          ExpandableDirection = 3
	ExpandableDirection_DOWN                        ExpandableDirection = 4
	ExpandableDirection_FULLSCREEN                  ExpandableDirection = 5
	ExpandableDirection_MINIMIZE                    ExpandableDirection = 6
)

// Enum value maps for ExpandableDirection.
var (
	ExpandableDirection_name = map[int32]string{
		0: "ExpandableDirection_UNKNOWN",
		1: "LEFT",
		2: "RIGHT",
		3: "UP",
		4: "DOWN",
		5: "FULLSCREEN",
		6: "MINIMIZE",
	}
	ExpandableDirection_value = map[string]int32{
		"ExpandableDirection_UNKNOWN": 0,
		"LEFT":                        1,
		"RIGHT":                       2,
		"UP":                          3,
		"DOWN":                        4,
		"FULLSCREEN":                  5,
		"MINIMIZE":                    6,
	}
)

func (x ExpandableDirection) Enum() *ExpandableDirection {
	p := new(ExpandableDirection)
	*p = x
	return p
}

func (x ExpandableDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpandableDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[15].Descriptor()
}

func (ExpandableDirection) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[15]
}

func (x ExpandableDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExpandableDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExpandableDirection(num)
	return nil
}

// Deprecated: Use ExpandableDirection.Descriptor instead.
func (ExpandableDirection) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{15}
}

// *
// The following enum defines the types of feeds for audio.
type FeedType int32

const (
	FeedType_FeedType_UNKNOWN FeedType = 0 // Equivalent to an unset value.
	FeedType_MUSIC_SERVICE    FeedType = 1 // Music Service.
	FeedType_FM_AM_BROADCAST  FeedType = 2 // FM/AM Broadcast.
	FeedType_PODCAST          FeedType = 3 // Podcast.
)

// Enum value maps for FeedType.
var (
	FeedType_name = map[int32]string{
		0: "FeedType_UNKNOWN",
		1: "MUSIC_SERVICE",
		2: "FM_AM_BROADCAST",
		3: "PODCAST",
	}
	FeedType_value = map[string]int32{
		"FeedType_UNKNOWN": 0,
		"MUSIC_SERVICE":    1,
		"FM_AM_BROADCAST":  2,
		"PODCAST":          3,
	}
)

func (x FeedType) Enum() *FeedType {
	p := new(FeedType)
	*p = x
	return p
}

func (x FeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[16].Descriptor()
}

func (FeedType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[16]
}

func (x FeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedType(num)
	return nil
}

// Deprecated: Use FeedType.Descriptor instead.
func (FeedType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{16}
}

// *
//
//	The following table contains enumerations for various ways an ID could be matched to an ad request,
//	and if they pertain to a single property or app.
//	It should be used on conjunction with the mm attribute in Object: EID of OpenRTB 2.x.
//	https://github.com/InteractiveAdvertisingBureau/openrtb2.x/blob/main/2.6.md#3227---object-eid-
type MatchMethod int32

const (
	MatchMethod_MatchMethod_UNKNOWN MatchMethod = 0
	// No matching has occurred.
	// The associated ID came directly from a 3rd-party cookie or OS-provided resettable device ID for advertising (IFA).
	MatchMethod_NO_MATCH MatchMethod = 1
	// Real time cookie sync as described in Appendix: Cookie Based ID Syncing of OpenRTB 2.x
	// https://github.com/InteractiveAdvertisingBureau/openrtb2.x/blob/main/2.6.md#appendix-c-cookie-based-id-syncing-
	MatchMethod_BROWSER_COOKIE_SYNC MatchMethod = 2
	// ID match was based on user authentication such as an email login or hashed PII
	MatchMethod_AUTHENTICATED MatchMethod = 3
	// ID match was based on a 1st party observation, but without user authentication
	// (e.g. GUID, SharedID, Session IDs, CHIPS or other 1st party cookies contained in localStorage)
	MatchMethod_OBSERVED MatchMethod = 4
	// ID match was inferred from linkage based on non-authenticated features
	// across multiple browsers or devices(e.g. IP address and/or UserAgent)
	MatchMethod_INFERRED MatchMethod = 5
)

// Enum value maps for MatchMethod.
var (
	MatchMethod_name = map[int32]string{
		0: "MatchMethod_UNKNOWN",
		1: "NO_MATCH",
		2: "BROWSER_COOKIE_SYNC",
		3: "AUTHENTICATED",
		4: "OBSERVED",
		5: "INFERRED",
	}
	MatchMethod_value = map[string]int32{
		"MatchMethod_UNKNOWN": 0,
		"NO_MATCH":            1,
		"BROWSER_COOKIE_SYNC": 2,
		"AUTHENTICATED":       3,
		"OBSERVED":            4,
		"INFERRED":            5,
	}
)

func (x MatchMethod) Enum() *MatchMethod {
	p := new(MatchMethod)
	*p = x
	return p
}

func (x MatchMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[17].Descriptor()
}

func (MatchMethod) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[17]
}

func (x MatchMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MatchMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MatchMethod(num)
	return nil
}

// Deprecated: Use MatchMethod.Descriptor instead.
func (MatchMethod) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{17}
}

// *
// The following enum defines the services and/or vendors used for resolving IP addresses to
// geolocations.
type LocationService int32

const (
	LocationService_LocationService_UNKNOWN LocationService = 0 // Equivalent to an unset value.
	LocationService_IP2LOCATION             LocationService = 1 // ip2location.
	LocationService_NEUSTAR                 LocationService = 2 // Neustar (Quova).
	LocationService_MAXMIND                 LocationService = 3 // MaxMind.
	LocationService_NETACUITY               LocationService = 4 // NetAcuity (Digital Element).
)

// Enum value maps for LocationService.
var (
	LocationService_name = map[int32]string{
		0: "LocationService_UNKNOWN",
		1: "IP2LOCATION",
		2: "NEUSTAR",
		3: "MAXMIND",
		4: "NETACUITY",
	}
	LocationService_value = map[string]int32{
		"LocationService_UNKNOWN": 0,
		"IP2LOCATION":             1,
		"NEUSTAR":                 2,
		"MAXMIND":                 3,
		"NETACUITY":               4,
	}
)

func (x LocationService) Enum() *LocationService {
	p := new(LocationService)
	*p = x
	return p
}

func (x LocationService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationService) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[18].Descriptor()
}

func (LocationService) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[18]
}

func (x LocationService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LocationService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LocationService(num)
	return nil
}

// Deprecated: Use LocationService.Descriptor instead.
func (LocationService) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{18}
}

// *
// The following table indicates the options for media linearity (typically video). This
// corresponds to the required type of VAST response, where a linear response is VAST containing
// video assets, and non-linear is a VAST response (typically) containing a banner/overlay.
type LinearityMode int32

const (
	LinearityMode_LinearityMode_UNKNOWN LinearityMode = 0 // Equivalent to an unset value.
	LinearityMode_LINEAR                LinearityMode = 1 // Linear
	LinearityMode_NONLINEAR             LinearityMode = 2 // Non-Linear (i.e., Overlay)
)

// Enum value maps for LinearityMode.
var (
	LinearityMode_name = map[int32]string{
		0: "LinearityMode_UNKNOWN",
		1: "LINEAR",
		2: "NONLINEAR",
	}
	LinearityMode_value = map[string]int32{
		"LinearityMode_UNKNOWN": 0,
		"LINEAR":                1,
		"NONLINEAR":             2,
	}
)

func (x LinearityMode) Enum() *LinearityMode {
	p := new(LinearityMode)
	*p = x
	return p
}

func (x LinearityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinearityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[19].Descriptor()
}

func (LinearityMode) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[19]
}

func (x LinearityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LinearityMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LinearityMode(num)
	return nil
}

// Deprecated: Use LinearityMode.Descriptor instead.
func (LinearityMode) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{19}
}

// *
// The following enum defines the options to indicate how the geographic information was determined.
type LocationType int32

const (
	LocationType_LocationType_UNKNOWN LocationType = 0 // Equivalent to an unset value.
	LocationType_GPS_LOC_SERVICE      LocationType = 1 // GPS/Location Services.
	LocationType_IP_ADDRESS           LocationType = 2 // IP Address.
	LocationType_USER_PROVIDED        LocationType = 3 // User Provided (e.g., registration data).
)

// Enum value maps for LocationType.
var (
	LocationType_name = map[int32]string{
		0: "LocationType_UNKNOWN",
		1: "GPS_LOC_SERVICE",
		2: "IP_ADDRESS",
		3: "USER_PROVIDED",
	}
	LocationType_value = map[string]int32{
		"LocationType_UNKNOWN": 0,
		"GPS_LOC_SERVICE":      1,
		"IP_ADDRESS":           2,
		"USER_PROVIDED":        3,
	}
)

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}

func (x LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[20].Descriptor()
}

func (LocationType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[20]
}

func (x LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LocationType(num)
	return nil
}

// Deprecated: Use LocationType.Descriptor instead.
func (LocationType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{20}
}

// *
// The following enum defines the media ratings used in describing content based on the TAG
// Inventory Quality Guidelines (IQG) v2.1 categorization. Refer to
// www.iab.com/guidelines/digital-video-suite for more information.
type MediaRating int32

const (
	MediaRating_MediaRating_UNKNOWN MediaRating = 0 // Equivalent to an unset value.
	MediaRating_ALL_AUDIENCES       MediaRating = 1 // All Audiences.
	MediaRating_OVER_12             MediaRating = 2 // Everyone Over Age 12.
	MediaRating_MATURE              MediaRating = 3 // Mature Audiences.
)

// Enum value maps for MediaRating.
var (
	MediaRating_name = map[int32]string{
		0: "MediaRating_UNKNOWN",
		1: "ALL_AUDIENCES",
		2: "OVER_12",
		3: "MATURE",
	}
	MediaRating_value = map[string]int32{
		"MediaRating_UNKNOWN": 0,
		"ALL_AUDIENCES":       1,
		"OVER_12":             2,
		"MATURE":              3,
	}
)

func (x MediaRating) Enum() *MediaRating {
	p := new(MediaRating)
	*p = x
	return p
}

func (x MediaRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaRating) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[21].Descriptor()
}

func (MediaRating) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[21]
}

func (x MediaRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MediaRating) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MediaRating(num)
	return nil
}

// Deprecated: Use MediaRating.Descriptor instead.
func (MediaRating) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{21}
}

// *
// The following enum defines the common data asset types. This list is non-exhaustive and is
// intended to be expanded over time. Size recommendations are noted as "maximum length of at
// least", which means the publisher or supply platform should support a maximum length of at least
// this value and the buying platform knows that a string of this size should be accepted.
type NativeDataAssetType int32

const (
	NativeDataAssetType_NativeDataAssetType_UNKNOWN NativeDataAssetType = 0 // Equivalent to an unset value.
	// sponsored: "Sponsored By" message which should contain the brand name of the sponsor.
	// Recommended maximum length of at least 25 characters.
	NativeDataAssetType_SPONSORED NativeDataAssetType = 1
	// desc: Descriptive text associated with the product or service being advertised. Long text
	// lengths may be truncated or ellipsed when rendered. Recommended maximum length of at least 140
	// characters.
	NativeDataAssetType_DESCRIPTIVE NativeDataAssetType = 2
	// rating: Numeric rating of the product (e.g., an app's rating). Recommended integer range of 0-5.
	NativeDataAssetType_RATING NativeDataAssetType = 3
	// likes: Number of social ratings or "likes" of the product.
	NativeDataAssetType_LIKES NativeDataAssetType = 4
	// downloads: Number downloads and/or installs of the product.
	NativeDataAssetType_DOWNLOADS NativeDataAssetType = 5
	// price: Price of the product, app, or in-app purchase. Value should include currency symbol in
	// localized format (e.g., "$10").
	NativeDataAssetType_PRICE NativeDataAssetType = 6
	// saleprice: Sale price that can be used together with "price" to indicate a comparative
	// discounted price. Value should include currency symbol in localized format (e.g. "$8.50").
	NativeDataAssetType_SALEPRICE NativeDataAssetType = 7
	// phone: A formatted phone number.
	NativeDataAssetType_PHONE_X NativeDataAssetType = 8
	// address: A formatted address.
	NativeDataAssetType_ADDRESS NativeDataAssetType = 9
	// desc2: Additional descriptive text associated with the product.
	NativeDataAssetType_DESC2 NativeDataAssetType = 10
	// displayurl: Display URL for the ad. To be used when sponsoring entity does not own the content
	// (e.g., "Sponsored by Brand on Site", where Site is specified in this data asset).
	NativeDataAssetType_DISPLAY_URL NativeDataAssetType = 11
	// ctatext: Description of the call to action (CTA) button for the destination URL. Recommended
	// maximum length of at least 15 characters.
	NativeDataAssetType_CTA_TEXT NativeDataAssetType = 12
)

// Enum value maps for NativeDataAssetType.
var (
	NativeDataAssetType_name = map[int32]string{
		0:  "NativeDataAssetType_UNKNOWN",
		1:  "SPONSORED",
		2:  "DESCRIPTIVE",
		3:  "RATING",
		4:  "LIKES",
		5:  "DOWNLOADS",
		6:  "PRICE",
		7:  "SALEPRICE",
		8:  "PHONE_X",
		9:  "ADDRESS",
		10: "DESC2",
		11: "DISPLAY_URL",
		12: "CTA_TEXT",
	}
	NativeDataAssetType_value = map[string]int32{
		"NativeDataAssetType_UNKNOWN": 0,
		"SPONSORED":                   1,
		"DESCRIPTIVE":                 2,
		"RATING":                      3,
		"LIKES":                       4,
		"DOWNLOADS":                   5,
		"PRICE":                       6,
		"SALEPRICE":                   7,
		"PHONE_X":                     8,
		"ADDRESS":                     9,
		"DESC2":                       10,
		"DISPLAY_URL":                 11,
		"CTA_TEXT":                    12,
	}
)

func (x NativeDataAssetType) Enum() *NativeDataAssetType {
	p := new(NativeDataAssetType)
	*p = x
	return p
}

func (x NativeDataAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeDataAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[22].Descriptor()
}

func (NativeDataAssetType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[22]
}

func (x NativeDataAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NativeDataAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NativeDataAssetType(num)
	return nil
}

// Deprecated: Use NativeDataAssetType.Descriptor instead.
func (NativeDataAssetType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{22}
}

// *
// The following enum defines the set of common image asset types. This list is non-exhaustive and
// is intended to be expanded over time. Size recommendations are noted as "maximum height or width
// of at least", which means the publisher or supply platform should support a maximum height or
// width of at least this value and the buying platform knows that an image of this size should be
// accepted.
type NativeImageAssetType int32

const (
	NativeImageAssetType_NativeImageAssetType_UNKNOWN NativeImageAssetType = 0 // Equivalent to an unset value.
	// Icon: Icon image.
	// Maximum height at least 50 device independent pixels (DIPS); aspect ratio 1:1.
	NativeImageAssetType_ICON NativeImageAssetType = 1
	// Main: Large image preview for the ad.
	// At least one of 2 size variants required:
	//
	//	Small: Maximum height at least 627 DIPS; maximum width at least 627, 836, or 1198 DIPS (i.e.,
	//	  aspect ratios of 1:1, 4:3, or 1.91:1, respectively).
	//	Large: Maximum height at least 200 DIPS; maximum width at least 200, 267, or 382 DIPS (i.e.,
	//	  aspect ratios of 1:1, 4:3, or 1.91:1, respectively).
	NativeImageAssetType_MAIN NativeImageAssetType = 3
)

// Enum value maps for NativeImageAssetType.
var (
	NativeImageAssetType_name = map[int32]string{
		0: "NativeImageAssetType_UNKNOWN",
		1: "ICON",
		3: "MAIN",
	}
	NativeImageAssetType_value = map[string]int32{
		"NativeImageAssetType_UNKNOWN": 0,
		"ICON":                         1,
		"MAIN":                         3,
	}
)

func (x NativeImageAssetType) Enum() *NativeImageAssetType {
	p := new(NativeImageAssetType)
	*p = x
	return p
}

func (x NativeImageAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeImageAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[23].Descriptor()
}

func (NativeImageAssetType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[23]
}

func (x NativeImageAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NativeImageAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NativeImageAssetType(num)
	return nil
}

// Deprecated: Use NativeImageAssetType.Descriptor instead.
func (NativeImageAssetType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{23}
}

// *
// The following enum defines the options for device operating system.
type OperatingSystem int32

const (
	OperatingSystem_OTHER_NOT_LISTED OperatingSystem = 0  // Other Not Listed
	OperatingSystem_NINTENDO_3DS     OperatingSystem = 1  // Nintendo 3DS System Software
	OperatingSystem_ANDROID          OperatingSystem = 2  // Android
	OperatingSystem_APPLE_TV         OperatingSystem = 3  // Apple TV Software
	OperatingSystem_ASHA             OperatingSystem = 4  // Asha
	OperatingSystem_BADA             OperatingSystem = 5  // Bada
	OperatingSystem_BLACKBERRY       OperatingSystem = 6  // BlackBerry
	OperatingSystem_BREW             OperatingSystem = 7  // BREW
	OperatingSystem_CHROMEOS         OperatingSystem = 8  // ChromeOS
	OperatingSystem_DARWIN           OperatingSystem = 9  // Darwin
	OperatingSystem_FIREOS           OperatingSystem = 10 // FireOS
	OperatingSystem_FIREFOXOS        OperatingSystem = 11 // FirefoxOS
	OperatingSystem_HELENOS          OperatingSystem = 12 // HelenOS
	OperatingSystem_IOS              OperatingSystem = 13 // iOS
	OperatingSystem_LINUX            OperatingSystem = 14 // Linux
	OperatingSystem_MACOS            OperatingSystem = 15 // MacOS
	OperatingSystem_MEEGO            OperatingSystem = 16 // MeeGo
	OperatingSystem_MORPHOS          OperatingSystem = 17 // MorphOS
	OperatingSystem_NETBSD           OperatingSystem = 18 // NetBSD
	OperatingSystem_NUCLEUSPLUS      OperatingSystem = 19 // NucleusPLUS
	OperatingSystem_PSVITA           OperatingSystem = 20 // PS Vita System Software
	OperatingSystem_PS3              OperatingSystem = 21 // PS3 System Software
	OperatingSystem_PS4              OperatingSystem = 22 // PS4 System Software
	OperatingSystem_PSP              OperatingSystem = 23 // PSP System Software
	OperatingSystem_SYMBIAN          OperatingSystem = 24 // Symbian
	OperatingSystem_TIZEN            OperatingSystem = 25 // Tizen
	OperatingSystem_WATCHOS          OperatingSystem = 26 // WatchOS
	OperatingSystem_WEBOS            OperatingSystem = 27 // WebOS
	OperatingSystem_WINDOWS          OperatingSystem = 28 // Windows
)

// Enum value maps for OperatingSystem.
var (
	OperatingSystem_name = map[int32]string{
		0:  "OTHER_NOT_LISTED",
		1:  "NINTENDO_3DS",
		2:  "ANDROID",
		3:  "APPLE_TV",
		4:  "ASHA",
		5:  "BADA",
		6:  "BLACKBERRY",
		7:  "BREW",
		8:  "CHROMEOS",
		9:  "DARWIN",
		10: "FIREOS",
		11: "FIREFOXOS",
		12: "HELENOS",
		13: "IOS",
		14: "LINUX",
		15: "MACOS",
		16: "MEEGO",
		17: "MORPHOS",
		18: "NETBSD",
		19: "NUCLEUSPLUS",
		20: "PSVITA",
		21: "PS3",
		22: "PS4",
		23: "PSP",
		24: "SYMBIAN",
		25: "TIZEN",
		26: "WATCHOS",
		27: "WEBOS",
		28: "WINDOWS",
	}
	OperatingSystem_value = map[string]int32{
		"OTHER_NOT_LISTED": 0,
		"NINTENDO_3DS":     1,
		"ANDROID":          2,
		"APPLE_TV":         3,
		"ASHA":             4,
		"BADA":             5,
		"BLACKBERRY":       6,
		"BREW":             7,
		"CHROMEOS":         8,
		"DARWIN":           9,
		"FIREOS":           10,
		"FIREFOXOS":        11,
		"HELENOS":          12,
		"IOS":              13,
		"LINUX":            14,
		"MACOS":            15,
		"MEEGO":            16,
		"MORPHOS":          17,
		"NETBSD":           18,
		"NUCLEUSPLUS":      19,
		"PSVITA":           20,
		"PS3":              21,
		"PS4":              22,
		"PSP":              23,
		"SYMBIAN":          24,
		"TIZEN":            25,
		"WATCHOS":          26,
		"WEBOS":            27,
		"WINDOWS":          28,
	}
)

func (x OperatingSystem) Enum() *OperatingSystem {
	p := new(OperatingSystem)
	*p = x
	return p
}

func (x OperatingSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[24].Descriptor()
}

func (OperatingSystem) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[24]
}

func (x OperatingSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OperatingSystem) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OperatingSystem(num)
	return nil
}

// Deprecated: Use OperatingSystem.Descriptor instead.
func (OperatingSystem) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{24}
}

// *
// The following enum defines the placement positions as a relative measure of visibility or
// prominence. This enum has values derived from the TAG Inventory Quality Guidelines (IQG).
type PlacementPosition int32

const (
	PlacementPosition_PlacementPosition_UNKNOWN PlacementPosition = 0 // Equivalent to an unset value.
	PlacementPosition_ATF                       PlacementPosition = 1 // Above the Fold.
	PlacementPosition_LOCKED                    PlacementPosition = 2 // Locked (i.e., fixed position).
	PlacementPosition_BTF                       PlacementPosition = 3 // Below the Fold.
	PlacementPosition_HEADER                    PlacementPosition = 4 // Header.
	PlacementPosition_FOOTER                    PlacementPosition = 5 // Footer.
	PlacementPosition_SIDEBAR                   PlacementPosition = 6 // Sidebar.
	PlacementPosition_FULLSCREEN_X              PlacementPosition = 7 // Full screen.
)

// Enum value maps for PlacementPosition.
var (
	PlacementPosition_name = map[int32]string{
		0: "PlacementPosition_UNKNOWN",
		1: "ATF",
		2: "LOCKED",
		3: "BTF",
		4: "HEADER",
		5: "FOOTER",
		6: "SIDEBAR",
		7: "FULLSCREEN_X",
	}
	PlacementPosition_value = map[string]int32{
		"PlacementPosition_UNKNOWN": 0,
		"ATF":                       1,
		"LOCKED":                    2,
		"BTF":                       3,
		"HEADER":                    4,
		"FOOTER":                    5,
		"SIDEBAR":                   6,
		"FULLSCREEN_X":              7,
	}
)

func (x PlacementPosition) Enum() *PlacementPosition {
	p := new(PlacementPosition)
	*p = x
	return p
}

func (x PlacementPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[25].Descriptor()
}

func (PlacementPosition) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[25]
}

func (x PlacementPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlacementPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlacementPosition(num)
	return nil
}

// Deprecated: Use PlacementPosition.Descriptor instead.
func (PlacementPosition) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{25}
}

// *
// The following enum lists the various types of video placements derived largely from the IAB
// Digital Video Guidelines.
type VideoPlacementSubtype int32

const (
	VideoPlacementSubtype_VideoPlacementSubtype_UNKNOWN VideoPlacementSubtype = 0 // Equivalent to an unset value.
	// In-Stream: Played before, during or after the streaming video content that the consumer has
	// requested (e.g., Pre-roll, Mid-roll, Post-roll).
	VideoPlacementSubtype_IN_STREAM VideoPlacementSubtype = 1
	// In-Banner: Exists within a web banner that leverages the banner space to deliver a video
	// experience as opposed to another static or rich media format. The format relies on the
	// existence of display ad inventory on the page for its delivery.
	VideoPlacementSubtype_IN_BANNER VideoPlacementSubtype = 2
	// In-Article: Loads and plays dynamically between paragraphs of editorial content; existing as
	// a standalone branded message.
	VideoPlacementSubtype_IN_ARTICLE VideoPlacementSubtype = 3
	// In-Feed: Found in content, social, or product feeds.
	VideoPlacementSubtype_IN_FEED VideoPlacementSubtype = 4
	// Interstitial/Slider/Floating: Covers the entire or a portion of screen area, but is always on
	// screen while displayed (i.e. cannot be scrolled out of view).
	VideoPlacementSubtype_INTERSTITIAL VideoPlacementSubtype = 5
)

// Enum value maps for VideoPlacementSubtype.
var (
	VideoPlacementSubtype_name = map[int32]string{
		0: "VideoPlacementSubtype_UNKNOWN",
		1: "IN_STREAM",
		2: "IN_BANNER",
		3: "IN_ARTICLE",
		4: "IN_FEED",
		5: "INTERSTITIAL",
	}
	VideoPlacementSubtype_value = map[string]int32{
		"VideoPlacementSubtype_UNKNOWN": 0,
		"IN_STREAM":                     1,
		"IN_BANNER":                     2,
		"IN_ARTICLE":                    3,
		"IN_FEED":                       4,
		"INTERSTITIAL":                  5,
	}
)

func (x VideoPlacementSubtype) Enum() *VideoPlacementSubtype {
	p := new(VideoPlacementSubtype)
	*p = x
	return p
}

func (x VideoPlacementSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoPlacementSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[26].Descriptor()
}

func (VideoPlacementSubtype) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[26]
}

func (x VideoPlacementSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VideoPlacementSubtype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VideoPlacementSubtype(num)
	return nil
}

// Deprecated: Use VideoPlacementSubtype.Descriptor instead.
func (VideoPlacementSubtype) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{26}
}

// *
// The following table lists the various types of video placements in accordance with updated IAB
// Digital Video Guidelines. To be sent using plcmt attribute in Object:Video.
type VideoPlcmtSubtype int32

const (
	VideoPlcmtSubtype_VideoPlcmtSubtype_UNKNOWN VideoPlcmtSubtype = 0 // Equivalent to an unset value.
	// Instream: Pre-roll, mid-roll, and post-roll ads that are played before, during or after the
	// streaming video content that the consumer has requested. Instream video must be set to "sound
	// on" by default at player start, or have explicitly clear user intent to watch the video
	// content. While there may be other content surrounding the player, the video content must be the
	// focus of the user's visit. It should remain the primary content on the page and the only video
	// player in-view capable of audio when playing. If the player converts to floating/sticky
	// subsequent ad calls should accurately convey the updated player size.
	VideoPlcmtSubtype_INSTREAM_PLCMT VideoPlcmtSubtype = 1
	// Accompanying Content: Pre-roll, mid-roll, and post-roll ads that are played before, during, or
	// after streaming video content. The video player loads and plays before, between, or after
	// paragraphs of text or graphical content, and starts playing only when it enters the viewport.
	// Accompanying content should only start playback upon entering the viewport. It may convert to a
	// floating/sticky player as it scrolls off the page.
	VideoPlcmtSubtype_ACCOMPANYING_CONTENT_PLCMT VideoPlcmtSubtype = 2
	// Interstitial: Video ads that are played without video content. During playback, it must be the
	// primary focus of the page and take up the majority of the viewport and cannot be scrolled out
	// of view. This can be in placements like in-app video or slideshows.
	VideoPlcmtSubtype_INTERSTITIAL_PLCMT VideoPlcmtSubtype = 3
	// No Content/Standalone: Video ads that are played without streaming video content. This can be
	// in placements like slideshows, native feeds, in-content or sticky/floating.
	VideoPlcmtSubtype_STANDALONE_PLCMT VideoPlcmtSubtype = 4
)

// Enum value maps for VideoPlcmtSubtype.
var (
	VideoPlcmtSubtype_name = map[int32]string{
		0: "VideoPlcmtSubtype_UNKNOWN",
		1: "INSTREAM_PLCMT",
		2: "ACCOMPANYING_CONTENT_PLCMT",
		3: "INTERSTITIAL_PLCMT",
		4: "STANDALONE_PLCMT",
	}
	VideoPlcmtSubtype_value = map[string]int32{
		"VideoPlcmtSubtype_UNKNOWN":  0,
		"INSTREAM_PLCMT":             1,
		"ACCOMPANYING_CONTENT_PLCMT": 2,
		"INTERSTITIAL_PLCMT":         3,
		"STANDALONE_PLCMT":           4,
	}
)

func (x VideoPlcmtSubtype) Enum() *VideoPlcmtSubtype {
	p := new(VideoPlcmtSubtype)
	*p = x
	return p
}

func (x VideoPlcmtSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoPlcmtSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[27].Descriptor()
}

func (VideoPlcmtSubtype) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[27]
}

func (x VideoPlcmtSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VideoPlcmtSubtype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VideoPlcmtSubtype(num)
	return nil
}

// Deprecated: Use VideoPlcmtSubtype.Descriptor instead.
func (VideoPlcmtSubtype) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{27}
}

// *
// The following enum defines the various modes for when media playback terminates.
type PlaybackCessationMode int32

const (
	PlaybackCessationMode_PlaybackCessationMode_UNKNOWN PlaybackCessationMode = 0 // Equivalent to an unset value.
	PlaybackCessationMode_ON_COMPLETION                 PlaybackCessationMode = 1 // On Video Completion or when Terminated by User.
	PlaybackCessationMode_ON_VIEWPORT_EXIT              PlaybackCessationMode = 2 // On Leaving Viewport or when Terminated by User.
	PlaybackCessationMode_ON_EXIT_FLOAT                 PlaybackCessationMode = 3 // On Leaving Viewport Continues as a Floating/Slider Unit until Video
)

// Enum value maps for PlaybackCessationMode.
var (
	PlaybackCessationMode_name = map[int32]string{
		0: "PlaybackCessationMode_UNKNOWN",
		1: "ON_COMPLETION",
		2: "ON_VIEWPORT_EXIT",
		3: "ON_EXIT_FLOAT",
	}
	PlaybackCessationMode_value = map[string]int32{
		"PlaybackCessationMode_UNKNOWN": 0,
		"ON_COMPLETION":                 1,
		"ON_VIEWPORT_EXIT":              2,
		"ON_EXIT_FLOAT":                 3,
	}
)

func (x PlaybackCessationMode) Enum() *PlaybackCessationMode {
	p := new(PlaybackCessationMode)
	*p = x
	return p
}

func (x PlaybackCessationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybackCessationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[28].Descriptor()
}

func (PlaybackCessationMode) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[28]
}

func (x PlaybackCessationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlaybackCessationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlaybackCessationMode(num)
	return nil
}

// Deprecated: Use PlaybackCessationMode.Descriptor instead.
func (PlaybackCessationMode) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{28}
}

// *
// The following table lists the various media playback methods.
type PlaybackMethod int32

const (
	PlaybackMethod_PlaybackMethod_UNKNOWN PlaybackMethod = 0 // Equivalent to an unset value.
	PlaybackMethod_PAGE_LOAD_SOUND_ON     PlaybackMethod = 1 // Initiates on Page Load with Sound On.
	PlaybackMethod_PAGE_LOAD_SOUND_OFF    PlaybackMethod = 2 // Initiates on Page Load with Sound Off by Default.
	PlaybackMethod_CLICK_SOUND_ON         PlaybackMethod = 3 // Initiates on Click with Sound On.
	PlaybackMethod_MOUSEOVER_SOUND_ON     PlaybackMethod = 4 // Initiates on Mouse-Over with Sound On.
	PlaybackMethod_VIEWPORT_SOUND_ON      PlaybackMethod = 5 // Initiates on Entering Viewport with Sound On.
	PlaybackMethod_VIEWPORT_SOUND_OFF     PlaybackMethod = 6 // Initiates on Entering Viewport with Sound Off.
)

// Enum value maps for PlaybackMethod.
var (
	PlaybackMethod_name = map[int32]string{
		0: "PlaybackMethod_UNKNOWN",
		1: "PAGE_LOAD_SOUND_ON",
		2: "PAGE_LOAD_SOUND_OFF",
		3: "CLICK_SOUND_ON",
		4: "MOUSEOVER_SOUND_ON",
		5: "VIEWPORT_SOUND_ON",
		6: "VIEWPORT_SOUND_OFF",
	}
	PlaybackMethod_value = map[string]int32{
		"PlaybackMethod_UNKNOWN": 0,
		"PAGE_LOAD_SOUND_ON":     1,
		"PAGE_LOAD_SOUND_OFF":    2,
		"CLICK_SOUND_ON":         3,
		"MOUSEOVER_SOUND_ON":     4,
		"VIEWPORT_SOUND_ON":      5,
		"VIEWPORT_SOUND_OFF":     6,
	}
)

func (x PlaybackMethod) Enum() *PlaybackMethod {
	p := new(PlaybackMethod)
	*p = x
	return p
}

func (x PlaybackMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybackMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[29].Descriptor()
}

func (PlaybackMethod) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[29]
}

func (x PlaybackMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlaybackMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlaybackMethod(num)
	return nil
}

// Deprecated: Use PlaybackMethod.Descriptor instead.
func (PlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{29}
}

// *
// The following enum defines the options for content quality. These values are defined by the IAB;
// refer to www.iab.com/wp-content/uploads/2015/03/long-form-video-final.pdf for more information.
type ProductionQuality int32

const (
	ProductionQuality_ProductionQuality_UNKNOWN ProductionQuality = 0 // Equivalent to an unset value.
	ProductionQuality_PROFESSIONAL              ProductionQuality = 1 // Professionally Produced.
	ProductionQuality_PROSUMER                  ProductionQuality = 2 // Prosumer.
	ProductionQuality_UGC                       ProductionQuality = 3 // User Generated Content.
)

// Enum value maps for ProductionQuality.
var (
	ProductionQuality_name = map[int32]string{
		0: "ProductionQuality_UNKNOWN",
		1: "PROFESSIONAL",
		2: "PROSUMER",
		3: "UGC",
	}
	ProductionQuality_value = map[string]int32{
		"ProductionQuality_UNKNOWN": 0,
		"PROFESSIONAL":              1,
		"PROSUMER":                  2,
		"UGC":                       3,
	}
)

func (x ProductionQuality) Enum() *ProductionQuality {
	p := new(ProductionQuality)
	*p = x
	return p
}

func (x ProductionQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductionQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[30].Descriptor()
}

func (ProductionQuality) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[30]
}

func (x ProductionQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProductionQuality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProductionQuality(num)
	return nil
}

// Deprecated: Use ProductionQuality.Descriptor instead.
func (ProductionQuality) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{30}
}

// *
// The following enum lists the units of height and width used by creatives, assets, and placement
// specifications where noted.
type SizeUnit int32

const (
	SizeUnit_SizeUnit_UNKNOWN SizeUnit = 0 // Equivalent to an unset value.
	SizeUnit_DIPS             SizeUnit = 1 // Device Independent Pixels.
	SizeUnit_INCH             SizeUnit = 2 // Inches.
	SizeUnit_CENTIMETER       SizeUnit = 3 // Centimeters.
)

// Enum value maps for SizeUnit.
var (
	SizeUnit_name = map[int32]string{
		0: "SizeUnit_UNKNOWN",
		1: "DIPS",
		2: "INCH",
		3: "CENTIMETER",
	}
	SizeUnit_value = map[string]int32{
		"SizeUnit_UNKNOWN": 0,
		"DIPS":             1,
		"INCH":             2,
		"CENTIMETER":       3,
	}
)

func (x SizeUnit) Enum() *SizeUnit {
	p := new(SizeUnit)
	*p = x
	return p
}

func (x SizeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SizeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[31].Descriptor()
}

func (SizeUnit) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[31]
}

func (x SizeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SizeUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SizeUnit(num)
	return nil
}

// Deprecated: Use SizeUnit.Descriptor instead.
func (SizeUnit) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{31}
}

// *
// The following enum lists the various options for the video or audio start delay. If the start
// delay value is greater than 0, then the position is mid-roll and the value indicates the start
// delay.
type StartDelayMode int32

const (
	StartDelayMode_PRE_ROLL          StartDelayMode = 0
	StartDelayMode_GENERIC_MID_ROLL  StartDelayMode = -1
	StartDelayMode_GENERIC_POST_ROLL StartDelayMode = -2
)

// Enum value maps for StartDelayMode.
var (
	StartDelayMode_name = map[int32]string{
		0:  "PRE_ROLL",
		-1: "GENERIC_MID_ROLL",
		-2: "GENERIC_POST_ROLL",
	}
	StartDelayMode_value = map[string]int32{
		"PRE_ROLL":          0,
		"GENERIC_MID_ROLL":  -1,
		"GENERIC_POST_ROLL": -2,
	}
)

func (x StartDelayMode) Enum() *StartDelayMode {
	p := new(StartDelayMode)
	*p = x
	return p
}

func (x StartDelayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartDelayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[32].Descriptor()
}

func (StartDelayMode) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[32]
}

func (x StartDelayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StartDelayMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StartDelayMode(num)
	return nil
}

// Deprecated: Use StartDelayMode.Descriptor instead.
func (StartDelayMode) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{32}
}

// *
// The following enum defines the types of volume normalization modes, typically for audio.
type VolumeNormalizationMode int32

const (
	VolumeNormalizationMode_NO_NORMALIZATION       VolumeNormalizationMode = 0
	VolumeNormalizationMode_VOL_AVG_NORMALIZATION  VolumeNormalizationMode = 1 // Ad Volume Average Normalized to Content.
	VolumeNormalizationMode_VOL_PEAK_NORMALIZATION VolumeNormalizationMode = 2 // Ad Volume Peak Normalized to Content.
	VolumeNormalizationMode_LOUDNESS_NORMALIZATION VolumeNormalizationMode = 3 // Ad Loudness Normalized to Content.
	VolumeNormalizationMode_VOL_CUST_NORMALIZATION VolumeNormalizationMode = 4 // Custom Volume Normalization.
)

// Enum value maps for VolumeNormalizationMode.
var (
	VolumeNormalizationMode_name = map[int32]string{
		0: "NO_NORMALIZATION",
		1: "VOL_AVG_NORMALIZATION",
		2: "VOL_PEAK_NORMALIZATION",
		3: "LOUDNESS_NORMALIZATION",
		4: "VOL_CUST_NORMALIZATION",
	}
	VolumeNormalizationMode_value = map[string]int32{
		"NO_NORMALIZATION":       0,
		"VOL_AVG_NORMALIZATION":  1,
		"VOL_PEAK_NORMALIZATION": 2,
		"LOUDNESS_NORMALIZATION": 3,
		"VOL_CUST_NORMALIZATION": 4,
	}
)

func (x VolumeNormalizationMode) Enum() *VolumeNormalizationMode {
	p := new(VolumeNormalizationMode)
	*p = x
	return p
}

func (x VolumeNormalizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeNormalizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[33].Descriptor()
}

func (VolumeNormalizationMode) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[33]
}

func (x VolumeNormalizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VolumeNormalizationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VolumeNormalizationMode(num)
	return nil
}

// Deprecated: Use VolumeNormalizationMode.Descriptor instead.
func (VolumeNormalizationMode) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{33}
}

// *
//
//	The following enum lists the possible sources for User-Agent data.
type UserAgentSource int32

const (
	UserAgentSource_UserAgentSource_UNKNOWN   UserAgentSource = 0 // Equivalent to an unset value.
	UserAgentSource_CLIENT_HINTS_LOW_ENTROPY  UserAgentSource = 1 // User-Agent Client Hints (only low-entropy headers were available).
	UserAgentSource_CLIENT_HINTS_HIGH_ENTROPY UserAgentSource = 2 // User-Agent Client Hints (with high-entropy headers available).
	UserAgentSource_USER_AGENT_STRING         UserAgentSource = 3 // Parsed from User-Agent header.
)

// Enum value maps for UserAgentSource.
var (
	UserAgentSource_name = map[int32]string{
		0: "UserAgentSource_UNKNOWN",
		1: "CLIENT_HINTS_LOW_ENTROPY",
		2: "CLIENT_HINTS_HIGH_ENTROPY",
		3: "USER_AGENT_STRING",
	}
	UserAgentSource_value = map[string]int32{
		"UserAgentSource_UNKNOWN":   0,
		"CLIENT_HINTS_LOW_ENTROPY":  1,
		"CLIENT_HINTS_HIGH_ENTROPY": 2,
		"USER_AGENT_STRING":         3,
	}
)

func (x UserAgentSource) Enum() *UserAgentSource {
	p := new(UserAgentSource)
	*p = x
	return p
}

func (x UserAgentSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserAgentSource) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[34].Descriptor()
}

func (UserAgentSource) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[34]
}

func (x UserAgentSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserAgentSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserAgentSource(num)
	return nil
}

// Deprecated: Use UserAgentSource.Descriptor instead.
func (UserAgentSource) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{34}
}

// *
// The following enum defines a standard list of creative attributes that can describe an actual ad
// or restrictions relative to a given placement.
type Creative_Attribute int32

const (
	Creative_Attribute_UNKNOWN     Creative_Attribute = 0  // Equivalent to an unset value.
	Creative_AUDIO_AUTOPLAY        Creative_Attribute = 1  // Audio Ad (Autoplay).
	Creative_AUDIO_USER_INIT       Creative_Attribute = 2  // Audio Ad (User Initiated).
	Creative_EXPANDABLE_AUTO       Creative_Attribute = 3  // Expandable (Automatic).
	Creative_EXPANDABLE_ONCLICK    Creative_Attribute = 4  // Expandable (User Initiated - Click).
	Creative_EXPANDABLE_ONROLLOVER Creative_Attribute = 5  // Expandable (User Initiated - Rollover).
	Creative_IB_VIDEO_AUTO         Creative_Attribute = 6  // In-Banner Video Ad (Autoplay).
	Creative_IB_VIDEO_USER_INIT    Creative_Attribute = 7  // In-Banner Video Ad (User Initiated).
	Creative_POP                   Creative_Attribute = 8  // Pop (e.g., Over, Under, or Upon Exit).
	Creative_PROVOCATIVE           Creative_Attribute = 9  // Provocative or Suggestive Imagery.
	Creative_ANNOYING              Creative_Attribute = 10 // Shaky, Flashing, Flickery, Extreme Animation, Smileys.
	Creative_SURVEYS               Creative_Attribute = 11 // Surveys.
	Creative_TEXT_ONLY             Creative_Attribute = 12 // Text Only
	Creative_USER_INTERACTIVE      Creative_Attribute = 13 // User Interactive (e.g., Embedded Games).
	Creative_DIALOG_ALERT          Creative_Attribute = 14 // Windows Dialog or Alert Style.
	Creative_AUDIO_ON_OFF          Creative_Attribute = 15 // Has Audio On/Off Button.
	Creative_SKIP_BUTTON           Creative_Attribute = 16 // Ad Provides Skip Button (e.g., VPAID-rendered skip button on pre-roll video).
	Creative_ADOBE_FLASH           Creative_Attribute = 17 // Adobe Flash.
	Creative_RESPONSIVE            Creative_Attribute = 18 // Responsive; Sizeless; Fluid (i.e., creatives that dynamically resize to env).
)

// Enum value maps for Creative_Attribute.
var (
	Creative_Attribute_name = map[int32]string{
		0:  "Attribute_UNKNOWN",
		1:  "AUDIO_AUTOPLAY",
		2:  "AUDIO_USER_INIT",
		3:  "EXPANDABLE_AUTO",
		4:  "EXPANDABLE_ONCLICK",
		5:  "EXPANDABLE_ONROLLOVER",
		6:  "IB_VIDEO_AUTO",
		7:  "IB_VIDEO_USER_INIT",
		8:  "POP",
		9:  "PROVOCATIVE",
		10: "ANNOYING",
		11: "SURVEYS",
		12: "TEXT_ONLY",
		13: "USER_INTERACTIVE",
		14: "DIALOG_ALERT",
		15: "AUDIO_ON_OFF",
		16: "SKIP_BUTTON",
		17: "ADOBE_FLASH",
		18: "RESPONSIVE",
	}
	Creative_Attribute_value = map[string]int32{
		"Attribute_UNKNOWN":     0,
		"AUDIO_AUTOPLAY":        1,
		"AUDIO_USER_INIT":       2,
		"EXPANDABLE_AUTO":       3,
		"EXPANDABLE_ONCLICK":    4,
		"EXPANDABLE_ONROLLOVER": 5,
		"IB_VIDEO_AUTO":         6,
		"IB_VIDEO_USER_INIT":    7,
		"POP":                   8,
		"PROVOCATIVE":           9,
		"ANNOYING":              10,
		"SURVEYS":               11,
		"TEXT_ONLY":             12,
		"USER_INTERACTIVE":      13,
		"DIALOG_ALERT":          14,
		"AUDIO_ON_OFF":          15,
		"SKIP_BUTTON":           16,
		"ADOBE_FLASH":           17,
		"RESPONSIVE":            18,
	}
)

func (x Creative_Attribute) Enum() *Creative_Attribute {
	p := new(Creative_Attribute)
	*p = x
	return p
}

func (x Creative_Attribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Creative_Attribute) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[35].Descriptor()
}

func (Creative_Attribute) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[35]
}

func (x Creative_Attribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Creative_Attribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Creative_Attribute(num)
	return nil
}

// Deprecated: Use Creative_Attribute.Descriptor instead.
func (Creative_Attribute) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{0, 0}
}

// *
// The following enum defines the various subtypes of audio and video ad creatives.
type Creative_AudioVideoType int32

const (
	Creative_AudioVideoType_UNKNOWN Creative_AudioVideoType = 0  // Equivalent to an unset value.
	Creative_VAST_1_0               Creative_AudioVideoType = 1  // VAST 1.0
	Creative_VAST_2_0               Creative_AudioVideoType = 2  // VAST 2.0
	Creative_VAST_3_0               Creative_AudioVideoType = 3  // VAST 3.0
	Creative_VAST_1_0_WRAP          Creative_AudioVideoType = 4  // VAST 1.0 Wrapper
	Creative_VAST_2_0_WRAP          Creative_AudioVideoType = 5  // VAST 2.0 Wrapper
	Creative_VAST_3_0_WRAP          Creative_AudioVideoType = 6  // VAST 3.0 Wrapper
	Creative_VAST_4_0               Creative_AudioVideoType = 7  // VAST 4.0
	Creative_VAST_4_0_WRAP          Creative_AudioVideoType = 8  // VAST 4.0 Wrapper
	Creative_DAAST_1_0              Creative_AudioVideoType = 9  // DAAST 1.0
	Creative_DAAST_1_0_WRAP         Creative_AudioVideoType = 10 // DAAST 1.0 Wrapper
	Creative_VAST_4_1               Creative_AudioVideoType = 11 // VAST 4.1
	Creative_VAST_4_1_WRAP          Creative_AudioVideoType = 12 // VAST 4.1 Wrapper
	Creative_VAST_4_2               Creative_AudioVideoType = 13 // VAST 4.2
	Creative_VAST_4_2_WRAP          Creative_AudioVideoType = 14 // VAST 4.2 Wrapper
)

// Enum value maps for Creative_AudioVideoType.
var (
	Creative_AudioVideoType_name = map[int32]string{
		0:  "AudioVideoType_UNKNOWN",
		1:  "VAST_1_0",
		2:  "VAST_2_0",
		3:  "VAST_3_0",
		4:  "VAST_1_0_WRAP",
		5:  "VAST_2_0_WRAP",
		6:  "VAST_3_0_WRAP",
		7:  "VAST_4_0",
		8:  "VAST_4_0_WRAP",
		9:  "DAAST_1_0",
		10: "DAAST_1_0_WRAP",
		11: "VAST_4_1",
		12: "VAST_4_1_WRAP",
		13: "VAST_4_2",
		14: "VAST_4_2_WRAP",
	}
	Creative_AudioVideoType_value = map[string]int32{
		"AudioVideoType_UNKNOWN": 0,
		"VAST_1_0":               1,
		"VAST_2_0":               2,
		"VAST_3_0":               3,
		"VAST_1_0_WRAP":          4,
		"VAST_2_0_WRAP":          5,
		"VAST_3_0_WRAP":          6,
		"VAST_4_0":               7,
		"VAST_4_0_WRAP":          8,
		"DAAST_1_0":              9,
		"DAAST_1_0_WRAP":         10,
		"VAST_4_1":               11,
		"VAST_4_1_WRAP":          12,
		"VAST_4_2":               13,
		"VAST_4_2_WRAP":          14,
	}
)

func (x Creative_AudioVideoType) Enum() *Creative_AudioVideoType {
	p := new(Creative_AudioVideoType)
	*p = x
	return p
}

func (x Creative_AudioVideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Creative_AudioVideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[36].Descriptor()
}

func (Creative_AudioVideoType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[36]
}

func (x Creative_AudioVideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Creative_AudioVideoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Creative_AudioVideoType(num)
	return nil
}

// Deprecated: Use Creative_AudioVideoType.Descriptor instead.
func (Creative_AudioVideoType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{0, 1}
}

// *
// The following enum defines the various subtypes of display ad creatives.
type Creative_DisplayType int32

const (
	Creative_DisplayType_UNKNOWN Creative_DisplayType = 0 // Equivalent to an unset value.
	Creative_HTML                Creative_DisplayType = 1 // HTML
	Creative_AMPHTML             Creative_DisplayType = 2 // AMP HTML
	Creative_IMAGE               Creative_DisplayType = 3 // Structured Image object
	Creative_NATIVE              Creative_DisplayType = 4 // Structured Native Object
)

// Enum value maps for Creative_DisplayType.
var (
	Creative_DisplayType_name = map[int32]string{
		0: "DisplayType_UNKNOWN",
		1: "HTML",
		2: "AMPHTML",
		3: "IMAGE",
		4: "NATIVE",
	}
	Creative_DisplayType_value = map[string]int32{
		"DisplayType_UNKNOWN": 0,
		"HTML":                1,
		"AMPHTML":             2,
		"IMAGE":               3,
		"NATIVE":              4,
	}
)

func (x Creative_DisplayType) Enum() *Creative_DisplayType {
	p := new(Creative_DisplayType)
	*p = x
	return p
}

func (x Creative_DisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Creative_DisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[37].Descriptor()
}

func (Creative_DisplayType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes[37]
}

func (x Creative_DisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Creative_DisplayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Creative_DisplayType(num)
	return nil
}

// Deprecated: Use Creative_DisplayType.Descriptor instead.
func (Creative_DisplayType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{0, 2}
}

type Creative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Creative) Reset() {
	*x = Creative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_enums_enums_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Creative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Creative) ProtoMessage() {}

func (x *Creative) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_enums_enums_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Creative.ProtoReflect.Descriptor instead.
func (*Creative) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP(), []int{0}
}

var File_com_iabtechlab_adcom_v1_enums_enums_proto protoreflect.FileDescriptor

var file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0xe9, 0x05, 0x0a, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58,
	0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x43, 0x4c, 0x49, 0x43, 0x4b,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4f, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x42, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x42, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x50, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x53, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x4f, 0x42, 0x45,
	0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x10, 0x12, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x30, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x57, 0x52,
	0x41, 0x50, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x30,
	0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x53, 0x54, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41,
	0x53, 0x54, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x53, 0x54,
	0x5f, 0x34, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x41, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41,
	0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x31, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x32, 0x10, 0x0d, 0x12, 0x11, 0x0a,
	0x0d, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x32, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x0e,
	0x22, 0x54, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x50, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45,
	0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xaa,
	0x01, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x50, 0x41,
	0x49, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x50, 0x41, 0x49,
	0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x4d, 0x4d, 0x41, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x4d, 0x49, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x49, 0x4d, 0x49, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x49, 0x4d, 0x49, 0x44, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x09, 0x2a, 0x81, 0x01, 0x0a, 0x0f,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x2a,
	0xd7, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x41, 0x42, 0x5f, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x41, 0x42, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x5f,
	0x54, 0x41, 0x58, 0x5f, 0x32, 0x5f, 0x32, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x09, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4c,
	0x49, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4d,
	0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0x5b,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x53, 0x52, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x54, 0x4d, 0x4c, 0x5f, 0x52, 0x53, 0x52, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x52, 0x43, 0x10, 0x03, 0x2a, 0x87, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x47, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x33, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x34, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x35, 0x47, 0x10, 0x07, 0x2a, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x54, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0x5a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x03, 0x2a, 0x9c, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x50, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x54, 0x56, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x4f,
	0x58, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4f, 0x48, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x08, 0x2a, 0xdf, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x43, 0x10, 0x0a, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x58, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x14, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48,
	0x41, 0x54, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10,
	0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x1f,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x53, 0x10, 0x20, 0x2a, 0x87, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a,
	0xb3, 0x07, 0x0a, 0x0d, 0x44, 0x4f, 0x4f, 0x48, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x4f, 0x48, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x49, 0x52, 0x42, 0x4f, 0x52, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x49,
	0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x41, 0x47, 0x5f, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x55, 0x4e, 0x47, 0x45, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x4d, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x43,
	0x4b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x52, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x42, 0x49, 0x4b, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x55, 0x4c, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x53,
	0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x46, 0x45, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x0f, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x10, 0x11,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x4e, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x44, 0x5f, 0x57,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x4f, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x10,
	0x14, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f,
	0x4f, 0x42, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x45, 0x44, 0x53, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4d,
	0x49, 0x4c, 0x59, 0x5f, 0x45, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x45, 0x52,
	0x52, 0x59, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x47,
	0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x4f, 0x4c, 0x46, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x1b, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x59, 0x4d, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54,
	0x41, 0x4c, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x10, 0x1e, 0x12,
	0x0d, 0x0a, 0x09, 0x4a, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x09,
	0x0a, 0x05, 0x4b, 0x49, 0x4f, 0x53, 0x4b, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x4c,
	0x4c, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x54, 0x10, 0x22,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x49, 0x4e, 0x45, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x42, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57,
	0x53, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x27, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4b, 0x49, 0x4f, 0x53, 0x4b, 0x10, 0x28, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x53,
	0x52, 0x10, 0x2a, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x2b, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x43, 0x45, 0x50, 0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x2c, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x2d, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x10, 0x2e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x41, 0x4c, 0x4f, 0x4e, 0x10, 0x2f,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x45, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x30, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x10, 0x31, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x57, 0x41, 0x59, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x41, 0x58, 0x49, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x10, 0x33, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x53, 0x49, 0x44, 0x45, 0x10,
	0x34, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x10,
	0x35, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x52, 0x42, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c,
	0x10, 0x36, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45,
	0x10, 0x37, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x41, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x58, 0x10, 0x39, 0x2a, 0x57, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x02, 0x2a, 0x7d,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x52, 0x43, 0x35, 0x30,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d,
	0x52, 0x43, 0x31, 0x30, 0x30, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x35, 0x30, 0x10, 0x05, 0x2a, 0x7b, 0x0a,
	0x13, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x06, 0x2a, 0x55, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x4d, 0x5f, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x03, 0x2a, 0x7c, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x68, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x32, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55, 0x53, 0x54, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x41, 0x58, 0x4d, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45,
	0x54, 0x41, 0x43, 0x55, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x45, 0x0a, 0x0d, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x02,
	0x2a, 0x60, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x50,
	0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c,
	0x4c, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x31, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x49, 0x4b, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x4c, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x58, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x53,
	0x43, 0x32, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x0c, 0x2a, 0x4c, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x03, 0x2a, 0xfc, 0x02, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x4f, 0x5f, 0x33, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x4c, 0x45, 0x5f, 0x54, 0x56, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x48, 0x41,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x44, 0x41, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x52, 0x45, 0x57, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45,
	0x4f, 0x53, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x52, 0x57, 0x49, 0x4e, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x52, 0x45, 0x4f, 0x53, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x49, 0x52, 0x45, 0x46, 0x4f, 0x58, 0x4f, 0x53, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x45, 0x4c, 0x45, 0x4e, 0x4f, 0x53, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x41, 0x43, 0x4f, 0x53, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x45, 0x47, 0x4f,
	0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x4f, 0x53, 0x10, 0x11, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x54, 0x42, 0x53, 0x44, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x55, 0x43, 0x4c, 0x45, 0x55, 0x53, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x53, 0x56, 0x49, 0x54, 0x41, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x33, 0x10,
	0x15, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x34, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53,
	0x50, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4d, 0x42, 0x49, 0x41, 0x4e, 0x10, 0x18,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x5a, 0x45, 0x4e, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x54, 0x43, 0x48, 0x4f, 0x53, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x45, 0x42, 0x4f,
	0x53, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x1c,
	0x2a, 0x87, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x46, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54,
	0x46, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x49, 0x44, 0x45, 0x42, 0x41, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x58, 0x10, 0x07, 0x2a, 0x87, 0x01, 0x0a, 0x15, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e,
	0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x05, 0x2a, 0x94, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x63, 0x6d, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x6c, 0x63, 0x6d, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x43, 0x4d, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x43, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x43, 0x4d, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c,
	0x43, 0x4d, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c,
	0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x43, 0x4d, 0x54, 0x10, 0x04, 0x2a, 0x76, 0x0a, 0x15, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x4e,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x03, 0x2a, 0xb8, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x53, 0x45,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x2a, 0x5b,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x47, 0x43, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x08, 0x53,
	0x69, 0x7a, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x69, 0x7a, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x49, 0x50, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x2a, 0x5d, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x49, 0x44,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1e, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x2a, 0x9e, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x5f, 0x41, 0x56, 0x47, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x56, 0x4f, 0x4c, 0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x55,
	0x44, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4f, 0x4c, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x2a, 0x82, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x4e,
	0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x53,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x94, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2f,
	0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x43, 0x49, 0x41, 0x56, 0x45, 0xaa, 0x02, 0x1d,
	0x43, 0x6f, 0x6d, 0x2e, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x1d,
	0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x29,
	0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41,
	0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x43, 0x6f, 0x6d, 0x3a,
	0x3a, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x41, 0x64, 0x63,
	0x6f, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73,
}

var (
	file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescOnce sync.Once
	file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescData = file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDesc
)

func file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescGZIP() []byte {
	file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescOnce.Do(func() {
		file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescData)
	})
	return file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDescData
}

var file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 38)
var file_com_iabtechlab_adcom_v1_enums_enums_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_com_iabtechlab_adcom_v1_enums_enums_proto_goTypes = []any{
	(AgentType)(0),               // 0: com.iabtechlab.adcom.v1.enums.AgentType
	(APIFramework)(0),            // 1: com.iabtechlab.adcom.v1.enums.APIFramework
	(AuditStatusCode)(0),         // 2: com.iabtechlab.adcom.v1.enums.AuditStatusCode
	(CategoryTaxonomy)(0),        // 3: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy
	(ClickType)(0),               // 4: com.iabtechlab.adcom.v1.enums.ClickType
	(CompanionType)(0),           // 5: com.iabtechlab.adcom.v1.enums.CompanionType
	(ConnectionType)(0),          // 6: com.iabtechlab.adcom.v1.enums.ConnectionType
	(ContentContext)(0),          // 7: com.iabtechlab.adcom.v1.enums.ContentContext
	(DeliveryMethod)(0),          // 8: com.iabtechlab.adcom.v1.enums.DeliveryMethod
	(DeviceType)(0),              // 9: com.iabtechlab.adcom.v1.enums.DeviceType
	(DisplayContextType)(0),      // 10: com.iabtechlab.adcom.v1.enums.DisplayContextType
	(DisplayPlacementType)(0),    // 11: com.iabtechlab.adcom.v1.enums.DisplayPlacementType
	(DOOHVenueType)(0),           // 12: com.iabtechlab.adcom.v1.enums.DOOHVenueType
	(EventTrackingMethod)(0),     // 13: com.iabtechlab.adcom.v1.enums.EventTrackingMethod
	(EventType)(0),               // 14: com.iabtechlab.adcom.v1.enums.EventType
	(ExpandableDirection)(0),     // 15: com.iabtechlab.adcom.v1.enums.ExpandableDirection
	(FeedType)(0),                // 16: com.iabtechlab.adcom.v1.enums.FeedType
	(MatchMethod)(0),             // 17: com.iabtechlab.adcom.v1.enums.MatchMethod
	(LocationService)(0),         // 18: com.iabtechlab.adcom.v1.enums.LocationService
	(LinearityMode)(0),           // 19: com.iabtechlab.adcom.v1.enums.LinearityMode
	(LocationType)(0),            // 20: com.iabtechlab.adcom.v1.enums.LocationType
	(MediaRating)(0),             // 21: com.iabtechlab.adcom.v1.enums.MediaRating
	(NativeDataAssetType)(0),     // 22: com.iabtechlab.adcom.v1.enums.NativeDataAssetType
	(NativeImageAssetType)(0),    // 23: com.iabtechlab.adcom.v1.enums.NativeImageAssetType
	(OperatingSystem)(0),         // 24: com.iabtechlab.adcom.v1.enums.OperatingSystem
	(PlacementPosition)(0),       // 25: com.iabtechlab.adcom.v1.enums.PlacementPosition
	(VideoPlacementSubtype)(0),   // 26: com.iabtechlab.adcom.v1.enums.VideoPlacementSubtype
	(VideoPlcmtSubtype)(0),       // 27: com.iabtechlab.adcom.v1.enums.VideoPlcmtSubtype
	(PlaybackCessationMode)(0),   // 28: com.iabtechlab.adcom.v1.enums.PlaybackCessationMode
	(PlaybackMethod)(0),          // 29: com.iabtechlab.adcom.v1.enums.PlaybackMethod
	(ProductionQuality)(0),       // 30: com.iabtechlab.adcom.v1.enums.ProductionQuality
	(SizeUnit)(0),                // 31: com.iabtechlab.adcom.v1.enums.SizeUnit
	(StartDelayMode)(0),          // 32: com.iabtechlab.adcom.v1.enums.StartDelayMode
	(VolumeNormalizationMode)(0), // 33: com.iabtechlab.adcom.v1.enums.VolumeNormalizationMode
	(UserAgentSource)(0),         // 34: com.iabtechlab.adcom.v1.enums.UserAgentSource
	(Creative_Attribute)(0),      // 35: com.iabtechlab.adcom.v1.enums.Creative.Attribute
	(Creative_AudioVideoType)(0), // 36: com.iabtechlab.adcom.v1.enums.Creative.AudioVideoType
	(Creative_DisplayType)(0),    // 37: com.iabtechlab.adcom.v1.enums.Creative.DisplayType
	(*Creative)(nil),             // 38: com.iabtechlab.adcom.v1.enums.Creative
}
var file_com_iabtechlab_adcom_v1_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_com_iabtechlab_adcom_v1_enums_enums_proto_init() }
func file_com_iabtechlab_adcom_v1_enums_enums_proto_init() {
	if File_com_iabtechlab_adcom_v1_enums_enums_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_iabtechlab_adcom_v1_enums_enums_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Creative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDesc,
			NumEnums:      38,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_iabtechlab_adcom_v1_enums_enums_proto_goTypes,
		DependencyIndexes: file_com_iabtechlab_adcom_v1_enums_enums_proto_depIdxs,
		EnumInfos:         file_com_iabtechlab_adcom_v1_enums_enums_proto_enumTypes,
		MessageInfos:      file_com_iabtechlab_adcom_v1_enums_enums_proto_msgTypes,
	}.Build()
	File_com_iabtechlab_adcom_v1_enums_enums_proto = out.File
	file_com_iabtechlab_adcom_v1_enums_enums_proto_rawDesc = nil
	file_com_iabtechlab_adcom_v1_enums_enums_proto_goTypes = nil
	file_com_iabtechlab_adcom_v1_enums_enums_proto_depIdxs = nil
}
