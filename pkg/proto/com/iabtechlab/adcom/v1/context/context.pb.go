//*
// This group of objects represent concepts that are interacting, presenting, enclosing, or are
// otherwise relating to the world in which impressions live. These include the user, their device,
// their location, the channel (e.g., site, app, digital out-of-home) with which they are
// interacting, the channel's publisher, its content, and any regulations that are in effect
// (e.g., COPPA, GDPR).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: com/iabtechlab/adcom/v1/context/context.proto

package context

import (
	_ "github.com/bidon-io/bidon-backend/pkg/proto/com/iabtechlab/adcom/v1/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A distribution channel is an abstraction of the various types of entities or channels through
// which ads are distributed. Examples include websites, mobile apps, and digital out-of-home (DOOH)
// systems. This generalized class contains those attributes and relationships that are common to
// all distribution channels and as such, all of its attributes and relationships are inherited by
// each of its derived classes.
type DistributionChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vendor specific unique identifier of the distribution channel.
	// Recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Displayable name of the distribution channel.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Details about the publisher of the distribution channel.
	// Refer to Object: Publisher.
	Pub *Publisher `protobuf:"bytes,3,opt,name=pub" json:"pub,omitempty"`
	// Details about the content within the distribution channel.
	// Refer to Object: Content.
	Content *Content `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	// The DistributionChannel implementation details.
	//
	// Types that are assignable to ChannelOneof:
	//
	//	*DistributionChannel_Site_
	//	*DistributionChannel_App_
	//	*DistributionChannel_Dooh
	ChannelOneof isDistributionChannel_ChannelOneof `protobuf_oneof:"channel_oneof"`
}

func (x *DistributionChannel) Reset() {
	*x = DistributionChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionChannel) ProtoMessage() {}

func (x *DistributionChannel) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionChannel.ProtoReflect.Descriptor instead.
func (*DistributionChannel) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{0}
}

func (x *DistributionChannel) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DistributionChannel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DistributionChannel) GetPub() *Publisher {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *DistributionChannel) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (m *DistributionChannel) GetChannelOneof() isDistributionChannel_ChannelOneof {
	if m != nil {
		return m.ChannelOneof
	}
	return nil
}

func (x *DistributionChannel) GetSite() *DistributionChannel_Site {
	if x, ok := x.GetChannelOneof().(*DistributionChannel_Site_); ok {
		return x.Site
	}
	return nil
}

func (x *DistributionChannel) GetApp() *DistributionChannel_App {
	if x, ok := x.GetChannelOneof().(*DistributionChannel_App_); ok {
		return x.App
	}
	return nil
}

func (x *DistributionChannel) GetDooh() *DistributionChannel_DOOH {
	if x, ok := x.GetChannelOneof().(*DistributionChannel_Dooh); ok {
		return x.Dooh
	}
	return nil
}

type isDistributionChannel_ChannelOneof interface {
	isDistributionChannel_ChannelOneof()
}

type DistributionChannel_Site_ struct {
	Site *DistributionChannel_Site `protobuf:"bytes,5,opt,name=site,oneof"`
}

type DistributionChannel_App_ struct {
	App *DistributionChannel_App `protobuf:"bytes,6,opt,name=app,oneof"`
}

type DistributionChannel_Dooh struct {
	Dooh *DistributionChannel_DOOH `protobuf:"bytes,7,opt,name=dooh,oneof"`
}

func (*DistributionChannel_Site_) isDistributionChannel_ChannelOneof() {}

func (*DistributionChannel_App_) isDistributionChannel_ChannelOneof() {}

func (*DistributionChannel_Dooh) isDistributionChannel_ChannelOneof() {}

// *
// This object describes the publisher of the media in which ads will be displayed.
type Publisher struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Vendor-specific unique publisher identifier, as used in ads.txt files.
	// Recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Displayable name of the publisher.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Highest level domain of the publisher (e.g., "publisher.com").
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of content categories that describe the publisher using IDs from the taxonomy indicated
	// in "cattax".
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// The taxonomy in use for the "cat" attribute.
	// Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	Cattax *int32 `protobuf:"varint,5,opt,name=cattax" json:"cattax,omitempty"`
}

func (x *Publisher) Reset() {
	*x = Publisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publisher) ProtoMessage() {}

func (x *Publisher) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publisher.ProtoReflect.Descriptor instead.
func (*Publisher) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{1}
}

func (x *Publisher) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Publisher) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Publisher) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *Publisher) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Publisher) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

// *
// This object describes the content in which an impression can appear, which may be syndicated or
// non-syndicated content. This object may be useful when syndicated content contains impressions
// and does not necessarily match the publisher's general content. An exchange may or may not have
// knowledge of the page where the content is running as a result of the syndication method (e.g.,
// a video impression embedded in an iframe on an unknown web property or device).
type Content struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID uniquely identifiying the content.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Episode number.
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	// Content title. Video examples: "Search Committee" (television), "Star Wars, A New Hope" (movie),
	// or "Endgame" (made for web). Non-video Example: "Why an Antarctic Glacier Is Melting So Quickly"
	// (Time magazine article).
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// Content series. Video examples: "The Office" (television), "Star Wars" (movie), or "Arby 'N'
	// The Chief" (made for web). non-video example: "Ecocentric" (Time Magazine blog).
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	// Content season (e.g., "Season 3").
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	// Artist credited with the content.
	Artist *string `protobuf:"bytes,6,opt,name=artist" json:"artist,omitempty"`
	// Genre that best describes the content (e.g., rock, pop, etc).
	Genre *string `protobuf:"bytes,7,opt,name=genre" json:"genre,omitempty"`
	// Album to which the content belongs; typically for audio.
	Album *string `protobuf:"bytes,8,opt,name=album" json:"album,omitempty"`
	// International Standard Recording Code conforming to ISO-3901.
	Isrc *string `protobuf:"bytes,9,opt,name=isrc" json:"isrc,omitempty"`
	// URL of the content, for buy-sdie contextualization or review.
	Url *string `protobuf:"bytes,10,opt,name=url" json:"url,omitempty"`
	// Array of content categories describing the content using IDs from the taxonomy indicated in
	// "cattax".
	Cat []string `protobuf:"bytes,11,rep,name=cat" json:"cat,omitempty"`
	// The taxonomy in use for the "cat" attribute.
	// Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	Cattax *int32 `protobuf:"varint,12,opt,name=cattax" json:"cattax,omitempty"`
	// Produciton quality.
	// Refer to List: com.iabtechlab.adcom.v1.enums.ProductionQuality.
	Prodq *int32 `protobuf:"varint,13,opt,name=prodq" json:"prodq,omitempty"`
	// Type of content (game, video, text, etc.).
	// Refer to List: com.iabtechlab.adcom.v1.enums.ContentContext.
	Context *int32 `protobuf:"varint,14,opt,name=context" json:"context,omitempty"`
	// Content rating (e.g., MPAA).
	Rating *string `protobuf:"bytes,15,opt,name=rating" json:"rating,omitempty"`
	// User rating of the content (e.g., number of stars, likes, etc.).
	Urating *string `protobuf:"bytes,16,opt,name=urating" json:"urating,omitempty"`
	// Media rating per IQG guidelines.
	// Refer to List: com.iabtechlab.adcom.v1.enums.MediaRating.
	Mrating *int32 `protobuf:"varint,17,opt,name=mrating" json:"mrating,omitempty"`
	// Array of kewyords describing the content.
	// TOOD(@joelpm): deviates but makes more sense to me.
	Keywords []string `protobuf:"bytes,18,rep,name=keywords" json:"keywords,omitempty"`
	// Indication of live content, where false = not live, true = live (e.g. stream, live blog).
	Live *bool `protobuf:"varint,19,opt,name=live" json:"live,omitempty"`
	// Source relationship, where 0 = indirect, 1 = direct.
	Srcrel *bool `protobuf:"varint,20,opt,name=srcrel" json:"srcrel,omitempty"`
	// Length of content in seconds; typically for video or audio.
	Len *int32 `protobuf:"varint,21,opt,name=len" json:"len,omitempty"`
	// Content language using ISO-639-1-alpha-2.
	Lang *string `protobuf:"bytes,22,opt,name=lang" json:"lang,omitempty"`
	// Indicator of whether or not the content is embedded off-site from the site or app described
	// in those objects (e.g., an embedded video player), where false = no, true = yes.
	Embed *bool `protobuf:"varint,23,opt,name=embed" json:"embed,omitempty"`
	// Details about the content producer.
	// Refer to Object: Producer.
	Producer *Producer `protobuf:"bytes,24,opt,name=producer" json:"producer,omitempty"`
	// Additional user data. Each "Data" object represents a different data source.
	// Refer to Object: Data.
	Data []*Data `protobuf:"bytes,25,rep,name=data" json:"data,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{2}
}

func (x *Content) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Content) GetEpisode() int32 {
	if x != nil && x.Episode != nil {
		return *x.Episode
	}
	return 0
}

func (x *Content) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Content) GetSeries() string {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return ""
}

func (x *Content) GetSeason() string {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return ""
}

func (x *Content) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *Content) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *Content) GetAlbum() string {
	if x != nil && x.Album != nil {
		return *x.Album
	}
	return ""
}

func (x *Content) GetIsrc() string {
	if x != nil && x.Isrc != nil {
		return *x.Isrc
	}
	return ""
}

func (x *Content) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Content) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Content) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

func (x *Content) GetProdq() int32 {
	if x != nil && x.Prodq != nil {
		return *x.Prodq
	}
	return 0
}

func (x *Content) GetContext() int32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *Content) GetRating() string {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return ""
}

func (x *Content) GetUrating() string {
	if x != nil && x.Urating != nil {
		return *x.Urating
	}
	return ""
}

func (x *Content) GetMrating() int32 {
	if x != nil && x.Mrating != nil {
		return *x.Mrating
	}
	return 0
}

func (x *Content) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Content) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

func (x *Content) GetSrcrel() bool {
	if x != nil && x.Srcrel != nil {
		return *x.Srcrel
	}
	return false
}

func (x *Content) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Content) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *Content) GetEmbed() bool {
	if x != nil && x.Embed != nil {
		return *x.Embed
	}
	return false
}

func (x *Content) GetProducer() *Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *Content) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// This object defines the producer of the content in which ad will be displayed. This is
// particularly useful when the content is syndicated and may be distributed through different
// publishers and thus when the producer and publisher are not necessarily the same entity.
type Producer struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Vendor-specific unique producer identifer. Useful if content is syndicated and may be posted
	// a site using using embed tags.
	// Recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Displayable name of the producer.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Highest level domain of the producer (e.g., "producer.com").
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of content categories that describe the producer using IDs from the taxonomy indicated
	// in "cattax".
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// The taxonomy in use for the "cat" attributed.
	// Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	Cattax *int32 `protobuf:"varint,5,opt,name=cattax" json:"cattax,omitempty"`
}

func (x *Producer) Reset() {
	*x = Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{3}
}

func (x *Producer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Producer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Producer) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *Producer) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Producer) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

// *
// See the definition of ExtendedId.
type UniversalId struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Cookie or platform-native identifier.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Type of user agent the match is from. It is highly recommended to set this,
	// as many DSPs separate app-native IDs from browser-based IDs and require a type
	// value for ID resolution. Refer to List: Agent Types.
	Atype *int32 `protobuf:"varint,2,opt,name=atype" json:"atype,omitempty"`
}

func (x *UniversalId) Reset() {
	*x = UniversalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalId) ProtoMessage() {}

func (x *UniversalId) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalId.ProtoReflect.Descriptor instead.
func (*UniversalId) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{4}
}

func (x *UniversalId) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UniversalId) GetAtype() int32 {
	if x != nil && x.Atype != nil {
		return *x.Atype
	}
	return 0
}

// *
// Extended identifiers support in the OpenRTB specification allows buyers to
// use audience data in real-time bidding.  The exchange should ensure that
// business agreements allow for the sending of this data.  Note, it is
// assumed that exchanges and DSPs will collaborate with the appropriate
// regulatory agencies and ID vendor(s) to ensure compliance.
type ExtendedId struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Source or technology provider responsible for the set of included IDs.
	// Expressed as a top-level domain.
	Source *string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// Array of extended ID UID objects from the given source.
	Uids []*UniversalId `protobuf:"bytes,2,rep,name=uids" json:"uids,omitempty"`
}

func (x *ExtendedId) Reset() {
	*x = ExtendedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedId) ProtoMessage() {}

func (x *ExtendedId) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedId.ProtoReflect.Descriptor instead.
func (*ExtendedId) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{5}
}

func (x *ExtendedId) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ExtendedId) GetUids() []*UniversalId {
	if x != nil {
		return x.Uids
	}
	return nil
}

// *
// This object contains information known or derived about the human user of the device (i.e., the
// audience for advertising). The user ID is a vendor-specific artifact and may be subject to
// rotation or other privacy policies. However, this user ID must be stable long enough to serve
// reasonably as the basis for frequency capping and retargeting.
type User struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Vendor-specific ID for th euser. At least one of "id" or "buyeruid" is strongly recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by an exchange for the buyer. At least one of "id" or
	// "buyeruid" is strongly recommended.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	// Year of birth as a 4-digit integer.
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	// Gender, where "M" = male, "F" = female, "O" = known to be other (i.e., omitted is unknown).
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	// Comma separated list of keywords, interests, or intent.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	// GDPR content string if applicable, complying with the IAB standard Consent String Format in
	// the Transparency and Consent Framework technical specifications.
	Consent *string `protobuf:"bytes,6,opt,name=consent" json:"consent,omitempty"`
	// Location of the user's home base (i.e., not necessarily their current location).
	// Refer to Object: Geo.
	Geo *Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	// Additional user data. Each "Data" object represents a different data source.
	// Refer to Object: Data.
	Data []*Data `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	// Extended (third-party) identifiers for this user. Refer to Object: Extended Identifiers.
	Eids []*ExtendedId `protobuf:"bytes,9,rep,name=eids" json:"eids,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *User) GetBuyeruid() string {
	if x != nil && x.Buyeruid != nil {
		return *x.Buyeruid
	}
	return ""
}

func (x *User) GetYob() int32 {
	if x != nil && x.Yob != nil {
		return *x.Yob
	}
	return 0
}

func (x *User) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *User) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *User) GetConsent() string {
	if x != nil && x.Consent != nil {
		return *x.Consent
	}
	return ""
}

func (x *User) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *User) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *User) GetEids() []*ExtendedId {
	if x != nil {
		return x.Eids
	}
	return nil
}

// *
// This object provides information pertaining to the device through which the user is interacting.
// Device information includes its hardware, platform, location, and carrier data. The device can
// refer to a mobile handset, a desktop computer, set top box, or other digital device.
type Device struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The general type of device.
	// Refer to List: com.iabtechlab.adcom.v1.enums.DeviceTypes.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Browser user agent string.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	Ifa *string `protobuf:"bytes,3,opt,name=ifa" json:"ifa,omitempty"`
	// Standard "Do Not Track" flag as set in the header by the browser, where false = tracking is
	// unrestricted, true = do not track.
	Dnt *bool `protobuf:"varint,4,opt,name=dnt" json:"dnt,omitempty"`
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android), where false = tracking
	// is unrestricted, true = tracking must be limited per commercial guidelines.
	Lmt *bool `protobuf:"varint,5,opt,name=lmt" json:"lmt,omitempty"`
	// Device make (e.g., "Apple").
	Make *string `protobuf:"bytes,6,opt,name=make" json:"make,omitempty"`
	// Device model (e.g., "iPhone").
	Model *string `protobuf:"bytes,7,opt,name=model" json:"model,omitempty"`
	// Device operating system.
	// Refer to List: com.iabtechlab.adcom.v1.enums.OperatingSystem.
	Os *int32 `protobuf:"varint,8,opt,name=os" json:"os,omitempty"`
	// Device operating system version (e.g., “3.1.2”).
	Osv *string `protobuf:"bytes,9,opt,name=osv" json:"osv,omitempty"`
	// Hardware version of the device (e.g. "5S" for iPhone 5S).
	Hwv *string `protobuf:"bytes,10,opt,name=hwv" json:"hwv,omitempty"`
	// Physical height of the screen in pixels.
	H *int32 `protobuf:"varint,11,opt,name=h" json:"h,omitempty"`
	// Physical width of the screen in pixels.
	W *int32 `protobuf:"varint,12,opt,name=w" json:"w,omitempty"`
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,13,opt,name=ppi" json:"ppi,omitempty"`
	// The ratio of pixels to device independent pixels.
	Pxratio *float32 `protobuf:"fixed32,14,opt,name=pxratio" json:"pxratio,omitempty"`
	// Support for Javascript, where false = no, true = yes.
	Js *bool `protobuf:"varint,15,opt,name=js" json:"js,omitempty"`
	// Browser language using ISO-639-1-alpha-2.
	Lang *string `protobuf:"bytes,16,opt,name=lang" json:"lang,omitempty"`
	// IPv4 address closest to device.
	Ip *string `protobuf:"bytes,17,opt,name=ip" json:"ip,omitempty"`
	// IPv6 address closest to device.
	Ipv6 *string `protobuf:"bytes,18,opt,name=ipv6" json:"ipv6,omitempty"`
	// The value of the x-frowarded-for header.
	Xff *string `protobuf:"bytes,19,opt,name=xff" json:"xff,omitempty"`
	// Indicator of truncation of any of the IP attributes (i.e., "ip", "ipv6", "xff", where true =
	// yes, false = no (e.g., from 1.2.3.4 to 1.2.3.0).
	// Refer to tools.ietf.org/html/rfc6235#section-4.1.1 for more information on IP truncation.
	Iptr *bool `protobuf:"varint,20,opt,name=iptr" json:"iptr,omitempty"`
	// Carrier or ISP (e.g., "VERIZON") using exchange curated string names which should be published
	// to bidders a priori.
	Carrier *string `protobuf:"bytes,21,opt,name=carrier" json:"carrier,omitempty"`
	// Mobile carrier as the concatenated MCC-MNC code (e.g., "310-005" identifies Verizon Wireless
	// CDMA in the USA). Refer to en.wikipedia.org/wiki/Mobile_country_code for further information
	// and references. Note that the dash between the MCC and MNC parts is required to remove parsing
	// ambiguity.
	Mccmnc *string `protobuf:"bytes,22,opt,name=mccmnc" json:"mccmnc,omitempty"`
	// MCC and MNC of the SIM card using the same format as "mccmnc". When both values are available,
	// a difference between them reveals that a user is roaming.
	Mccmncsim *string `protobuf:"bytes,23,opt,name=mccmncsim" json:"mccmncsim,omitempty"`
	// Network connection type.
	// Refer to List: com.iabtechlab.adcom.v1.enums.ConnectionType.
	Contype *int32 `protobuf:"varint,24,opt,name=contype" json:"contype,omitempty"`
	// Indicates if the geolocation API will be available to Javascript code running in display ad,
	// where false = no, true = yes.
	Geofetch *bool `protobuf:"varint,25,opt,name=geofetch" json:"geofetch,omitempty"`
	// Location of the device (i.e., typically the user's current location).
	// Refer to Object: Geo.
	Geo *Geo `protobuf:"bytes,26,opt,name=geo" json:"geo,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{7}
}

func (x *Device) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Device) GetUa() string {
	if x != nil && x.Ua != nil {
		return *x.Ua
	}
	return ""
}

func (x *Device) GetIfa() string {
	if x != nil && x.Ifa != nil {
		return *x.Ifa
	}
	return ""
}

func (x *Device) GetDnt() bool {
	if x != nil && x.Dnt != nil {
		return *x.Dnt
	}
	return false
}

func (x *Device) GetLmt() bool {
	if x != nil && x.Lmt != nil {
		return *x.Lmt
	}
	return false
}

func (x *Device) GetMake() string {
	if x != nil && x.Make != nil {
		return *x.Make
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Device) GetOs() int32 {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return 0
}

func (x *Device) GetOsv() string {
	if x != nil && x.Osv != nil {
		return *x.Osv
	}
	return ""
}

func (x *Device) GetHwv() string {
	if x != nil && x.Hwv != nil {
		return *x.Hwv
	}
	return ""
}

func (x *Device) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *Device) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *Device) GetPpi() int32 {
	if x != nil && x.Ppi != nil {
		return *x.Ppi
	}
	return 0
}

func (x *Device) GetPxratio() float32 {
	if x != nil && x.Pxratio != nil {
		return *x.Pxratio
	}
	return 0
}

func (x *Device) GetJs() bool {
	if x != nil && x.Js != nil {
		return *x.Js
	}
	return false
}

func (x *Device) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *Device) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Device) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *Device) GetXff() string {
	if x != nil && x.Xff != nil {
		return *x.Xff
	}
	return ""
}

func (x *Device) GetIptr() bool {
	if x != nil && x.Iptr != nil {
		return *x.Iptr
	}
	return false
}

func (x *Device) GetCarrier() string {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return ""
}

func (x *Device) GetMccmnc() string {
	if x != nil && x.Mccmnc != nil {
		return *x.Mccmnc
	}
	return ""
}

func (x *Device) GetMccmncsim() string {
	if x != nil && x.Mccmncsim != nil {
		return *x.Mccmncsim
	}
	return ""
}

func (x *Device) GetContype() int32 {
	if x != nil && x.Contype != nil {
		return *x.Contype
	}
	return 0
}

func (x *Device) GetGeofetch() bool {
	if x != nil && x.Geofetch != nil {
		return *x.Geofetch
	}
	return false
}

func (x *Device) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

// *
// This object encapsulates various methods for specifying a geographic location. When subordinate
// to a "Device" object, it indicates the location of the device which can also be interpreted as
// the user's current location. When subordinate to a "User" object, it indicates the location of
// the user's home base (i.e., not necessarily their current location).
//
// The "lat" and "lon" attributes should only be passed if they conform to the accuracy depicted in
// the "type" attribute. For example, the centroid of a large region (e.g., postal code) should not
// be passed.
type Geo struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Source of location data; recommended when passing lat/lon.
	// Refer to List: com.iabtechlab.adcom.v1.enums.LocationType.
	Type *int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	// Latitude from -90.0 to +90.0, where negative is south.
	Lat *float32 `protobuf:"fixed32,2,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon *float32 `protobuf:"fixed32,3,opt,name=lon" json:"lon,omitempty"`
	// Estimated location accuracy in meters; recommended when lat/lon are specified and derived from
	// a device's location services (i.e., type = 1). Note that this is the accuracy as reported from
	// the device. Consult OS specific documentation (e.g., Android, iOS) for exact interpretation.
	Accur *int32 `protobuf:"varint,4,opt,name=accur" json:"accur,omitempty"`
	// Number of seconds since this geolocation fix was established. Note that devices may cache
	// location data across multiple fetches. Ideally, this value should be from the time the actual
	// fix was taken.
	Lastfix *int32 `protobuf:"varint,5,opt,name=lastfix" json:"lastfix,omitempty"`
	// Service or provider used to determine geolocation from IP address if applicable (i.e.,
	// "type" = 2).
	// Refer to List: com.iabtechlab.adcom.v1.enums.LocationService.
	Ipserv *int32 `protobuf:"varint,6,opt,name=ipserv" json:"ipserv,omitempty"`
	// Country code using ISO-3166-1-alpha-2.
	// Note that alpha-3 codes may be encountered and vendors are encouraged to be tolerant of them.
	Country *string `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA
	Region *string `protobuf:"bytes,8,opt,name=region" json:"region,omitempty"`
	// Regional marketing areas such as Nielsen's DMA codes or other similar taxonomy to be agreed
	// among vendors prior to use.
	// Note that DMA is a trademarked asset of The Nielsen Company. Vendors are encouraged to ensure
	// their use of DMAs is properly licensed.
	Metro *string `protobuf:"bytes,9,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations "UN/LOCODE" with the space
	// between country and city suppressed (e.g., Boston MA, USA = "USBOS"). Refer to UN/LOCODE
	// Code List.
	City *string `protobuf:"bytes,10,opt,name=city" json:"city,omitempty"`
	// ZIP or postal code.
	Zip *string `protobuf:"bytes,11,opt,name=zip" json:"zip,omitempty"`
	// Local time as the number of +/- of minutes from UTC.
	Utcoffset *int32 `protobuf:"varint,12,opt,name=utcoffset" json:"utcoffset,omitempty"`
}

func (x *Geo) Reset() {
	*x = Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{8}
}

func (x *Geo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Geo) GetLat() float32 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *Geo) GetLon() float32 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *Geo) GetAccur() int32 {
	if x != nil && x.Accur != nil {
		return *x.Accur
	}
	return 0
}

func (x *Geo) GetLastfix() int32 {
	if x != nil && x.Lastfix != nil {
		return *x.Lastfix
	}
	return 0
}

func (x *Geo) GetIpserv() int32 {
	if x != nil && x.Ipserv != nil {
		return *x.Ipserv
	}
	return 0
}

func (x *Geo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *Geo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Geo) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return ""
}

func (x *Geo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Geo) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return ""
}

func (x *Geo) GetUtcoffset() int32 {
	if x != nil && x.Utcoffset != nil {
		return *x.Utcoffset
	}
	return 0
}

// *
// The data and segment objects together allow additional data about the related object (e.g.,
// user, content) to be specified. This data may be from multiple sources whether from the exchange
// itself or third parties as specified by the "id" attribute. When in use, vendor-specific IDs
// should be communicated a priori among the parties.
type Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Vendor-specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Vendor-specific displayable name for the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of "Segment" objects that contain the actual data values.
	// Refer to Object: Segment.
	Segment []*Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{9}
}

func (x *Data) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Data) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Data) GetSegment() []*Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// *
// Segment objects are essentially key-value pairs that convey specific units of data. The parent
// "Data" object is a collection of such values from a given data provider. When in use, vendor-
// specific IDs should be communicated a priori among the parties.
type Segment struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID of the data segment specific to the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Displayable name of the data segment specific to the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// String representation of the data segment value.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{10}
}

func (x *Segment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Segment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Segment) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// This object contains any known legal, governmental, or industry regulations that are in effect.
type Regs struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Flag indicating if COPPA regulations apply, where false = no, true = yes.
	// The Children's Online Privacy Protection Act (COPPA) was established by the U.S. Federal Trade
	// Commission.
	Coppa *bool `protobuf:"varint,1,opt,name=coppa" json:"coppa,omitempty"`
	// Flag indicating if GDPR regulations apply, where false = no, true = yes.
	// The General Data Protection Regulation (GDPR) is a regulation of the European Union.
	Gdpr *bool `protobuf:"varint,2,opt,name=gdpr" json:"gdpr,omitempty"`
}

func (x *Regs) Reset() {
	*x = Regs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regs) ProtoMessage() {}

func (x *Regs) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regs.ProtoReflect.Descriptor instead.
func (*Regs) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{11}
}

func (x *Regs) GetCoppa() bool {
	if x != nil && x.Coppa != nil {
		return *x.Coppa
	}
	return false
}

func (x *Regs) GetGdpr() bool {
	if x != nil && x.Gdpr != nil {
		return *x.Gdpr
	}
	return false
}

// *
// This object allows lists of restrictions on ad responses to be specified including specific
// content categories, advertisers, ads pertaining to specific apps, or creative attributes.
type Restrictions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Block list of content categories using IDs from the taxonomy indicated in cattax.
	Bcat []string `protobuf:"bytes,1,rep,name=bcat" json:"bcat,omitempty"`
	// The taxonomy in use for the bcat attribute. Refer to List: Category Taxonomies.
	Cattax *int32 `protobuf:"varint,2,opt,name=cattax" json:"cattax,omitempty"`
	// Block list of advertisers by their domains (e.g., “ford.com”).
	Badv []string `protobuf:"bytes,3,rep,name=badv" json:"badv,omitempty"`
	// Block list of apps for which ads are disallowed. These should be bundle or package names
	// (e.g., “com.foo.mygame”) and should NOT be app store IDs (e.g., not iTunes store IDs).
	Bapp []string `protobuf:"bytes,4,rep,name=bapp" json:"bapp,omitempty"`
	// Block list of creative attributes. Refer to List: Creative Attributes.
	Battr []int32 `protobuf:"varint,5,rep,name=battr" json:"battr,omitempty"`
}

func (x *Restrictions) Reset() {
	*x = Restrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restrictions) ProtoMessage() {}

func (x *Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restrictions.ProtoReflect.Descriptor instead.
func (*Restrictions) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{12}
}

func (x *Restrictions) GetBcat() []string {
	if x != nil {
		return x.Bcat
	}
	return nil
}

func (x *Restrictions) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

func (x *Restrictions) GetBadv() []string {
	if x != nil {
		return x.Badv
	}
	return nil
}

func (x *Restrictions) GetBapp() []string {
	if x != nil {
		return x.Bapp
	}
	return nil
}

func (x *Restrictions) GetBattr() []int32 {
	if x != nil {
		return x.Battr
	}
	return nil
}

// *
// This object is used to define an ad supported website, in contrast to a non-browser
// application, for example.
type DistributionChannel_Site struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Domain of the site (e.g., "mysite.foo.com").
	Domain *string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Array of content categories describing the site using IDs from the taxomony indicated in
	// "cattax".
	Cat []string `protobuf:"bytes,2,rep,name=cat" json:"cat,omitempty"`
	// Array of content categories describing the current section of the site using IDs from the
	// taxonomy indicated in "cattax".
	Sectcat []string `protobuf:"bytes,3,rep,name=sectcat" json:"sectcat,omitempty"`
	// Array of content categories describing the current page or view of the site using IDs from
	// the taxonomy indicated in "cattax".
	Pagecat []string `protobuf:"bytes,4,rep,name=pagecat" json:"pagecat,omitempty"`
	// The taxonomy in use for the "cat", "sectcat", "pagecat" attributes.
	// Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	Cattax *int32 `protobuf:"varint,5,opt,name=cattax" json:"cattax,omitempty"`
	// Indicates if the site has a privacy policy, where false = no, true = yes.
	Privpolicy *bool `protobuf:"varint,6,opt,name=privpolicy" json:"privpolicy,omitempty"`
	// Comma-separated list of keywords about the site.
	Keywords *string `protobuf:"bytes,7,opt,name=keywords" json:"keywords,omitempty"`
	// URL of the page within the site.
	Page *string `protobuf:"bytes,8,opt,name=page" json:"page,omitempty"`
	// Referrer URL that casued navigation to the current page.
	Ref *string `protobuf:"bytes,9,opt,name=ref" json:"ref,omitempty"`
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,10,opt,name=search" json:"search,omitempty"`
	// Indicates if the site has been programmed to optimize layout when viewed on mobile devices,
	// where false = no, true = yes.
	Mobile *bool `protobuf:"varint,11,opt,name=mobile" json:"mobile,omitempty"`
	// Indicates if the page is built with AMP HTML, where false = no, true = yes.
	Amp *bool `protobuf:"varint,12,opt,name=amp" json:"amp,omitempty"`
}

func (x *DistributionChannel_Site) Reset() {
	*x = DistributionChannel_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionChannel_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionChannel_Site) ProtoMessage() {}

func (x *DistributionChannel_Site) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionChannel_Site.ProtoReflect.Descriptor instead.
func (*DistributionChannel_Site) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DistributionChannel_Site) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *DistributionChannel_Site) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *DistributionChannel_Site) GetSectcat() []string {
	if x != nil {
		return x.Sectcat
	}
	return nil
}

func (x *DistributionChannel_Site) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *DistributionChannel_Site) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

func (x *DistributionChannel_Site) GetPrivpolicy() bool {
	if x != nil && x.Privpolicy != nil {
		return *x.Privpolicy
	}
	return false
}

func (x *DistributionChannel_Site) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *DistributionChannel_Site) GetPage() string {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return ""
}

func (x *DistributionChannel_Site) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

func (x *DistributionChannel_Site) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *DistributionChannel_Site) GetMobile() bool {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return false
}

func (x *DistributionChannel_Site) GetAmp() bool {
	if x != nil && x.Amp != nil {
		return *x.Amp
	}
	return false
}

// *
// This object is used to define an ad supported non-browser application, in contrast to a typical
// website.
type DistributionChannel_App struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Domain of the app (e.g., "mygame.foo.com")
	Domain *string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Array of content categories describing the app using IDs from the taxomony indicated in
	// "cattax".
	Cat []string `protobuf:"bytes,2,rep,name=cat" json:"cat,omitempty"`
	// Array of content categories describing the current section of the app using IDs from the
	// taxonomy indicated in "cattax".
	Sectcat []string `protobuf:"bytes,3,rep,name=sectcat" json:"sectcat,omitempty"`
	// Array of content categories describing the current page or view of the app using IDs from
	// the taxonomy indicated in "cattax".
	Pagecat []string `protobuf:"bytes,4,rep,name=pagecat" json:"pagecat,omitempty"`
	// The taxonomy in use for the "cat", "sectcat", "pagecat" attributes.
	// Refer to List: com.iabtechlab.adcom.v1.enums.CategoryTaxonomy.
	Cattax *int32 `protobuf:"varint,5,opt,name=cattax" json:"cattax,omitempty"`
	// Indicates if the site has a privacy policy, where false = no, true = yes.
	Privpolicy *bool `protobuf:"varint,6,opt,name=privpolicy" json:"privpolicy,omitempty"`
	// Comma-separated list of keywords about the app.
	Keywords *string `protobuf:"bytes,7,opt,name=keywords" json:"keywords,omitempty"`
	// Bundle or package name of the app (e.g., "com.foo.mygame") and should NOT be app store IDs
	// (e.g., Apple iTunes, Google Play)
	Bundle *string `protobuf:"bytes,8,opt,name=bundle" json:"bundle,omitempty"`
	// The ID of the app in an app store (e.g., Apple iTunes, Google Play).
	Storeid *string `protobuf:"bytes,9,opt,name=storeid" json:"storeid,omitempty"`
	// App store URL for an installed app; for IQG 2.1 compliance.
	Storeurl *string `protobuf:"bytes,10,opt,name=storeurl" json:"storeurl,omitempty"`
	// Application version.
	Ver *string `protobuf:"bytes,11,opt,name=ver" json:"ver,omitempty"`
	// Indicator of whether or not this is a paid app, where false = free, true = paid.
	// Default = false
	Paid *bool `protobuf:"varint,12,opt,name=paid" json:"paid,omitempty"`
}

func (x *DistributionChannel_App) Reset() {
	*x = DistributionChannel_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionChannel_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionChannel_App) ProtoMessage() {}

func (x *DistributionChannel_App) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionChannel_App.ProtoReflect.Descriptor instead.
func (*DistributionChannel_App) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DistributionChannel_App) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *DistributionChannel_App) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *DistributionChannel_App) GetSectcat() []string {
	if x != nil {
		return x.Sectcat
	}
	return nil
}

func (x *DistributionChannel_App) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *DistributionChannel_App) GetCattax() int32 {
	if x != nil && x.Cattax != nil {
		return *x.Cattax
	}
	return 0
}

func (x *DistributionChannel_App) GetPrivpolicy() bool {
	if x != nil && x.Privpolicy != nil {
		return *x.Privpolicy
	}
	return false
}

func (x *DistributionChannel_App) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *DistributionChannel_App) GetBundle() string {
	if x != nil && x.Bundle != nil {
		return *x.Bundle
	}
	return ""
}

func (x *DistributionChannel_App) GetStoreid() string {
	if x != nil && x.Storeid != nil {
		return *x.Storeid
	}
	return ""
}

func (x *DistributionChannel_App) GetStoreurl() string {
	if x != nil && x.Storeurl != nil {
		return *x.Storeurl
	}
	return ""
}

func (x *DistributionChannel_App) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *DistributionChannel_App) GetPaid() bool {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return false
}

// *
// This object is used to define an ad supported digital out-of-home (DOOH) experience such as a
// public kiosk or digital billboard.
type DistributionChannel_DOOH struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The type of out-of-home venue.
	// Refer to List: abtechlab.adcom.v1.enums.DOOHVenueType.
	Venue *int32 `protobuf:"varint,1,opt,name=venue" json:"venue,omitempty"`
	// Indicates whether the DOOH placement is in a fixed location (e.g., kiosk, billboard,
	// elevator) or is movable (e.g., taxi), where 1 = fixed, 2 = movable.
	Fixed *int32 `protobuf:"varint,2,opt,name=fixed" json:"fixed,omitempty"`
	// The exposure time in seconds per view that the creative will be displayed before refreshing
	// to the next creative.
	Etime *int32 `protobuf:"varint,3,opt,name=etime" json:"etime,omitempty"`
	// Minimum DPI for text-based creative elements to display clearly.
	Dpi *int32 `protobuf:"varint,4,opt,name=dpi" json:"dpi,omitempty"`
}

func (x *DistributionChannel_DOOH) Reset() {
	*x = DistributionChannel_DOOH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionChannel_DOOH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionChannel_DOOH) ProtoMessage() {}

func (x *DistributionChannel_DOOH) ProtoReflect() protoreflect.Message {
	mi := &file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionChannel_DOOH.ProtoReflect.Descriptor instead.
func (*DistributionChannel_DOOH) Descriptor() ([]byte, []int) {
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DistributionChannel_DOOH) GetVenue() int32 {
	if x != nil && x.Venue != nil {
		return *x.Venue
	}
	return 0
}

func (x *DistributionChannel_DOOH) GetFixed() int32 {
	if x != nil && x.Fixed != nil {
		return *x.Fixed
	}
	return 0
}

func (x *DistributionChannel_DOOH) GetEtime() int32 {
	if x != nil && x.Etime != nil {
		return *x.Etime
	}
	return 0
}

func (x *DistributionChannel_DOOH) GetDpi() int32 {
	if x != nil && x.Dpi != nil {
		return *x.Dpi
	}
	return 0
}

var File_com_iabtechlab_adcom_v1_context_context_proto protoreflect.FileDescriptor

var file_com_iabtechlab_adcom_v1_context_context_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x08, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x03, 0x70, 0x75, 0x62,
	0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x6f, 0x6f, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x4f, 0x4f, 0x48, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x6f, 0x6f, 0x68, 0x1a, 0xa7, 0x02, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x63,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x63, 0x61,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x74, 0x74, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74,
	0x74, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x61, 0x6d, 0x70, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xb2,
	0x02, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0x61, 0x0a, 0x04, 0x44, 0x4f, 0x4f, 0x48, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x70, 0x69, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x78, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90,
	0x4e, 0x22, 0x96, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x72, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x74,
	0x74, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x64, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x64, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x72, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x72, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63,
	0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x77, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x22, 0x3a, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22,
	0x6d, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63,
	0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x49,
	0x64, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0xcd,
	0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x79, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x65, 0x69, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49,
	0x64, 0x52, 0x04, 0x65, 0x69, 0x64, 0x73, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0xbb,
	0x04, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x75, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x66, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6c, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x73, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x73, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x77, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x77,
	0x76, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12,
	0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x70, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x70, 0x69, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6a, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6a, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x66, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x78, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x70, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x63, 0x63,
	0x6d, 0x6e, 0x63, 0x73, 0x69, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x63,
	0x63, 0x6d, 0x6e, 0x63, 0x73, 0x69, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a,
	0x03, 0x67, 0x65, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x03, 0x67, 0x65, 0x6f, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x98, 0x02, 0x0a,
	0x03, 0x47, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a,
	0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x75, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x4a,
	0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x37, 0x0a, 0x04, 0x52, 0x65,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x64, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x64, 0x70, 0x72, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x22, 0x7f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x63, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x74, 0x74, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x61, 0x64, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x61, 0x64, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x2a, 0x05, 0x08,
	0x64, 0x10, 0x90, 0x4e, 0x42, 0xa4, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x64, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x4b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e,
	0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x64, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xa2, 0x02, 0x05, 0x43, 0x49,
	0x41, 0x56, 0x43, 0xaa, 0x02, 0x1f, 0x43, 0x6f, 0x6d, 0x2e, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63,
	0x68, 0x6c, 0x61, 0x62, 0x2e, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0xca, 0x02, 0x1f, 0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xe2, 0x02, 0x2b, 0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61,
	0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x5c, 0x56,
	0x31, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x23, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x49, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x41, 0x64, 0x63, 0x6f, 0x6d, 0x3a, 0x3a,
	0x56, 0x31, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
}

var (
	file_com_iabtechlab_adcom_v1_context_context_proto_rawDescOnce sync.Once
	file_com_iabtechlab_adcom_v1_context_context_proto_rawDescData = file_com_iabtechlab_adcom_v1_context_context_proto_rawDesc
)

func file_com_iabtechlab_adcom_v1_context_context_proto_rawDescGZIP() []byte {
	file_com_iabtechlab_adcom_v1_context_context_proto_rawDescOnce.Do(func() {
		file_com_iabtechlab_adcom_v1_context_context_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_iabtechlab_adcom_v1_context_context_proto_rawDescData)
	})
	return file_com_iabtechlab_adcom_v1_context_context_proto_rawDescData
}

var file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_com_iabtechlab_adcom_v1_context_context_proto_goTypes = []any{
	(*DistributionChannel)(nil),      // 0: com.iabtechlab.adcom.v1.context.DistributionChannel
	(*Publisher)(nil),                // 1: com.iabtechlab.adcom.v1.context.Publisher
	(*Content)(nil),                  // 2: com.iabtechlab.adcom.v1.context.Content
	(*Producer)(nil),                 // 3: com.iabtechlab.adcom.v1.context.Producer
	(*UniversalId)(nil),              // 4: com.iabtechlab.adcom.v1.context.UniversalId
	(*ExtendedId)(nil),               // 5: com.iabtechlab.adcom.v1.context.ExtendedId
	(*User)(nil),                     // 6: com.iabtechlab.adcom.v1.context.User
	(*Device)(nil),                   // 7: com.iabtechlab.adcom.v1.context.Device
	(*Geo)(nil),                      // 8: com.iabtechlab.adcom.v1.context.Geo
	(*Data)(nil),                     // 9: com.iabtechlab.adcom.v1.context.Data
	(*Segment)(nil),                  // 10: com.iabtechlab.adcom.v1.context.Segment
	(*Regs)(nil),                     // 11: com.iabtechlab.adcom.v1.context.Regs
	(*Restrictions)(nil),             // 12: com.iabtechlab.adcom.v1.context.Restrictions
	(*DistributionChannel_Site)(nil), // 13: com.iabtechlab.adcom.v1.context.DistributionChannel.Site
	(*DistributionChannel_App)(nil),  // 14: com.iabtechlab.adcom.v1.context.DistributionChannel.App
	(*DistributionChannel_DOOH)(nil), // 15: com.iabtechlab.adcom.v1.context.DistributionChannel.DOOH
}
var file_com_iabtechlab_adcom_v1_context_context_proto_depIdxs = []int32{
	1,  // 0: com.iabtechlab.adcom.v1.context.DistributionChannel.pub:type_name -> com.iabtechlab.adcom.v1.context.Publisher
	2,  // 1: com.iabtechlab.adcom.v1.context.DistributionChannel.content:type_name -> com.iabtechlab.adcom.v1.context.Content
	13, // 2: com.iabtechlab.adcom.v1.context.DistributionChannel.site:type_name -> com.iabtechlab.adcom.v1.context.DistributionChannel.Site
	14, // 3: com.iabtechlab.adcom.v1.context.DistributionChannel.app:type_name -> com.iabtechlab.adcom.v1.context.DistributionChannel.App
	15, // 4: com.iabtechlab.adcom.v1.context.DistributionChannel.dooh:type_name -> com.iabtechlab.adcom.v1.context.DistributionChannel.DOOH
	3,  // 5: com.iabtechlab.adcom.v1.context.Content.producer:type_name -> com.iabtechlab.adcom.v1.context.Producer
	9,  // 6: com.iabtechlab.adcom.v1.context.Content.data:type_name -> com.iabtechlab.adcom.v1.context.Data
	4,  // 7: com.iabtechlab.adcom.v1.context.ExtendedId.uids:type_name -> com.iabtechlab.adcom.v1.context.UniversalId
	8,  // 8: com.iabtechlab.adcom.v1.context.User.geo:type_name -> com.iabtechlab.adcom.v1.context.Geo
	9,  // 9: com.iabtechlab.adcom.v1.context.User.data:type_name -> com.iabtechlab.adcom.v1.context.Data
	5,  // 10: com.iabtechlab.adcom.v1.context.User.eids:type_name -> com.iabtechlab.adcom.v1.context.ExtendedId
	8,  // 11: com.iabtechlab.adcom.v1.context.Device.geo:type_name -> com.iabtechlab.adcom.v1.context.Geo
	10, // 12: com.iabtechlab.adcom.v1.context.Data.segment:type_name -> com.iabtechlab.adcom.v1.context.Segment
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_com_iabtechlab_adcom_v1_context_context_proto_init() }
func file_com_iabtechlab_adcom_v1_context_context_proto_init() {
	if File_com_iabtechlab_adcom_v1_context_context_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Publisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UniversalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Regs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Restrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionChannel_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionChannel_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionChannel_DOOH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes[0].OneofWrappers = []any{
		(*DistributionChannel_Site_)(nil),
		(*DistributionChannel_App_)(nil),
		(*DistributionChannel_Dooh)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_iabtechlab_adcom_v1_context_context_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_iabtechlab_adcom_v1_context_context_proto_goTypes,
		DependencyIndexes: file_com_iabtechlab_adcom_v1_context_context_proto_depIdxs,
		MessageInfos:      file_com_iabtechlab_adcom_v1_context_context_proto_msgTypes,
	}.Build()
	File_com_iabtechlab_adcom_v1_context_context_proto = out.File
	file_com_iabtechlab_adcom_v1_context_context_proto_rawDesc = nil
	file_com_iabtechlab_adcom_v1_context_context_proto_goTypes = nil
	file_com_iabtechlab_adcom_v1_context_context_proto_depIdxs = nil
}
