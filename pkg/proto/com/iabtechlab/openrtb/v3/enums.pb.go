//*
// The following enumerations are referenced by attributes in OpenRTB objects.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: com/iabtechlab/openrtb/v3/enums.proto

package openrtbv3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuctionType int32

const (
	AuctionType_AuctionType_UNKNOWN AuctionType = 0
	AuctionType_FIRST_PRICE         AuctionType = 1
	AuctionType_SECOND_PRICE_PLUS   AuctionType = 2
	AuctionType_FIXED_PRICE         AuctionType = 3
)

// Enum value maps for AuctionType.
var (
	AuctionType_name = map[int32]string{
		0: "AuctionType_UNKNOWN",
		1: "FIRST_PRICE",
		2: "SECOND_PRICE_PLUS",
		3: "FIXED_PRICE",
	}
	AuctionType_value = map[string]int32{
		"AuctionType_UNKNOWN": 0,
		"FIRST_PRICE":         1,
		"SECOND_PRICE_PLUS":   2,
		"FIXED_PRICE":         3,
	}
)

func (x AuctionType) Enum() *AuctionType {
	p := new(AuctionType)
	*p = x
	return p
}

func (x AuctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[0].Descriptor()
}

func (AuctionType) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[0]
}

func (x AuctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuctionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuctionType(num)
	return nil
}

// Deprecated: Use AuctionType.Descriptor instead.
func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_openrtb_v3_enums_proto_rawDescGZIP(), []int{0}
}

type ItemDeliveryMethod int32

const (
	ItemDeliveryMethod_EITHER           ItemDeliveryMethod = 0
	ItemDeliveryMethod_INCLUDED_IN_BID  ItemDeliveryMethod = 1
	ItemDeliveryMethod_REFERENCED_BY_ID ItemDeliveryMethod = 2
)

// Enum value maps for ItemDeliveryMethod.
var (
	ItemDeliveryMethod_name = map[int32]string{
		0: "EITHER",
		1: "INCLUDED_IN_BID",
		2: "REFERENCED_BY_ID",
	}
	ItemDeliveryMethod_value = map[string]int32{
		"EITHER":           0,
		"INCLUDED_IN_BID":  1,
		"REFERENCED_BY_ID": 2,
	}
)

func (x ItemDeliveryMethod) Enum() *ItemDeliveryMethod {
	p := new(ItemDeliveryMethod)
	*p = x
	return p
}

func (x ItemDeliveryMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemDeliveryMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[1].Descriptor()
}

func (ItemDeliveryMethod) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[1]
}

func (x ItemDeliveryMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemDeliveryMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemDeliveryMethod(num)
	return nil
}

// Deprecated: Use ItemDeliveryMethod.Descriptor instead.
func (ItemDeliveryMethod) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_openrtb_v3_enums_proto_rawDescGZIP(), []int{1}
}

type NoBidReason int32

const (
	NoBidReason_NoBidReason_UNKNOWN  NoBidReason = 0
	NoBidReason_TECHNICAL_ERROR      NoBidReason = 1
	NoBidReason_INVALID_REQUEST      NoBidReason = 2
	NoBidReason_WEB_CRAWLER          NoBidReason = 3
	NoBidReason_NON_HUMAN_TRAFFIC    NoBidReason = 4
	NoBidReason_PROXY_IP             NoBidReason = 5
	NoBidReason_UNSUPPORTED_DEVICE   NoBidReason = 6
	NoBidReason_BLOCKED_PUBLISHER    NoBidReason = 7
	NoBidReason_UNMATCHED_USER       NoBidReason = 8
	NoBidReason_DAILY_USER_CAP       NoBidReason = 9
	NoBidReason_DAILY_DOMAIN_CAP     NoBidReason = 10
	NoBidReason_ADS_TXT_UNAVAILABLE  NoBidReason = 11
	NoBidReason_ADS_TXT_VIOLATION    NoBidReason = 12
	NoBidReason_ADS_CERT_UNAVAILABLE NoBidReason = 13
	NoBidReason_ADS_CERT_VIOLATION   NoBidReason = 14
	NoBidReason_INSUFFICIENT_TIME    NoBidReason = 15
)

// Enum value maps for NoBidReason.
var (
	NoBidReason_name = map[int32]string{
		0:  "NoBidReason_UNKNOWN",
		1:  "TECHNICAL_ERROR",
		2:  "INVALID_REQUEST",
		3:  "WEB_CRAWLER",
		4:  "NON_HUMAN_TRAFFIC",
		5:  "PROXY_IP",
		6:  "UNSUPPORTED_DEVICE",
		7:  "BLOCKED_PUBLISHER",
		8:  "UNMATCHED_USER",
		9:  "DAILY_USER_CAP",
		10: "DAILY_DOMAIN_CAP",
		11: "ADS_TXT_UNAVAILABLE",
		12: "ADS_TXT_VIOLATION",
		13: "ADS_CERT_UNAVAILABLE",
		14: "ADS_CERT_VIOLATION",
		15: "INSUFFICIENT_TIME",
	}
	NoBidReason_value = map[string]int32{
		"NoBidReason_UNKNOWN":  0,
		"TECHNICAL_ERROR":      1,
		"INVALID_REQUEST":      2,
		"WEB_CRAWLER":          3,
		"NON_HUMAN_TRAFFIC":    4,
		"PROXY_IP":             5,
		"UNSUPPORTED_DEVICE":   6,
		"BLOCKED_PUBLISHER":    7,
		"UNMATCHED_USER":       8,
		"DAILY_USER_CAP":       9,
		"DAILY_DOMAIN_CAP":     10,
		"ADS_TXT_UNAVAILABLE":  11,
		"ADS_TXT_VIOLATION":    12,
		"ADS_CERT_UNAVAILABLE": 13,
		"ADS_CERT_VIOLATION":   14,
		"INSUFFICIENT_TIME":    15,
	}
)

func (x NoBidReason) Enum() *NoBidReason {
	p := new(NoBidReason)
	*p = x
	return p
}

func (x NoBidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoBidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[2].Descriptor()
}

func (NoBidReason) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[2]
}

func (x NoBidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NoBidReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NoBidReason(num)
	return nil
}

// Deprecated: Use NoBidReason.Descriptor instead.
func (NoBidReason) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_openrtb_v3_enums_proto_rawDescGZIP(), []int{2}
}

type LossReason int32

const (
	LossReason_BID_WON                       LossReason = 0
	LossReason_INTERNAL_ERROR                LossReason = 1
	LossReason_OPPORTUNITY_EXPIRED           LossReason = 2
	LossReason_INVALID_BID_RESPONSE          LossReason = 3
	LossReason_INVALID_DEAL_ID               LossReason = 4
	LossReason_INVALID_AUCTION_ID            LossReason = 5
	LossReason_INVALID_ADVERTISER_DOMAIN     LossReason = 6
	LossReason_MISSING_MARKUP                LossReason = 7
	LossReason_MISSING_CREATIVE_ID           LossReason = 8
	LossReason_MISSING_BID_PRICE             LossReason = 9
	LossReason_MISSING_APPROVAL_DATA         LossReason = 10
	LossReason_BID_BELOW_AUCTION_FLOOR       LossReason = 100
	LossReason_BID_BELOW_DEAL_FLOOR          LossReason = 101
	LossReason_LOST_TO_HIGHER_BID            LossReason = 102
	LossReason_LOST_TO_DEAL                  LossReason = 103
	LossReason_BUYER_SEAT_BLOCKED            LossReason = 104
	LossReason_CREATIVE_GENERAL_ERROR        LossReason = 200
	LossReason_CREATIVE_PENDING              LossReason = 201
	LossReason_CREATIVE_DISAPPROVED          LossReason = 202
	LossReason_CREATIVE_SIZE_EXCLUSION       LossReason = 203
	LossReason_CREATIVE_INCORRECT_FORMAT     LossReason = 204
	LossReason_CREATIVE_ADVERTISER_EXCLUSION LossReason = 205
	LossReason_CREATIVE_NOT_SECURE           LossReason = 206
	LossReason_CREATIVE_LANGUAGE_EXCLUSION   LossReason = 207
	LossReason_CREATIVE_CATEGORY_EXCLUSION   LossReason = 208
	LossReason_CREATIVE_ATTRIBUTE_EXCLUSION  LossReason = 209
	LossReason_CREATIVE_TYPE_EXCLUSION       LossReason = 210
	LossReason_CREATIVE_ANIMATION_TOO_LONG   LossReason = 211
	LossReason_CREATIVE_DEAL_EXCLUSION       LossReason = 212
)

// Enum value maps for LossReason.
var (
	LossReason_name = map[int32]string{
		0:   "BID_WON",
		1:   "INTERNAL_ERROR",
		2:   "OPPORTUNITY_EXPIRED",
		3:   "INVALID_BID_RESPONSE",
		4:   "INVALID_DEAL_ID",
		5:   "INVALID_AUCTION_ID",
		6:   "INVALID_ADVERTISER_DOMAIN",
		7:   "MISSING_MARKUP",
		8:   "MISSING_CREATIVE_ID",
		9:   "MISSING_BID_PRICE",
		10:  "MISSING_APPROVAL_DATA",
		100: "BID_BELOW_AUCTION_FLOOR",
		101: "BID_BELOW_DEAL_FLOOR",
		102: "LOST_TO_HIGHER_BID",
		103: "LOST_TO_DEAL",
		104: "BUYER_SEAT_BLOCKED",
		200: "CREATIVE_GENERAL_ERROR",
		201: "CREATIVE_PENDING",
		202: "CREATIVE_DISAPPROVED",
		203: "CREATIVE_SIZE_EXCLUSION",
		204: "CREATIVE_INCORRECT_FORMAT",
		205: "CREATIVE_ADVERTISER_EXCLUSION",
		206: "CREATIVE_NOT_SECURE",
		207: "CREATIVE_LANGUAGE_EXCLUSION",
		208: "CREATIVE_CATEGORY_EXCLUSION",
		209: "CREATIVE_ATTRIBUTE_EXCLUSION",
		210: "CREATIVE_TYPE_EXCLUSION",
		211: "CREATIVE_ANIMATION_TOO_LONG",
		212: "CREATIVE_DEAL_EXCLUSION",
	}
	LossReason_value = map[string]int32{
		"BID_WON":                       0,
		"INTERNAL_ERROR":                1,
		"OPPORTUNITY_EXPIRED":           2,
		"INVALID_BID_RESPONSE":          3,
		"INVALID_DEAL_ID":               4,
		"INVALID_AUCTION_ID":            5,
		"INVALID_ADVERTISER_DOMAIN":     6,
		"MISSING_MARKUP":                7,
		"MISSING_CREATIVE_ID":           8,
		"MISSING_BID_PRICE":             9,
		"MISSING_APPROVAL_DATA":         10,
		"BID_BELOW_AUCTION_FLOOR":       100,
		"BID_BELOW_DEAL_FLOOR":          101,
		"LOST_TO_HIGHER_BID":            102,
		"LOST_TO_DEAL":                  103,
		"BUYER_SEAT_BLOCKED":            104,
		"CREATIVE_GENERAL_ERROR":        200,
		"CREATIVE_PENDING":              201,
		"CREATIVE_DISAPPROVED":          202,
		"CREATIVE_SIZE_EXCLUSION":       203,
		"CREATIVE_INCORRECT_FORMAT":     204,
		"CREATIVE_ADVERTISER_EXCLUSION": 205,
		"CREATIVE_NOT_SECURE":           206,
		"CREATIVE_LANGUAGE_EXCLUSION":   207,
		"CREATIVE_CATEGORY_EXCLUSION":   208,
		"CREATIVE_ATTRIBUTE_EXCLUSION":  209,
		"CREATIVE_TYPE_EXCLUSION":       210,
		"CREATIVE_ANIMATION_TOO_LONG":   211,
		"CREATIVE_DEAL_EXCLUSION":       212,
	}
)

func (x LossReason) Enum() *LossReason {
	p := new(LossReason)
	*p = x
	return p
}

func (x LossReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LossReason) Descriptor() protoreflect.EnumDescriptor {
	return file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[3].Descriptor()
}

func (LossReason) Type() protoreflect.EnumType {
	return &file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes[3]
}

func (x LossReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LossReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LossReason(num)
	return nil
}

// Deprecated: Use LossReason.Descriptor instead.
func (LossReason) EnumDescriptor() ([]byte, []int) {
	return file_com_iabtechlab_openrtb_v3_enums_proto_rawDescGZIP(), []int{3}
}

var File_com_iabtechlab_openrtb_v3_enums_proto protoreflect.FileDescriptor

var file_com_iabtechlab_openrtb_v3_enums_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62,
	0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x76, 0x33, 0x2a, 0x5f, 0x0a, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x02,
	0x2a, 0xec, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x43,
	0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x45, 0x42, 0x5f, 0x43, 0x52, 0x41, 0x57, 0x4c,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x48, 0x55, 0x4d, 0x41,
	0x4e, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x58, 0x59, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x43, 0x41, 0x50, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x53, 0x5f, 0x54, 0x58,
	0x54, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x44, 0x53, 0x5f, 0x54, 0x58, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x53, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x56, 0x49, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0f, 0x2a,
	0x94, 0x06, 0x0a, 0x0a, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x49, 0x44, 0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x55, 0x50,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0a, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49,
	0x44, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f,
	0x4f, 0x52, 0x10, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x67, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x68, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xc8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xcb, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x10, 0xcc, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0xcd, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0xce,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0xd0, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd1, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0xd2, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xd3, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0xd4, 0x01, 0x42, 0x83, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x64, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x69, 0x64, 0x6f,
	0x6e, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c,
	0x61, 0x62, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2f, 0x76, 0x33, 0x3b, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x76, 0x33, 0xa2, 0x02, 0x03, 0x43, 0x49, 0x4f, 0xaa, 0x02, 0x19,
	0x43, 0x6f, 0x6d, 0x2e, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x56, 0x33, 0xca, 0x02, 0x19, 0x43, 0x6f, 0x6d, 0x5c,
	0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x4f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x5c, 0x56, 0x33, 0xe2, 0x02, 0x25, 0x43, 0x6f, 0x6d, 0x5c, 0x49, 0x61, 0x62, 0x74,
	0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x5c, 0x4f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x5c, 0x56,
	0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c,
	0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x49, 0x61, 0x62, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x3a,
	0x3a, 0x4f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x3a, 0x3a, 0x56, 0x33,
}

var (
	file_com_iabtechlab_openrtb_v3_enums_proto_rawDescOnce sync.Once
	file_com_iabtechlab_openrtb_v3_enums_proto_rawDescData = file_com_iabtechlab_openrtb_v3_enums_proto_rawDesc
)

func file_com_iabtechlab_openrtb_v3_enums_proto_rawDescGZIP() []byte {
	file_com_iabtechlab_openrtb_v3_enums_proto_rawDescOnce.Do(func() {
		file_com_iabtechlab_openrtb_v3_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_iabtechlab_openrtb_v3_enums_proto_rawDescData)
	})
	return file_com_iabtechlab_openrtb_v3_enums_proto_rawDescData
}

var file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_iabtechlab_openrtb_v3_enums_proto_goTypes = []any{
	(AuctionType)(0),        // 0: com.iabtechlab.openrtb.v3.AuctionType
	(ItemDeliveryMethod)(0), // 1: com.iabtechlab.openrtb.v3.ItemDeliveryMethod
	(NoBidReason)(0),        // 2: com.iabtechlab.openrtb.v3.NoBidReason
	(LossReason)(0),         // 3: com.iabtechlab.openrtb.v3.LossReason
}
var file_com_iabtechlab_openrtb_v3_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_com_iabtechlab_openrtb_v3_enums_proto_init() }
func file_com_iabtechlab_openrtb_v3_enums_proto_init() {
	if File_com_iabtechlab_openrtb_v3_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_iabtechlab_openrtb_v3_enums_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_iabtechlab_openrtb_v3_enums_proto_goTypes,
		DependencyIndexes: file_com_iabtechlab_openrtb_v3_enums_proto_depIdxs,
		EnumInfos:         file_com_iabtechlab_openrtb_v3_enums_proto_enumTypes,
	}.Build()
	File_com_iabtechlab_openrtb_v3_enums_proto = out.File
	file_com_iabtechlab_openrtb_v3_enums_proto_rawDesc = nil
	file_com_iabtechlab_openrtb_v3_enums_proto_goTypes = nil
	file_com_iabtechlab_openrtb_v3_enums_proto_depIdxs = nil
}
